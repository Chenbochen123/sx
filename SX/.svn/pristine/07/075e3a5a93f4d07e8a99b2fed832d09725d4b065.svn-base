//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasWorkUserInfoArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasWorkUserInfo> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasWorkUserInfo\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"BasWorkUserInfo\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isN" +
        "otNull=\"true\" />\r\n    <Property name=\"PdtDate\" type=\"System.Nullable`1[System.Da" +
        "teTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"PdtDate\" mappingColumnType=\"System.Nullable`1[System.Date" +
        "Time]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"EquipCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"ShiftID\" type=\"System.Nullable`1[System.Int32]\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"ShiftID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ClassID\" type=\"Syst" +
        "em.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"ClassID\" mappingColumnType=\"System.Nu" +
        "llable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"WorkBarcode\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"WorkBarcode" +
        "\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"WorkID\" type=\"System.Nullable`1[System." +
        "Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"WorkID\" mappingColumnType=\"System.Nullable`1[System.Int32]" +
        "\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"A" +
        "ttendance\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Attendance\" ma" +
        "ppingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordTime\" type=\"System.Nu" +
        "llable`1[System.DateTime]\" isInherited=\"false\" sqlDefaultValue=\"getdate()\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecordTime\"" +
        " mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordWorkBarcode\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"RecordWorkBarcode\" mappingColumnType=\"System.Str" +
        "ing\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"" +
        "(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"D" +
        "eleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasWorkUserInfo : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasWorkUserInfoEntityConfiguration;
        
        protected int _ObjID;
        
        protected global::System.DateTime? _PdtDate;
        
        protected string _EquipCode;
        
        protected global::System.Int32? _ShiftID;
        
        protected global::System.Int32? _ClassID;
        
        protected string _WorkBarcode;
        
        protected global::System.Int32? _WorkID;
        
        protected global::System.Decimal? _Attendance;
        
        protected global::System.DateTime? _RecordTime;
        
        protected string _RecordWorkBarcode;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasWorkUserInfo left, global::Mesnac.Entity.BasWorkUserInfo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasWorkUserInfo left, global::Mesnac.Entity.BasWorkUserInfo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.DateTime? PdtDate {
            get {
                return this._PdtDate;
            }
            set {
                this.OnPropertyChanged("PdtDate", this._PdtDate, value);
                this._PdtDate = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public global::System.Int32? ShiftID {
            get {
                return this._ShiftID;
            }
            set {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }
        
        public global::System.Int32? ClassID {
            get {
                return this._ClassID;
            }
            set {
                this.OnPropertyChanged("ClassID", this._ClassID, value);
                this._ClassID = value;
            }
        }
        
        public string WorkBarcode {
            get {
                return this._WorkBarcode;
            }
            set {
                this.OnPropertyChanged("WorkBarcode", this._WorkBarcode, value);
                this._WorkBarcode = value;
            }
        }
        
        public global::System.Int32? WorkID {
            get {
                return this._WorkID;
            }
            set {
                this.OnPropertyChanged("WorkID", this._WorkID, value);
                this._WorkID = value;
            }
        }
        
        public global::System.Decimal? Attendance {
            get {
                return this._Attendance;
            }
            set {
                this.OnPropertyChanged("Attendance", this._Attendance, value);
                this._Attendance = value;
            }
        }
        
        public global::System.DateTime? RecordTime {
            get {
                return this._RecordTime;
            }
            set {
                this.OnPropertyChanged("RecordTime", this._RecordTime, value);
                this._RecordTime = value;
            }
        }
        
        public string RecordWorkBarcode {
            get {
                return this._RecordWorkBarcode;
            }
            set {
                this.OnPropertyChanged("RecordWorkBarcode", this._RecordWorkBarcode, value);
                this._RecordWorkBarcode = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasWorkUserInfo._BasWorkUserInfoEntityConfiguration == null)) {
                BasWorkUserInfo._BasWorkUserInfoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasWorkUserInfo");
            }
            return BasWorkUserInfo._BasWorkUserInfoEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._PdtDate,
                    this._EquipCode,
                    this._ShiftID,
                    this._ClassID,
                    this._WorkBarcode,
                    this._WorkID,
                    this._Attendance,
                    this._RecordTime,
                    this._RecordWorkBarcode,
                    this._DeleteFlag,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PdtDate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ShiftID = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ClassID = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._WorkBarcode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._WorkID = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Attendance = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._RecordTime = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._RecordWorkBarcode = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._DeleteFlag = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._Remark = reader.GetString(11);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PdtDate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2))) {
                this._EquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ShiftID = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ClassID = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._WorkBarcode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._WorkID = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Attendance = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._RecordTime = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9))) {
                this._RecordWorkBarcode = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._DeleteFlag = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._Remark = ((string)(row[11]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasWorkUserInfo).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasWorkUserInfo)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.BasWorkUserInfo)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _PdtDate = new NBear.Common.PropertyItem("PdtDate", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _ClassID = new NBear.Common.PropertyItem("ClassID", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _WorkBarcode = new NBear.Common.PropertyItem("WorkBarcode", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _WorkID = new NBear.Common.PropertyItem("WorkID", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _Attendance = new NBear.Common.PropertyItem("Attendance", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _RecordTime = new NBear.Common.PropertyItem("RecordTime", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _RecordWorkBarcode = new NBear.Common.PropertyItem("RecordWorkBarcode", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasWorkUserInfo");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasWorkUserInfo");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PdtDate {
                get {
                    if ((aliasName == null)) {
                        return _PdtDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PdtDate", _PdtDate.EntityConfiguration, _PdtDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ClassID {
                get {
                    if ((aliasName == null)) {
                        return _ClassID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ClassID", _ClassID.EntityConfiguration, _ClassID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkBarcode {
                get {
                    if ((aliasName == null)) {
                        return _WorkBarcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkBarcode", _WorkBarcode.EntityConfiguration, _WorkBarcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkID {
                get {
                    if ((aliasName == null)) {
                        return _WorkID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkID", _WorkID.EntityConfiguration, _WorkID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Attendance {
                get {
                    if ((aliasName == null)) {
                        return _Attendance;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Attendance", _Attendance.EntityConfiguration, _Attendance.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordTime {
                get {
                    if ((aliasName == null)) {
                        return _RecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordTime", _RecordTime.EntityConfiguration, _RecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordWorkBarcode {
                get {
                    if ((aliasName == null)) {
                        return _RecordWorkBarcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordWorkBarcode", _RecordWorkBarcode.EntityConfiguration, _RecordWorkBarcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
