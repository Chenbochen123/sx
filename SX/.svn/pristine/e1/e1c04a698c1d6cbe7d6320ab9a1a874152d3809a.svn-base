//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcStandardArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcStandard> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmcStandard\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatc" +
        "hUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcStandard\" batchSize=\"10\">\r\n  " +
        "<Properties>\r\n    <Property name=\"StandardId\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "StandardId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" i" +
        "sNotNull=\"true\" />\r\n    <Property name=\"StandardName\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"StandardName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CreatorId\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"CreatorId\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"ActivateDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"ActivateDate\" mappingColumnT" +
        "ype=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadO" +
        "nly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"ActivateFlag\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"ActivateFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.St" +
        "ring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=" +
        "\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fa" +
        "lse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"" +
        "false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(" +
        "1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigur" +
        "ation>")]
    public partial class QmcStandard : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcStandardEntityConfiguration;
        
        protected int _StandardId;
        
        protected string _StandardName;
        
        protected string _CreatorId;
        
        protected global::System.DateTime _ActivateDate;
        
        protected string _Remark;
        
        protected string _ActivateFlag;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcStandard left, global::Mesnac.Entity.QmcStandard right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcStandard left, global::Mesnac.Entity.QmcStandard right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int StandardId {
            get {
                return this._StandardId;
            }
            set {
                this.OnPropertyChanged("StandardId", this._StandardId, value);
                this._StandardId = value;
            }
        }
        
        public string StandardName {
            get {
                return this._StandardName;
            }
            set {
                this.OnPropertyChanged("StandardName", this._StandardName, value);
                this._StandardName = value;
            }
        }
        
        public string CreatorId {
            get {
                return this._CreatorId;
            }
            set {
                this.OnPropertyChanged("CreatorId", this._CreatorId, value);
                this._CreatorId = value;
            }
        }
        
        public global::System.DateTime ActivateDate {
            get {
                return this._ActivateDate;
            }
            set {
                this.OnPropertyChanged("ActivateDate", this._ActivateDate, value);
                this._ActivateDate = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string ActivateFlag {
            get {
                return this._ActivateFlag;
            }
            set {
                this.OnPropertyChanged("ActivateFlag", this._ActivateFlag, value);
                this._ActivateFlag = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcStandard._QmcStandardEntityConfiguration == null)) {
                QmcStandard._QmcStandardEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcStandard");
            }
            return QmcStandard._QmcStandardEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._StandardId,
                    this._StandardName,
                    this._CreatorId,
                    this._ActivateDate,
                    this._Remark,
                    this._ActivateFlag,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._StandardId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StandardName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._CreatorId = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ActivateDate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Remark = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._ActivateFlag = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._DeleteFlag = reader.GetString(6);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._StandardId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StandardName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._CreatorId = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ActivateDate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4))) {
                this._Remark = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._ActivateFlag = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._DeleteFlag = ((string)(row[6]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcStandard).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcStandard)(obj)).isAttached) 
                        && (this.StandardId == ((global::Mesnac.Entity.QmcStandard)(obj)).StandardId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _StandardId = new NBear.Common.PropertyItem("StandardId", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _StandardName = new NBear.Common.PropertyItem("StandardName", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _CreatorId = new NBear.Common.PropertyItem("CreatorId", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _ActivateDate = new NBear.Common.PropertyItem("ActivateDate", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _ActivateFlag = new NBear.Common.PropertyItem("ActivateFlag", "Mesnac.Entity.QmcStandard");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcStandard");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem StandardId {
                get {
                    if ((aliasName == null)) {
                        return _StandardId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandardId", _StandardId.EntityConfiguration, _StandardId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandardName {
                get {
                    if ((aliasName == null)) {
                        return _StandardName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandardName", _StandardName.EntityConfiguration, _StandardName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreatorId {
                get {
                    if ((aliasName == null)) {
                        return _CreatorId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreatorId", _CreatorId.EntityConfiguration, _CreatorId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActivateDate {
                get {
                    if ((aliasName == null)) {
                        return _ActivateDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActivateDate", _ActivateDate.EntityConfiguration, _ActivateDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActivateFlag {
                get {
                    if ((aliasName == null)) {
                        return _ActivateFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActivateFlag", _ActivateFlag.EntityConfiguration, _ActivateFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
