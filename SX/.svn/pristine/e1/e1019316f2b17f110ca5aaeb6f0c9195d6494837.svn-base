//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptcurvedataArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Pptcurvedata> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Pptcurvedata\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatc" +
        "hUpdate=\"false\" isRelation=\"false\" mappingName=\"Pptcurvedata\" batchSize=\"10\">\r\n " +
        " <Properties>\r\n    <Property name=\"Barcode\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ba" +
        "rcode\" mappingColumnType=\"System.String\" sqlType=\"char(18)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"Curve_data\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"Curve_data\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Plandate\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"Plandate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Planid\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"Planid\" mappingColumnType=\"System.String\" sqlType=\"cha" +
        "r(12)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Serialid\" " +
        "type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"Serialid\" mappingColumnType=" +
        "\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"Startdatetime\" type=\"System.DateTime\" isInherited" +
        "=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"Startdatetime\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingTime\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"MixingTime\" mappingColumnType=\"System.String\" sqlType=\"ntex" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingTemp\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"MixingTemp\" mappingColumnType=\"System.String\" sq" +
        "lType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mix" +
        "ingPower\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"MixingPower\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"MixingEnergy\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingEnergy\" mappingC" +
        "olumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"MixingPress\" type=\"System.String\" isInherited=\"false\" i" +
        "sReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingPr" +
        "ess\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"MixingSpeed\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"MixingSpeed\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"If_Subed\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"If_Subed\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingSidetemp\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"MixingSidetemp\" mappingColumnType=\"System.String\" sq" +
        "lType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SDS" +
        "postion\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"SDSpostion\" mappingColumnType=\"System" +
        ".String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properti" +
        "es>\r\n</EntityConfiguration>")]
    public partial class Pptcurvedata : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptcurvedataEntityConfiguration;
        
        protected string _Barcode;
        
        protected string _Curve_data;
        
        protected string _Plandate;
        
        protected string _Planid;
        
        protected global::System.Int32? _Serialid;
        
        protected global::System.DateTime _Startdatetime;
        
        protected string _MixingTime;
        
        protected string _MixingTemp;
        
        protected string _MixingPower;
        
        protected string _MixingEnergy;
        
        protected string _MixingPress;
        
        protected string _MixingSpeed;
        
        protected string _If_Subed;
        
        protected string _MixingSidetemp;
        
        protected string _SDSpostion;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Pptcurvedata left, global::Mesnac.Entity.Pptcurvedata right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Pptcurvedata left, global::Mesnac.Entity.Pptcurvedata right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Barcode {
            get {
                return this._Barcode;
            }
            set {
                this.OnPropertyChanged("Barcode", this._Barcode, value);
                this._Barcode = value;
            }
        }
        
        public string Curve_data {
            get {
                return this._Curve_data;
            }
            set {
                this.OnPropertyChanged("Curve_data", this._Curve_data, value);
                this._Curve_data = value;
            }
        }
        
        public string Plandate {
            get {
                return this._Plandate;
            }
            set {
                this.OnPropertyChanged("Plandate", this._Plandate, value);
                this._Plandate = value;
            }
        }
        
        public string Planid {
            get {
                return this._Planid;
            }
            set {
                this.OnPropertyChanged("Planid", this._Planid, value);
                this._Planid = value;
            }
        }
        
        public global::System.Int32? Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public global::System.DateTime Startdatetime {
            get {
                return this._Startdatetime;
            }
            set {
                this.OnPropertyChanged("Startdatetime", this._Startdatetime, value);
                this._Startdatetime = value;
            }
        }
        
        public string MixingTime {
            get {
                return this._MixingTime;
            }
            set {
                this.OnPropertyChanged("MixingTime", this._MixingTime, value);
                this._MixingTime = value;
            }
        }
        
        public string MixingTemp {
            get {
                return this._MixingTemp;
            }
            set {
                this.OnPropertyChanged("MixingTemp", this._MixingTemp, value);
                this._MixingTemp = value;
            }
        }
        
        public string MixingPower {
            get {
                return this._MixingPower;
            }
            set {
                this.OnPropertyChanged("MixingPower", this._MixingPower, value);
                this._MixingPower = value;
            }
        }
        
        public string MixingEnergy {
            get {
                return this._MixingEnergy;
            }
            set {
                this.OnPropertyChanged("MixingEnergy", this._MixingEnergy, value);
                this._MixingEnergy = value;
            }
        }
        
        public string MixingPress {
            get {
                return this._MixingPress;
            }
            set {
                this.OnPropertyChanged("MixingPress", this._MixingPress, value);
                this._MixingPress = value;
            }
        }
        
        public string MixingSpeed {
            get {
                return this._MixingSpeed;
            }
            set {
                this.OnPropertyChanged("MixingSpeed", this._MixingSpeed, value);
                this._MixingSpeed = value;
            }
        }
        
        public string If_Subed {
            get {
                return this._If_Subed;
            }
            set {
                this.OnPropertyChanged("If_Subed", this._If_Subed, value);
                this._If_Subed = value;
            }
        }
        
        public string MixingSidetemp {
            get {
                return this._MixingSidetemp;
            }
            set {
                this.OnPropertyChanged("MixingSidetemp", this._MixingSidetemp, value);
                this._MixingSidetemp = value;
            }
        }
        
        public string SDSpostion {
            get {
                return this._SDSpostion;
            }
            set {
                this.OnPropertyChanged("SDSpostion", this._SDSpostion, value);
                this._SDSpostion = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Pptcurvedata._PptcurvedataEntityConfiguration == null)) {
                Pptcurvedata._PptcurvedataEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Pptcurvedata");
            }
            return Pptcurvedata._PptcurvedataEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Barcode,
                    this._Curve_data,
                    this._Plandate,
                    this._Planid,
                    this._Serialid,
                    this._Startdatetime,
                    this._MixingTime,
                    this._MixingTemp,
                    this._MixingPower,
                    this._MixingEnergy,
                    this._MixingPress,
                    this._MixingSpeed,
                    this._If_Subed,
                    this._MixingSidetemp,
                    this._SDSpostion};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Barcode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Curve_data = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Plandate = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Planid = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Serialid = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Startdatetime = this.GetDateTime(reader, 5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MixingTime = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._MixingTemp = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixingPower = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MixingEnergy = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._MixingPress = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixingSpeed = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._If_Subed = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._MixingSidetemp = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._SDSpostion = reader.GetString(14);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Barcode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Curve_data = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Plandate = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Planid = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._Serialid = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Startdatetime = this.GetDateTime(row, 5);
            }
            if ((false == row.IsNull(6))) {
                this._MixingTime = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._MixingTemp = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixingPower = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MixingEnergy = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._MixingPress = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixingSpeed = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._If_Subed = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._MixingSidetemp = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._SDSpostion = ((string)(row[14]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Pptcurvedata).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Pptcurvedata)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Barcode = new NBear.Common.PropertyItem("Barcode", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _Curve_data = new NBear.Common.PropertyItem("Curve_data", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _Plandate = new NBear.Common.PropertyItem("Plandate", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _Planid = new NBear.Common.PropertyItem("Planid", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _Startdatetime = new NBear.Common.PropertyItem("Startdatetime", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingTime = new NBear.Common.PropertyItem("MixingTime", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingTemp = new NBear.Common.PropertyItem("MixingTemp", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingPower = new NBear.Common.PropertyItem("MixingPower", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingEnergy = new NBear.Common.PropertyItem("MixingEnergy", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingPress = new NBear.Common.PropertyItem("MixingPress", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingSpeed = new NBear.Common.PropertyItem("MixingSpeed", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _If_Subed = new NBear.Common.PropertyItem("If_Subed", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _MixingSidetemp = new NBear.Common.PropertyItem("MixingSidetemp", "Mesnac.Entity.Pptcurvedata");
            
            protected NBear.Common.PropertyItem _SDSpostion = new NBear.Common.PropertyItem("SDSpostion", "Mesnac.Entity.Pptcurvedata");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Barcode {
                get {
                    if ((aliasName == null)) {
                        return _Barcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Barcode", _Barcode.EntityConfiguration, _Barcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Curve_data {
                get {
                    if ((aliasName == null)) {
                        return _Curve_data;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Curve_data", _Curve_data.EntityConfiguration, _Curve_data.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Plandate {
                get {
                    if ((aliasName == null)) {
                        return _Plandate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plandate", _Plandate.EntityConfiguration, _Plandate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Planid {
                get {
                    if ((aliasName == null)) {
                        return _Planid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Planid", _Planid.EntityConfiguration, _Planid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Startdatetime {
                get {
                    if ((aliasName == null)) {
                        return _Startdatetime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Startdatetime", _Startdatetime.EntityConfiguration, _Startdatetime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTime {
                get {
                    if ((aliasName == null)) {
                        return _MixingTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTime", _MixingTime.EntityConfiguration, _MixingTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTemp {
                get {
                    if ((aliasName == null)) {
                        return _MixingTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTemp", _MixingTemp.EntityConfiguration, _MixingTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPower {
                get {
                    if ((aliasName == null)) {
                        return _MixingPower;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPower", _MixingPower.EntityConfiguration, _MixingPower.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingEnergy {
                get {
                    if ((aliasName == null)) {
                        return _MixingEnergy;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingEnergy", _MixingEnergy.EntityConfiguration, _MixingEnergy.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPress {
                get {
                    if ((aliasName == null)) {
                        return _MixingPress;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPress", _MixingPress.EntityConfiguration, _MixingPress.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingSpeed {
                get {
                    if ((aliasName == null)) {
                        return _MixingSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingSpeed", _MixingSpeed.EntityConfiguration, _MixingSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem If_Subed {
                get {
                    if ((aliasName == null)) {
                        return _If_Subed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("If_Subed", _If_Subed.EntityConfiguration, _If_Subed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingSidetemp {
                get {
                    if ((aliasName == null)) {
                        return _MixingSidetemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingSidetemp", _MixingSidetemp.EntityConfiguration, _MixingSidetemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SDSpostion {
                get {
                    if ((aliasName == null)) {
                        return _SDSpostion;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SDSpostion", _SDSpostion.EntityConfiguration, _SDSpostion.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
