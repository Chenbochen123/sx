//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PpmRubberChkArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubberChk> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmRubberChk\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubberChk\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"BillNo\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"B" +
        "illNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"tr" +
        "ue\" isNotNull=\"true\" />\r\n    <Property name=\"NoticeNo\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"NoticeNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"FactoryID\" type=\"Sys" +
        "tem.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"FactoryID\" mappingColumnType=\"System" +
        ".Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"MakerPerson\" type=\"System.String\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MakerPer" +
        "son\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"InStockDate\" type=\"System.Nullable`" +
        "1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"InStockDate\" mappingColumnType=\"System.Nullabl" +
        "e`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"FiledFlag\" type=\"System.String\" isInherited=\"false\" sqlD" +
        "efaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"FiledFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SendChkFlag\" type=\"Sys" +
        "tem.String\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"SendChkFlag\" mappingColumnType=\"" +
        "System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"StockInFlag\" type=\"System.String\" isInherited=\"false\" sqlDefault" +
        "Value=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"StockInFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.S" +
        "tring\" isInherited=\"false\" sqlDefaultValue=\"\'0\'\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System" +
        ".String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"" +
        "System.String\" sqlType=\"nvarchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"IsFirstRecive\" type=\"System.String\" isInherited=\"false\" sq" +
        "lDefaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"IsFirstRecive\" mappingColumnType=\"System.String\" sqlType=\"char(1)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigurati" +
        "on>")]
    public partial class PpmRubberChk : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PpmRubberChkEntityConfiguration;
        
        protected string _BillNo;
        
        protected string _NoticeNo;
        
        protected global::System.Int32? _FactoryID;
        
        protected string _MakerPerson;
        
        protected global::System.DateTime? _InStockDate;
        
        protected string _FiledFlag;
        
        protected string _SendChkFlag;
        
        protected string _StockInFlag;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        protected string _IsFirstRecive;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PpmRubberChk left, global::Mesnac.Entity.PpmRubberChk right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PpmRubberChk left, global::Mesnac.Entity.PpmRubberChk right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string BillNo {
            get {
                return this._BillNo;
            }
            set {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }
        
        public string NoticeNo {
            get {
                return this._NoticeNo;
            }
            set {
                this.OnPropertyChanged("NoticeNo", this._NoticeNo, value);
                this._NoticeNo = value;
            }
        }
        
        public global::System.Int32? FactoryID {
            get {
                return this._FactoryID;
            }
            set {
                this.OnPropertyChanged("FactoryID", this._FactoryID, value);
                this._FactoryID = value;
            }
        }
        
        public string MakerPerson {
            get {
                return this._MakerPerson;
            }
            set {
                this.OnPropertyChanged("MakerPerson", this._MakerPerson, value);
                this._MakerPerson = value;
            }
        }
        
        public global::System.DateTime? InStockDate {
            get {
                return this._InStockDate;
            }
            set {
                this.OnPropertyChanged("InStockDate", this._InStockDate, value);
                this._InStockDate = value;
            }
        }
        
        public string FiledFlag {
            get {
                return this._FiledFlag;
            }
            set {
                this.OnPropertyChanged("FiledFlag", this._FiledFlag, value);
                this._FiledFlag = value;
            }
        }
        
        public string SendChkFlag {
            get {
                return this._SendChkFlag;
            }
            set {
                this.OnPropertyChanged("SendChkFlag", this._SendChkFlag, value);
                this._SendChkFlag = value;
            }
        }
        
        public string StockInFlag {
            get {
                return this._StockInFlag;
            }
            set {
                this.OnPropertyChanged("StockInFlag", this._StockInFlag, value);
                this._StockInFlag = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string IsFirstRecive {
            get {
                return this._IsFirstRecive;
            }
            set {
                this.OnPropertyChanged("IsFirstRecive", this._IsFirstRecive, value);
                this._IsFirstRecive = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PpmRubberChk._PpmRubberChkEntityConfiguration == null)) {
                PpmRubberChk._PpmRubberChkEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubberChk");
            }
            return PpmRubberChk._PpmRubberChkEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._BillNo,
                    this._NoticeNo,
                    this._FactoryID,
                    this._MakerPerson,
                    this._InStockDate,
                    this._FiledFlag,
                    this._SendChkFlag,
                    this._StockInFlag,
                    this._DeleteFlag,
                    this._Remark,
                    this._IsFirstRecive};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._BillNo = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._NoticeNo = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._FactoryID = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._MakerPerson = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._InStockDate = this.GetDateTime(reader, 4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._FiledFlag = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._SendChkFlag = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._StockInFlag = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._DeleteFlag = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Remark = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._IsFirstRecive = reader.GetString(10);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._BillNo = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._NoticeNo = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._FactoryID = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._MakerPerson = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._InStockDate = this.GetDateTime(row, 4);
            }
            if ((false == row.IsNull(5))) {
                this._FiledFlag = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._SendChkFlag = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._StockInFlag = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._DeleteFlag = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._Remark = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._IsFirstRecive = ((string)(row[10]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubberChk).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubberChk)(obj)).isAttached) 
                        && (this.BillNo == ((global::Mesnac.Entity.PpmRubberChk)(obj)).BillNo));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _NoticeNo = new NBear.Common.PropertyItem("NoticeNo", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _FactoryID = new NBear.Common.PropertyItem("FactoryID", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _MakerPerson = new NBear.Common.PropertyItem("MakerPerson", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _InStockDate = new NBear.Common.PropertyItem("InStockDate", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _FiledFlag = new NBear.Common.PropertyItem("FiledFlag", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _SendChkFlag = new NBear.Common.PropertyItem("SendChkFlag", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _StockInFlag = new NBear.Common.PropertyItem("StockInFlag", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PpmRubberChk");
            
            protected NBear.Common.PropertyItem _IsFirstRecive = new NBear.Common.PropertyItem("IsFirstRecive", "Mesnac.Entity.PpmRubberChk");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem BillNo {
                get {
                    if ((aliasName == null)) {
                        return _BillNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem NoticeNo {
                get {
                    if ((aliasName == null)) {
                        return _NoticeNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("NoticeNo", _NoticeNo.EntityConfiguration, _NoticeNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FactoryID {
                get {
                    if ((aliasName == null)) {
                        return _FactoryID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FactoryID", _FactoryID.EntityConfiguration, _FactoryID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MakerPerson {
                get {
                    if ((aliasName == null)) {
                        return _MakerPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MakerPerson", _MakerPerson.EntityConfiguration, _MakerPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InStockDate {
                get {
                    if ((aliasName == null)) {
                        return _InStockDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InStockDate", _InStockDate.EntityConfiguration, _InStockDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FiledFlag {
                get {
                    if ((aliasName == null)) {
                        return _FiledFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FiledFlag", _FiledFlag.EntityConfiguration, _FiledFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SendChkFlag {
                get {
                    if ((aliasName == null)) {
                        return _SendChkFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SendChkFlag", _SendChkFlag.EntityConfiguration, _SendChkFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StockInFlag {
                get {
                    if ((aliasName == null)) {
                        return _StockInFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StockInFlag", _StockInFlag.EntityConfiguration, _StockInFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsFirstRecive {
                get {
                    if ((aliasName == null)) {
                        return _IsFirstRecive;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsFirstRecive", _IsFirstRecive.EntityConfiguration, _IsFirstRecive.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
