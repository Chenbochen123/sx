//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class CltQmtCheckCtrlArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.CltQmtCheckCtrl> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.CltQmtCheckCtrl\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"CltQmtCheckCtrl\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"FID\" type=\"System.Int32\" isInherited=\"" +
        "false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "FID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"CheckCode\" type=\"System.String\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"CheckCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey" +
        "=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"PlanDate\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"PlanDate\" mappingColumnType=\"System.String\" sqlType=\"varchar(10)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftID\" type=\"Sy" +
        "stem.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"ShiftID\" mappingColumnType=\"System." +
        "Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"WorkShopCode\" type=\"System.Nullable`1[System.Int32]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"WorkShopCode\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlT" +
        "ype=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCo" +
        "de\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"MaterCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MaterCode\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"RubCode\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RubCode\" ma" +
        "ppingColumnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"RubType\" type=\"System.String\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"RubType\" mappingColumnType=\"System.String\" sqlType=\"varchar(2)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"MaterType\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"MaterType\" mappingColumnType=\"System.String\" sqlType=\"varchar(10)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"UserID\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"UserID\" mappingColumnType=\"System.String\" sqlType=\"va" +
        "rchar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"TotalC" +
        "ount\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"TotalCount\" mappingCo" +
        "lumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"HGCount\" type=\"System.Nullable`1[System." +
        "Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"HGCount\" mappingColumnType=\"System.Nullable`1[System.Int32" +
        "]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "NOHGCount\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"NOHGCount\" mappi" +
        "ngColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"OtherCount\" type=\"System.Nullable`1[" +
        "System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"OtherCount\" mappingColumnType=\"System.Nullable`1[Sy" +
        "stem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"ZCNHGCount\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ZCNHG" +
        "Count\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class CltQmtCheckCtrl : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _CltQmtCheckCtrlEntityConfiguration;
        
        protected int _FID;
        
        protected string _CheckCode;
        
        protected string _PlanDate;
        
        protected global::System.Int32? _ShiftID;
        
        protected global::System.Int32? _WorkShopCode;
        
        protected string _EquipCode;
        
        protected string _MaterCode;
        
        protected string _RubCode;
        
        protected string _RubType;
        
        protected string _MaterType;
        
        protected string _UserID;
        
        protected global::System.Int32? _TotalCount;
        
        protected global::System.Int32? _HGCount;
        
        protected global::System.Int32? _NOHGCount;
        
        protected global::System.Int32? _OtherCount;
        
        protected global::System.Int32? _ZCNHGCount;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.CltQmtCheckCtrl left, global::Mesnac.Entity.CltQmtCheckCtrl right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.CltQmtCheckCtrl left, global::Mesnac.Entity.CltQmtCheckCtrl right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int FID {
            get {
                return this._FID;
            }
            set {
                this.OnPropertyChanged("FID", this._FID, value);
                this._FID = value;
            }
        }
        
        public string CheckCode {
            get {
                return this._CheckCode;
            }
            set {
                this.OnPropertyChanged("CheckCode", this._CheckCode, value);
                this._CheckCode = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public global::System.Int32? ShiftID {
            get {
                return this._ShiftID;
            }
            set {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }
        
        public global::System.Int32? WorkShopCode {
            get {
                return this._WorkShopCode;
            }
            set {
                this.OnPropertyChanged("WorkShopCode", this._WorkShopCode, value);
                this._WorkShopCode = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string MaterCode {
            get {
                return this._MaterCode;
            }
            set {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }
        
        public string RubCode {
            get {
                return this._RubCode;
            }
            set {
                this.OnPropertyChanged("RubCode", this._RubCode, value);
                this._RubCode = value;
            }
        }
        
        public string RubType {
            get {
                return this._RubType;
            }
            set {
                this.OnPropertyChanged("RubType", this._RubType, value);
                this._RubType = value;
            }
        }
        
        public string MaterType {
            get {
                return this._MaterType;
            }
            set {
                this.OnPropertyChanged("MaterType", this._MaterType, value);
                this._MaterType = value;
            }
        }
        
        public string UserID {
            get {
                return this._UserID;
            }
            set {
                this.OnPropertyChanged("UserID", this._UserID, value);
                this._UserID = value;
            }
        }
        
        public global::System.Int32? TotalCount {
            get {
                return this._TotalCount;
            }
            set {
                this.OnPropertyChanged("TotalCount", this._TotalCount, value);
                this._TotalCount = value;
            }
        }
        
        public global::System.Int32? HGCount {
            get {
                return this._HGCount;
            }
            set {
                this.OnPropertyChanged("HGCount", this._HGCount, value);
                this._HGCount = value;
            }
        }
        
        public global::System.Int32? NOHGCount {
            get {
                return this._NOHGCount;
            }
            set {
                this.OnPropertyChanged("NOHGCount", this._NOHGCount, value);
                this._NOHGCount = value;
            }
        }
        
        public global::System.Int32? OtherCount {
            get {
                return this._OtherCount;
            }
            set {
                this.OnPropertyChanged("OtherCount", this._OtherCount, value);
                this._OtherCount = value;
            }
        }
        
        public global::System.Int32? ZCNHGCount {
            get {
                return this._ZCNHGCount;
            }
            set {
                this.OnPropertyChanged("ZCNHGCount", this._ZCNHGCount, value);
                this._ZCNHGCount = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((CltQmtCheckCtrl._CltQmtCheckCtrlEntityConfiguration == null)) {
                CltQmtCheckCtrl._CltQmtCheckCtrlEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.CltQmtCheckCtrl");
            }
            return CltQmtCheckCtrl._CltQmtCheckCtrlEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._FID,
                    this._CheckCode,
                    this._PlanDate,
                    this._ShiftID,
                    this._WorkShopCode,
                    this._EquipCode,
                    this._MaterCode,
                    this._RubCode,
                    this._RubType,
                    this._MaterType,
                    this._UserID,
                    this._TotalCount,
                    this._HGCount,
                    this._NOHGCount,
                    this._OtherCount,
                    this._ZCNHGCount};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._FID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._CheckCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._PlanDate = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ShiftID = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._WorkShopCode = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._EquipCode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MaterCode = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._RubCode = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._RubType = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MaterType = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._UserID = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._TotalCount = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._HGCount = reader.GetInt32(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._NOHGCount = reader.GetInt32(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._OtherCount = reader.GetInt32(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._ZCNHGCount = reader.GetInt32(15);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._FID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._CheckCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._PlanDate = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ShiftID = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._WorkShopCode = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._EquipCode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MaterCode = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._RubCode = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._RubType = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MaterType = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._UserID = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._TotalCount = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._HGCount = ((System.Nullable<int>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._NOHGCount = ((System.Nullable<int>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._OtherCount = ((System.Nullable<int>)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._ZCNHGCount = ((System.Nullable<int>)(row[15]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.CltQmtCheckCtrl).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.CltQmtCheckCtrl)(obj)).isAttached) 
                        && (this.CheckCode == ((global::Mesnac.Entity.CltQmtCheckCtrl)(obj)).CheckCode));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _FID = new NBear.Common.PropertyItem("FID", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _CheckCode = new NBear.Common.PropertyItem("CheckCode", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _WorkShopCode = new NBear.Common.PropertyItem("WorkShopCode", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _RubCode = new NBear.Common.PropertyItem("RubCode", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _RubType = new NBear.Common.PropertyItem("RubType", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _MaterType = new NBear.Common.PropertyItem("MaterType", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _UserID = new NBear.Common.PropertyItem("UserID", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _TotalCount = new NBear.Common.PropertyItem("TotalCount", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _HGCount = new NBear.Common.PropertyItem("HGCount", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _NOHGCount = new NBear.Common.PropertyItem("NOHGCount", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _OtherCount = new NBear.Common.PropertyItem("OtherCount", "Mesnac.Entity.CltQmtCheckCtrl");
            
            protected NBear.Common.PropertyItem _ZCNHGCount = new NBear.Common.PropertyItem("ZCNHGCount", "Mesnac.Entity.CltQmtCheckCtrl");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem FID {
                get {
                    if ((aliasName == null)) {
                        return _FID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FID", _FID.EntityConfiguration, _FID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckCode", _CheckCode.EntityConfiguration, _CheckCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkShopCode {
                get {
                    if ((aliasName == null)) {
                        return _WorkShopCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkShopCode", _WorkShopCode.EntityConfiguration, _WorkShopCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubCode {
                get {
                    if ((aliasName == null)) {
                        return _RubCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubCode", _RubCode.EntityConfiguration, _RubCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubType {
                get {
                    if ((aliasName == null)) {
                        return _RubType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubType", _RubType.EntityConfiguration, _RubType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterType {
                get {
                    if ((aliasName == null)) {
                        return _MaterType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterType", _MaterType.EntityConfiguration, _MaterType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UserID {
                get {
                    if ((aliasName == null)) {
                        return _UserID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UserID", _UserID.EntityConfiguration, _UserID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TotalCount {
                get {
                    if ((aliasName == null)) {
                        return _TotalCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TotalCount", _TotalCount.EntityConfiguration, _TotalCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HGCount {
                get {
                    if ((aliasName == null)) {
                        return _HGCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HGCount", _HGCount.EntityConfiguration, _HGCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem NOHGCount {
                get {
                    if ((aliasName == null)) {
                        return _NOHGCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("NOHGCount", _NOHGCount.EntityConfiguration, _NOHGCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OtherCount {
                get {
                    if ((aliasName == null)) {
                        return _OtherCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OtherCount", _OtherCount.EntityConfiguration, _OtherCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ZCNHGCount {
                get {
                    if ((aliasName == null)) {
                        return _ZCNHGCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ZCNHGCount", _ZCNHGCount.EntityConfiguration, _ZCNHGCount.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
