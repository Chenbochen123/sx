//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class QmcSpecArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcSpec>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
    "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
    "name=\"Mesnac.Entity.QmcSpec\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUpd" +
    "ate=\"false\" isRelation=\"false\" mappingName=\"QmcSpec\" batchSize=\"10\">\r\n  <Propert" +
    "ies>\r\n    <Property name=\"SpecId\" type=\"System.Int32\" isInherited=\"false\" isRead" +
    "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
    "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
    "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SpecId\" mapp" +
    "ingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" " +
    "/>\r\n    <Property name=\"SeriesId\" type=\"System.Int32\" isInherited=\"false\" isRead" +
    "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
    "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
    "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SeriesId\" ma" +
    "ppingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fal" +
    "se\" />\r\n    <Property name=\"SpecName\" type=\"System.String\" isInherited=\"false\" i" +
    "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
    "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
    "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SpecNam" +
    "e\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\"" +
    " isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInheri" +
    "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
    "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
    "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
    "Name=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimary" +
    "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.S" +
    "tring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
    "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
    "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
    "\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char" +
    "(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigu" +
    "ration>")]
    public partial class QmcSpec : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _QmcSpecEntityConfiguration;

        protected int _SpecId;

        protected int _SeriesId;

        protected string _SpecName;

        protected string _Remark;

        protected string _DeleteFlag;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.QmcSpec left, global::Mesnac.Entity.QmcSpec right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.QmcSpec left, global::Mesnac.Entity.QmcSpec right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public int SpecId
        {
            get
            {
                return this._SpecId;
            }
            set
            {
                this.OnPropertyChanged("SpecId", this._SpecId, value);
                this._SpecId = value;
            }
        }

        public int SeriesId
        {
            get
            {
                return this._SeriesId;
            }
            set
            {
                this.OnPropertyChanged("SeriesId", this._SeriesId, value);
                this._SeriesId = value;
            }
        }

        public string SpecName
        {
            get
            {
                return this._SpecName;
            }
            set
            {
                this.OnPropertyChanged("SpecName", this._SpecName, value);
                this._SpecName = value;
            }
        }

        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }

        public string DeleteFlag
        {
            get
            {
                return this._DeleteFlag;
            }
            set
            {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((QmcSpec._QmcSpecEntityConfiguration == null))
            {
                QmcSpec._QmcSpecEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcSpec");
            }
            return QmcSpec._QmcSpecEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                        this._SpecId,
                        this._SeriesId,
                        this._SpecName,
                        this._Remark,
                        this._DeleteFlag};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._SpecId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._SeriesId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._SpecName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._Remark = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._DeleteFlag = reader.GetString(4);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._SpecId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._SeriesId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2)))
            {
                this._SpecName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._Remark = ((string)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._DeleteFlag = ((string)(row[4]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcSpec).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcSpec)(obj)).isAttached)
                        && (this.SpecId == ((global::Mesnac.Entity.QmcSpec)(obj)).SpecId));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _SpecId = new NBear.Common.PropertyItem("SpecId", "Mesnac.Entity.QmcSpec");

            protected NBear.Common.PropertyItem _SeriesId = new NBear.Common.PropertyItem("SeriesId", "Mesnac.Entity.QmcSpec");

            protected NBear.Common.PropertyItem _SpecName = new NBear.Common.PropertyItem("SpecName", "Mesnac.Entity.QmcSpec");

            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcSpec");

            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcSpec");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem SpecId
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _SpecId;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("SpecId", _SpecId.EntityConfiguration, _SpecId.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem SeriesId
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _SeriesId;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("SeriesId", _SeriesId.EntityConfiguration, _SeriesId.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem SpecName
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _SpecName;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("SpecName", _SpecName.EntityConfiguration, _SpecName.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Remark
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Remark;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem DeleteFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _DeleteFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
