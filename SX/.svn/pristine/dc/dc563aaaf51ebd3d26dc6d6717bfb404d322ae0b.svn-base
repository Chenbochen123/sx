//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PmtConfigArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PmtConfig> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PmtConfig\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchU" +
        "pdate=\"false\" isRelation=\"false\" mappingName=\"PmtConfig\" batchSize=\"10\">\r\n  <Pro" +
        "perties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=\"false\" isR" +
        "eadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ObjID\" map" +
        "pingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\"" +
        " />\r\n    <Property name=\"TypeCode\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"TypeCode\" " +
        "mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"ItemCode\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"ItemCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ItemName\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ItemName\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ItemInf" +
        "o\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"ItemInfo\" mappingColumnType=\"System.String" +
        "\" sqlType=\"nvarchar(4000)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"" +
        "System.String\" sqlType=\"nvarchar(500)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"RecordTime\" type=\"System.Nullable`1[System.DateTime]\" isIn" +
        "herited=\"false\" sqlDefaultValue=\"getdate()\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"RecordTime\" mappingColumnType=\"System.Null" +
        "able`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"SeqIdx\" type=\"System.Nullable`1[System.Int32]\" isInhe" +
        "rited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"SeqIdx\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" typ" +
        "e=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"\'0\'\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PmtConfig : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PmtConfigEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _TypeCode;
        
        protected string _ItemCode;
        
        protected string _ItemName;
        
        protected string _ItemInfo;
        
        protected string _Remark;
        
        protected global::System.DateTime? _RecordTime;
        
        protected global::System.Int32? _SeqIdx;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PmtConfig left, global::Mesnac.Entity.PmtConfig right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PmtConfig left, global::Mesnac.Entity.PmtConfig right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string TypeCode {
            get {
                return this._TypeCode;
            }
            set {
                this.OnPropertyChanged("TypeCode", this._TypeCode, value);
                this._TypeCode = value;
            }
        }
        
        public string ItemCode {
            get {
                return this._ItemCode;
            }
            set {
                this.OnPropertyChanged("ItemCode", this._ItemCode, value);
                this._ItemCode = value;
            }
        }
        
        public string ItemName {
            get {
                return this._ItemName;
            }
            set {
                this.OnPropertyChanged("ItemName", this._ItemName, value);
                this._ItemName = value;
            }
        }
        
        public string ItemInfo {
            get {
                return this._ItemInfo;
            }
            set {
                this.OnPropertyChanged("ItemInfo", this._ItemInfo, value);
                this._ItemInfo = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public global::System.DateTime? RecordTime {
            get {
                return this._RecordTime;
            }
            set {
                this.OnPropertyChanged("RecordTime", this._RecordTime, value);
                this._RecordTime = value;
            }
        }
        
        public global::System.Int32? SeqIdx {
            get {
                return this._SeqIdx;
            }
            set {
                this.OnPropertyChanged("SeqIdx", this._SeqIdx, value);
                this._SeqIdx = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PmtConfig._PmtConfigEntityConfiguration == null)) {
                PmtConfig._PmtConfigEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PmtConfig");
            }
            return PmtConfig._PmtConfigEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._TypeCode,
                    this._ItemCode,
                    this._ItemName,
                    this._ItemInfo,
                    this._Remark,
                    this._RecordTime,
                    this._SeqIdx,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._TypeCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._ItemCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ItemName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ItemInfo = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Remark = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._RecordTime = this.GetDateTime(reader, 6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._SeqIdx = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._DeleteFlag = reader.GetString(8);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._TypeCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._ItemCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ItemName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ItemInfo = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Remark = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._RecordTime = this.GetDateTime(row, 6);
            }
            if ((false == row.IsNull(7))) {
                this._SeqIdx = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._DeleteFlag = ((string)(row[8]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PmtConfig).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PmtConfig)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PmtConfig)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _TypeCode = new NBear.Common.PropertyItem("TypeCode", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _ItemCode = new NBear.Common.PropertyItem("ItemCode", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _ItemName = new NBear.Common.PropertyItem("ItemName", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _ItemInfo = new NBear.Common.PropertyItem("ItemInfo", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _RecordTime = new NBear.Common.PropertyItem("RecordTime", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _SeqIdx = new NBear.Common.PropertyItem("SeqIdx", "Mesnac.Entity.PmtConfig");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PmtConfig");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TypeCode {
                get {
                    if ((aliasName == null)) {
                        return _TypeCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TypeCode", _TypeCode.EntityConfiguration, _TypeCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemCode {
                get {
                    if ((aliasName == null)) {
                        return _ItemCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemCode", _ItemCode.EntityConfiguration, _ItemCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemName {
                get {
                    if ((aliasName == null)) {
                        return _ItemName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemName", _ItemName.EntityConfiguration, _ItemName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemInfo {
                get {
                    if ((aliasName == null)) {
                        return _ItemInfo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemInfo", _ItemInfo.EntityConfiguration, _ItemInfo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordTime {
                get {
                    if ((aliasName == null)) {
                        return _RecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordTime", _RecordTime.EntityConfiguration, _RecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SeqIdx {
                get {
                    if ((aliasName == null)) {
                        return _SeqIdx;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SeqIdx", _SeqIdx.EntityConfiguration, _SeqIdx.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
