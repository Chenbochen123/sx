//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PstMaterialAdjustingArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PstMaterialAdjusting>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PstMaterialAdjusting\" isReadOnly=\"false\" isAutoPreLoad=\"fals" +
        "e\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PstMaterialAdjusting\" b" +
        "atchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"BillNo\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"BillNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" " +
        "isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"InventoryNo\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"InventoryNo\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"StorageID\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"StorageID\" mappingColumnType=\"Sy" +
        "stem.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"AdjustingDate\" type=\"System.Nullable`1[System.DateTime]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"AdjustingDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" " +
        "sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"InaccountDuration\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"InaccountDuration\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"nvarchar(6)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"MakerPerson\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"MakerPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkResultFlag\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"ChkResultFlag\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkPe" +
        "rson\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit" +
        "=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fal" +
        "se\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"ChkPerson\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"ChkDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"fals" +
        "e\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Chk" +
        "Date\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Rem" +
        "ark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.String" +
        "\" sqlType=\"nvarchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"IsFeedBack\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IsFeedBack\" mappingColum" +
        "nType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PstMaterialAdjusting : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PstMaterialAdjustingEntityConfiguration;

        protected string _BillNo;

        protected string _InventoryNo;

        protected string _StorageID;

        protected global::System.DateTime? _AdjustingDate;

        protected string _InaccountDuration;

        protected string _MakerPerson;

        protected string _ChkResultFlag;

        protected string _ChkPerson;

        protected global::System.DateTime? _ChkDate;

        protected string _DeleteFlag;

        protected string _Remark;

        protected string _IsFeedBack;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PstMaterialAdjusting left, global::Mesnac.Entity.PstMaterialAdjusting right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PstMaterialAdjusting left, global::Mesnac.Entity.PstMaterialAdjusting right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public string BillNo
        {
            get
            {
                return this._BillNo;
            }
            set
            {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }

        public string InventoryNo
        {
            get
            {
                return this._InventoryNo;
            }
            set
            {
                this.OnPropertyChanged("InventoryNo", this._InventoryNo, value);
                this._InventoryNo = value;
            }
        }

        public string StorageID
        {
            get
            {
                return this._StorageID;
            }
            set
            {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }

        public global::System.DateTime? AdjustingDate
        {
            get
            {
                return this._AdjustingDate;
            }
            set
            {
                this.OnPropertyChanged("AdjustingDate", this._AdjustingDate, value);
                this._AdjustingDate = value;
            }
        }

        public string InaccountDuration
        {
            get
            {
                return this._InaccountDuration;
            }
            set
            {
                this.OnPropertyChanged("InaccountDuration", this._InaccountDuration, value);
                this._InaccountDuration = value;
            }
        }

        public string MakerPerson
        {
            get
            {
                return this._MakerPerson;
            }
            set
            {
                this.OnPropertyChanged("MakerPerson", this._MakerPerson, value);
                this._MakerPerson = value;
            }
        }

        public string ChkResultFlag
        {
            get
            {
                return this._ChkResultFlag;
            }
            set
            {
                this.OnPropertyChanged("ChkResultFlag", this._ChkResultFlag, value);
                this._ChkResultFlag = value;
            }
        }

        public string ChkPerson
        {
            get
            {
                return this._ChkPerson;
            }
            set
            {
                this.OnPropertyChanged("ChkPerson", this._ChkPerson, value);
                this._ChkPerson = value;
            }
        }

        public global::System.DateTime? ChkDate
        {
            get
            {
                return this._ChkDate;
            }
            set
            {
                this.OnPropertyChanged("ChkDate", this._ChkDate, value);
                this._ChkDate = value;
            }
        }

        public string DeleteFlag
        {
            get
            {
                return this._DeleteFlag;
            }
            set
            {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }

        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }

        public string IsFeedBack
        {
            get
            {
                return this._IsFeedBack;
            }
            set
            {
                this.OnPropertyChanged("IsFeedBack", this._IsFeedBack, value);
                this._IsFeedBack = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PstMaterialAdjusting._PstMaterialAdjustingEntityConfiguration == null))
            {
                PstMaterialAdjusting._PstMaterialAdjustingEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PstMaterialAdjusting");
            }
            return PstMaterialAdjusting._PstMaterialAdjustingEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._BillNo,
                    this._InventoryNo,
                    this._StorageID,
                    this._AdjustingDate,
                    this._InaccountDuration,
                    this._MakerPerson,
                    this._ChkResultFlag,
                    this._ChkPerson,
                    this._ChkDate,
                    this._DeleteFlag,
                    this._Remark,
                    this._IsFeedBack};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._BillNo = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._InventoryNo = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._StorageID = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._AdjustingDate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._InaccountDuration = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._MakerPerson = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._ChkResultFlag = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._ChkPerson = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._ChkDate = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._DeleteFlag = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._Remark = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._IsFeedBack = reader.GetString(11);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._BillNo = ((string)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._InventoryNo = ((string)(row[1]));
            }
            if ((false == row.IsNull(2)))
            {
                this._StorageID = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._AdjustingDate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4)))
            {
                this._InaccountDuration = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._MakerPerson = ((string)(row[5]));
            }
            if ((false == row.IsNull(6)))
            {
                this._ChkResultFlag = ((string)(row[6]));
            }
            if ((false == row.IsNull(7)))
            {
                this._ChkPerson = ((string)(row[7]));
            }
            if ((false == row.IsNull(8)))
            {
                this._ChkDate = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9)))
            {
                this._DeleteFlag = ((string)(row[9]));
            }
            if ((false == row.IsNull(10)))
            {
                this._Remark = ((string)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._IsFeedBack = ((string)(row[11]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PstMaterialAdjusting).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PstMaterialAdjusting)(obj)).isAttached)
                        && (this.BillNo == ((global::Mesnac.Entity.PstMaterialAdjusting)(obj)).BillNo));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _InventoryNo = new NBear.Common.PropertyItem("InventoryNo", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _AdjustingDate = new NBear.Common.PropertyItem("AdjustingDate", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _InaccountDuration = new NBear.Common.PropertyItem("InaccountDuration", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _MakerPerson = new NBear.Common.PropertyItem("MakerPerson", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _ChkResultFlag = new NBear.Common.PropertyItem("ChkResultFlag", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _ChkPerson = new NBear.Common.PropertyItem("ChkPerson", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _ChkDate = new NBear.Common.PropertyItem("ChkDate", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PstMaterialAdjusting");

            protected NBear.Common.PropertyItem _IsFeedBack = new NBear.Common.PropertyItem("IsFeedBack", "Mesnac.Entity.PstMaterialAdjusting");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem BillNo
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _BillNo;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InventoryNo
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InventoryNo;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InventoryNo", _InventoryNo.EntityConfiguration, _InventoryNo.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem StorageID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _StorageID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem AdjustingDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _AdjustingDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("AdjustingDate", _AdjustingDate.EntityConfiguration, _AdjustingDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InaccountDuration
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InaccountDuration;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InaccountDuration", _InaccountDuration.EntityConfiguration, _InaccountDuration.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem MakerPerson
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _MakerPerson;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("MakerPerson", _MakerPerson.EntityConfiguration, _MakerPerson.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkResultFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkResultFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkResultFlag", _ChkResultFlag.EntityConfiguration, _ChkResultFlag.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkPerson
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkPerson;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkPerson", _ChkPerson.EntityConfiguration, _ChkPerson.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkDate", _ChkDate.EntityConfiguration, _ChkDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem DeleteFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _DeleteFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Remark
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Remark;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem IsFeedBack
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _IsFeedBack;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("IsFeedBack", _IsFeedBack.EntityConfiguration, _IsFeedBack.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
