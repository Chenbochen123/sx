//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Ppt_balanceCheckArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Ppt_balanceCheck> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Ppt_balanceCheck\" isReadOnly=\"false\" isAutoPreLoad=\"false\" i" +
        "sBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Ppt_balanceCheck\" batchSize" +
        "=\"10\">\r\n  <Properties>\r\n    <Property name=\"Serialid\" type=\"System.Int32\" isInhe" +
        "rited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"Serialid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tr" +
        "ue\" isNotNull=\"true\" />\r\n    <Property name=\"Equip_Code\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"Equip_Code\" mappingColumnType=\"System.String\" sqlType=\"varchar(50)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Plan_Date\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"Plan_Date\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Shif" +
        "t\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Shift\" mappingColumnType" +
        "=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"Set_weight\" type=\"System.Nullable`1[System.Decim" +
        "al]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"Set_weight\" mappingColumnType=\"System.Nullable`1[System.Decim" +
        "al]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"Real_weight\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" " +
        "isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" is" +
        "FriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fals" +
        "e\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Real_w" +
        "eight\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Error_allow\" type=" +
        "\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCom" +
        "poundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazy" +
        "Load=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"" +
        "false\" isSerializationIgnore=\"false\" mappingName=\"Error_allow\" mappingColumnType" +
        "=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"Scale_no\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"Scale_no\" mappingColumnType=\"System.String\" sqlType=\"varchar(50)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Scale_name\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"Scale_name\" mappingColumnType=\"System.String\" sqlType=\"varcha" +
        "r(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Usercode\" " +
        "type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"Usercode\" mappingColumnType=\"System.String\" s" +
        "qlType=\"varchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"Up_flag\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefau" +
        "ltValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"Up_flag\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"OperTime\" type" +
        "=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" sqlDefaultValue=\"getda" +
        "te()\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "OperTime\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"dateti" +
        "me\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigur" +
        "ation>")]
    public partial class Ppt_balanceCheck : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Ppt_balanceCheckEntityConfiguration;
        
        protected int _Serialid;
        
        protected string _Equip_Code;
        
        protected string _Plan_Date;
        
        protected global::System.Int32? _Shift;
        
        protected global::System.Decimal? _Set_weight;
        
        protected global::System.Decimal? _Real_weight;
        
        protected global::System.Decimal? _Error_allow;
        
        protected string _Scale_no;
        
        protected string _Scale_name;
        
        protected string _Usercode;
        
        protected global::System.Int32? _Up_flag;
        
        protected global::System.DateTime? _OperTime;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Ppt_balanceCheck left, global::Mesnac.Entity.Ppt_balanceCheck right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Ppt_balanceCheck left, global::Mesnac.Entity.Ppt_balanceCheck right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public string Equip_Code {
            get {
                return this._Equip_Code;
            }
            set {
                this.OnPropertyChanged("Equip_Code", this._Equip_Code, value);
                this._Equip_Code = value;
            }
        }
        
        public string Plan_Date {
            get {
                return this._Plan_Date;
            }
            set {
                this.OnPropertyChanged("Plan_Date", this._Plan_Date, value);
                this._Plan_Date = value;
            }
        }
        
        public global::System.Int32? Shift {
            get {
                return this._Shift;
            }
            set {
                this.OnPropertyChanged("Shift", this._Shift, value);
                this._Shift = value;
            }
        }
        
        public global::System.Decimal? Set_weight {
            get {
                return this._Set_weight;
            }
            set {
                this.OnPropertyChanged("Set_weight", this._Set_weight, value);
                this._Set_weight = value;
            }
        }
        
        public global::System.Decimal? Real_weight {
            get {
                return this._Real_weight;
            }
            set {
                this.OnPropertyChanged("Real_weight", this._Real_weight, value);
                this._Real_weight = value;
            }
        }
        
        public global::System.Decimal? Error_allow {
            get {
                return this._Error_allow;
            }
            set {
                this.OnPropertyChanged("Error_allow", this._Error_allow, value);
                this._Error_allow = value;
            }
        }
        
        public string Scale_no {
            get {
                return this._Scale_no;
            }
            set {
                this.OnPropertyChanged("Scale_no", this._Scale_no, value);
                this._Scale_no = value;
            }
        }
        
        public string Scale_name {
            get {
                return this._Scale_name;
            }
            set {
                this.OnPropertyChanged("Scale_name", this._Scale_name, value);
                this._Scale_name = value;
            }
        }
        
        public string Usercode {
            get {
                return this._Usercode;
            }
            set {
                this.OnPropertyChanged("Usercode", this._Usercode, value);
                this._Usercode = value;
            }
        }
        
        public global::System.Int32? Up_flag {
            get {
                return this._Up_flag;
            }
            set {
                this.OnPropertyChanged("Up_flag", this._Up_flag, value);
                this._Up_flag = value;
            }
        }
        
        public global::System.DateTime? OperTime {
            get {
                return this._OperTime;
            }
            set {
                this.OnPropertyChanged("OperTime", this._OperTime, value);
                this._OperTime = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Ppt_balanceCheck._Ppt_balanceCheckEntityConfiguration == null)) {
                Ppt_balanceCheck._Ppt_balanceCheckEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Ppt_balanceCheck");
            }
            return Ppt_balanceCheck._Ppt_balanceCheckEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Serialid,
                    this._Equip_Code,
                    this._Plan_Date,
                    this._Shift,
                    this._Set_weight,
                    this._Real_weight,
                    this._Error_allow,
                    this._Scale_no,
                    this._Scale_name,
                    this._Usercode,
                    this._Up_flag,
                    this._OperTime};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Serialid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Equip_Code = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Plan_Date = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Shift = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Set_weight = reader.GetDecimal(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Real_weight = reader.GetDecimal(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Error_allow = reader.GetDecimal(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Scale_no = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._Scale_name = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Usercode = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Up_flag = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._OperTime = this.GetDateTime(reader, 11);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Serialid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Equip_Code = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Plan_Date = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Shift = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._Set_weight = ((System.Nullable<decimal>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Real_weight = ((System.Nullable<decimal>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Error_allow = ((System.Nullable<decimal>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Scale_no = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._Scale_name = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._Usercode = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._Up_flag = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._OperTime = this.GetDateTime(row, 11);
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Ppt_balanceCheck).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Ppt_balanceCheck)(obj)).isAttached) 
                        && (this.Serialid == ((global::Mesnac.Entity.Ppt_balanceCheck)(obj)).Serialid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Equip_Code = new NBear.Common.PropertyItem("Equip_Code", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Plan_Date = new NBear.Common.PropertyItem("Plan_Date", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Shift = new NBear.Common.PropertyItem("Shift", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Set_weight = new NBear.Common.PropertyItem("Set_weight", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Real_weight = new NBear.Common.PropertyItem("Real_weight", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Error_allow = new NBear.Common.PropertyItem("Error_allow", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Scale_no = new NBear.Common.PropertyItem("Scale_no", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Scale_name = new NBear.Common.PropertyItem("Scale_name", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Usercode = new NBear.Common.PropertyItem("Usercode", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _Up_flag = new NBear.Common.PropertyItem("Up_flag", "Mesnac.Entity.Ppt_balanceCheck");
            
            protected NBear.Common.PropertyItem _OperTime = new NBear.Common.PropertyItem("OperTime", "Mesnac.Entity.Ppt_balanceCheck");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Equip_Code {
                get {
                    if ((aliasName == null)) {
                        return _Equip_Code;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Equip_Code", _Equip_Code.EntityConfiguration, _Equip_Code.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Plan_Date {
                get {
                    if ((aliasName == null)) {
                        return _Plan_Date;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plan_Date", _Plan_Date.EntityConfiguration, _Plan_Date.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Shift {
                get {
                    if ((aliasName == null)) {
                        return _Shift;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Shift", _Shift.EntityConfiguration, _Shift.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Set_weight {
                get {
                    if ((aliasName == null)) {
                        return _Set_weight;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Set_weight", _Set_weight.EntityConfiguration, _Set_weight.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Real_weight {
                get {
                    if ((aliasName == null)) {
                        return _Real_weight;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Real_weight", _Real_weight.EntityConfiguration, _Real_weight.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Error_allow {
                get {
                    if ((aliasName == null)) {
                        return _Error_allow;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Error_allow", _Error_allow.EntityConfiguration, _Error_allow.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Scale_no {
                get {
                    if ((aliasName == null)) {
                        return _Scale_no;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Scale_no", _Scale_no.EntityConfiguration, _Scale_no.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Scale_name {
                get {
                    if ((aliasName == null)) {
                        return _Scale_name;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Scale_name", _Scale_name.EntityConfiguration, _Scale_name.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Usercode {
                get {
                    if ((aliasName == null)) {
                        return _Usercode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Usercode", _Usercode.EntityConfiguration, _Usercode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Up_flag {
                get {
                    if ((aliasName == null)) {
                        return _Up_flag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Up_flag", _Up_flag.EntityConfiguration, _Up_flag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OperTime {
                get {
                    if ((aliasName == null)) {
                        return _OperTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OperTime", _OperTime.EntityConfiguration, _OperTime.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
