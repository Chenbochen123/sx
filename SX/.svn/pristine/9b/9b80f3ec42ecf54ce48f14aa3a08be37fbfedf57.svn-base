//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmtCheckDetailArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmtCheckDetail> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmtCheckDetail\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmtCheckDetail\" batchSize=\"10" +
        "\">\r\n  <Properties>\r\n    <Property name=\"CheckCode\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"CheckCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(13)\" isPrima" +
        "ryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"SerialId\" type=\"System.Int" +
        "32\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"SerialId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPri" +
        "maryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"IfCheckNum\" type=\"System" +
        ".Int16\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"IfCheckNum\" mappingColumnType=\"System.Int16\" sqlType=\"smal" +
        "lint\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"ItemCd\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"ItemCd\" mappingColumnType=\"System.String\" sqlType=" +
        "\"char(3)\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"ItemClass" +
        "\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"ItemClass\" mappingColumnType=\"System.String" +
        "\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"IfLast\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IfLast\" mappingC" +
        "olumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"ItemCheck\" type=\"System.Nullable`1[Syst" +
        "em.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"ItemCheck\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pr" +
        "operty name=\"IfUp\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IfUp\" ma" +
        "ppingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"IfDown\" type=\"System.Nullable`1[S" +
        "ystem.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"IfDown\" mappingColumnType=\"System.Nullable`1[System." +
        "Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"JudgeResult\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"JudgeResult\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"DealCode\" type=\"System.Nullable`1[System.Int32]\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"DealCode\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Grade\" type=\"Syst" +
        "em.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"Grade\" mappingColumnType=\"System.Null" +
        "able`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"CardMark\" type=\"System.Byte[]\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CardMark\" mappin" +
        "gColumnType=\"System.Byte[]\" sqlType=\"image\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"DrawMark\" type=\"System.String\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DrawMark" +
        "\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"CheckEquipCode\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"CheckEquipCode\" mappingColumnType=\"System.String\" sqlType=\"char(5)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IfUsed\" type=\"Sy" +
        "stem.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"IfUsed\" mappingColumnType=\"System.N" +
        "ullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"Handler\" type=\"System.String\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Handler\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"char(20)\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"HandleDate\" type=\"System.String\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ha" +
        "ndleDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"JudgeMemo\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"JudgeMemo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CheckDate\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"CheckDate\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Che" +
        "ckTime\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"CheckTime\" mappingColumnType=\"System." +
        "String\" sqlType=\"char(8)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"CardMark2\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CardMark2\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"SelSign\" type=\"System.Nullable`1[System.Int32]\" isInhe" +
        "rited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"SelSign\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StandId\" type=" +
        "\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"StandId\" mappingColumnType=\"Syst" +
        "em.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"LLSerialID\" type=\"System.Int32\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"LLSerial" +
        "ID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull" +
        "=\"true\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class QmtCheckDetail : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmtCheckDetailEntityConfiguration;
        
        protected string _CheckCode;
        
        protected int _SerialId;
        
        protected short _IfCheckNum;
        
        protected string _ItemCd;
        
        protected string _ItemClass;
        
        protected global::System.Int32? _IfLast;
        
        protected global::System.Decimal? _ItemCheck;
        
        protected global::System.Int32? _IfUp;
        
        protected global::System.Int32? _IfDown;
        
        protected string _JudgeResult;
        
        protected global::System.Int32? _DealCode;
        
        protected global::System.Int32? _Grade;
        
        protected byte[] _CardMark;
        
        protected string _DrawMark;
        
        protected string _CheckEquipCode;
        
        protected global::System.Int32? _IfUsed;
        
        protected string _Handler;
        
        protected string _HandleDate;
        
        protected string _JudgeMemo;
        
        protected string _CheckDate;
        
        protected string _CheckTime;
        
        protected string _CardMark2;
        
        protected global::System.Int32? _SelSign;
        
        protected global::System.Int32? _StandId;
        
        protected int _LLSerialID;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmtCheckDetail left, global::Mesnac.Entity.QmtCheckDetail right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmtCheckDetail left, global::Mesnac.Entity.QmtCheckDetail right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string CheckCode {
            get {
                return this._CheckCode;
            }
            set {
                this.OnPropertyChanged("CheckCode", this._CheckCode, value);
                this._CheckCode = value;
            }
        }
        
        public int SerialId {
            get {
                return this._SerialId;
            }
            set {
                this.OnPropertyChanged("SerialId", this._SerialId, value);
                this._SerialId = value;
            }
        }
        
        public short IfCheckNum {
            get {
                return this._IfCheckNum;
            }
            set {
                this.OnPropertyChanged("IfCheckNum", this._IfCheckNum, value);
                this._IfCheckNum = value;
            }
        }
        
        public string ItemCd {
            get {
                return this._ItemCd;
            }
            set {
                this.OnPropertyChanged("ItemCd", this._ItemCd, value);
                this._ItemCd = value;
            }
        }
        
        public string ItemClass {
            get {
                return this._ItemClass;
            }
            set {
                this.OnPropertyChanged("ItemClass", this._ItemClass, value);
                this._ItemClass = value;
            }
        }
        
        public global::System.Int32? IfLast {
            get {
                return this._IfLast;
            }
            set {
                this.OnPropertyChanged("IfLast", this._IfLast, value);
                this._IfLast = value;
            }
        }
        
        public global::System.Decimal? ItemCheck {
            get {
                return this._ItemCheck;
            }
            set {
                this.OnPropertyChanged("ItemCheck", this._ItemCheck, value);
                this._ItemCheck = value;
            }
        }
        
        public global::System.Int32? IfUp {
            get {
                return this._IfUp;
            }
            set {
                this.OnPropertyChanged("IfUp", this._IfUp, value);
                this._IfUp = value;
            }
        }
        
        public global::System.Int32? IfDown {
            get {
                return this._IfDown;
            }
            set {
                this.OnPropertyChanged("IfDown", this._IfDown, value);
                this._IfDown = value;
            }
        }
        
        public string JudgeResult {
            get {
                return this._JudgeResult;
            }
            set {
                this.OnPropertyChanged("JudgeResult", this._JudgeResult, value);
                this._JudgeResult = value;
            }
        }
        
        public global::System.Int32? DealCode {
            get {
                return this._DealCode;
            }
            set {
                this.OnPropertyChanged("DealCode", this._DealCode, value);
                this._DealCode = value;
            }
        }
        
        public global::System.Int32? Grade {
            get {
                return this._Grade;
            }
            set {
                this.OnPropertyChanged("Grade", this._Grade, value);
                this._Grade = value;
            }
        }
        
        public byte[] CardMark {
            get {
                return this._CardMark;
            }
            set {
                this.OnPropertyChanged("CardMark", this._CardMark, value);
                this._CardMark = value;
            }
        }
        
        public string DrawMark {
            get {
                return this._DrawMark;
            }
            set {
                this.OnPropertyChanged("DrawMark", this._DrawMark, value);
                this._DrawMark = value;
            }
        }
        
        public string CheckEquipCode {
            get {
                return this._CheckEquipCode;
            }
            set {
                this.OnPropertyChanged("CheckEquipCode", this._CheckEquipCode, value);
                this._CheckEquipCode = value;
            }
        }
        
        public global::System.Int32? IfUsed {
            get {
                return this._IfUsed;
            }
            set {
                this.OnPropertyChanged("IfUsed", this._IfUsed, value);
                this._IfUsed = value;
            }
        }
        
        public string Handler {
            get {
                return this._Handler;
            }
            set {
                this.OnPropertyChanged("Handler", this._Handler, value);
                this._Handler = value;
            }
        }
        
        public string HandleDate {
            get {
                return this._HandleDate;
            }
            set {
                this.OnPropertyChanged("HandleDate", this._HandleDate, value);
                this._HandleDate = value;
            }
        }
        
        public string JudgeMemo {
            get {
                return this._JudgeMemo;
            }
            set {
                this.OnPropertyChanged("JudgeMemo", this._JudgeMemo, value);
                this._JudgeMemo = value;
            }
        }
        
        public string CheckDate {
            get {
                return this._CheckDate;
            }
            set {
                this.OnPropertyChanged("CheckDate", this._CheckDate, value);
                this._CheckDate = value;
            }
        }
        
        public string CheckTime {
            get {
                return this._CheckTime;
            }
            set {
                this.OnPropertyChanged("CheckTime", this._CheckTime, value);
                this._CheckTime = value;
            }
        }
        
        public string CardMark2 {
            get {
                return this._CardMark2;
            }
            set {
                this.OnPropertyChanged("CardMark2", this._CardMark2, value);
                this._CardMark2 = value;
            }
        }
        
        public global::System.Int32? SelSign {
            get {
                return this._SelSign;
            }
            set {
                this.OnPropertyChanged("SelSign", this._SelSign, value);
                this._SelSign = value;
            }
        }
        
        public global::System.Int32? StandId {
            get {
                return this._StandId;
            }
            set {
                this.OnPropertyChanged("StandId", this._StandId, value);
                this._StandId = value;
            }
        }
        
        public int LLSerialID {
            get {
                return this._LLSerialID;
            }
            set {
                this.OnPropertyChanged("LLSerialID", this._LLSerialID, value);
                this._LLSerialID = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmtCheckDetail._QmtCheckDetailEntityConfiguration == null)) {
                QmtCheckDetail._QmtCheckDetailEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmtCheckDetail");
            }
            return QmtCheckDetail._QmtCheckDetailEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._CheckCode,
                    this._SerialId,
                    this._IfCheckNum,
                    this._ItemCd,
                    this._ItemClass,
                    this._IfLast,
                    this._ItemCheck,
                    this._IfUp,
                    this._IfDown,
                    this._JudgeResult,
                    this._DealCode,
                    this._Grade,
                    this._CardMark,
                    this._DrawMark,
                    this._CheckEquipCode,
                    this._IfUsed,
                    this._Handler,
                    this._HandleDate,
                    this._JudgeMemo,
                    this._CheckDate,
                    this._CheckTime,
                    this._CardMark2,
                    this._SelSign,
                    this._StandId,
                    this._LLSerialID};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._CheckCode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._SerialId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._IfCheckNum = reader.GetInt16(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ItemCd = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ItemClass = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._IfLast = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ItemCheck = reader.GetDecimal(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._IfUp = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._IfDown = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._JudgeResult = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._DealCode = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._Grade = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._CardMark = ((byte[])(reader.GetValue(12)));
            }
            if ((false == reader.IsDBNull(13))) {
                this._DrawMark = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._CheckEquipCode = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._IfUsed = reader.GetInt32(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._Handler = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._HandleDate = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._JudgeMemo = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._CheckDate = reader.GetString(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._CheckTime = reader.GetString(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._CardMark2 = reader.GetString(21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._SelSign = reader.GetInt32(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._StandId = reader.GetInt32(23);
            }
            if ((false == reader.IsDBNull(24))) {
                this._LLSerialID = reader.GetInt32(24);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._CheckCode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._SerialId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._IfCheckNum = ((short)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ItemCd = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ItemClass = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._IfLast = ((System.Nullable<int>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._ItemCheck = ((System.Nullable<decimal>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._IfUp = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._IfDown = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._JudgeResult = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._DealCode = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._Grade = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._CardMark = ((byte[])(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._DrawMark = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._CheckEquipCode = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._IfUsed = ((System.Nullable<int>)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._Handler = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._HandleDate = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._JudgeMemo = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._CheckDate = ((string)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._CheckTime = ((string)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._CardMark2 = ((string)(row[21]));
            }
            if ((false == row.IsNull(22))) {
                this._SelSign = ((System.Nullable<int>)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._StandId = ((System.Nullable<int>)(row[23]));
            }
            if ((false == row.IsNull(24))) {
                this._LLSerialID = ((int)(row[24]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmtCheckDetail).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((((((this.isAttached && ((global::Mesnac.Entity.QmtCheckDetail)(obj)).isAttached) 
                        && (this.CheckCode == ((global::Mesnac.Entity.QmtCheckDetail)(obj)).CheckCode)) 
                        && (this.SerialId == ((global::Mesnac.Entity.QmtCheckDetail)(obj)).SerialId)) 
                        && (this.IfCheckNum == ((global::Mesnac.Entity.QmtCheckDetail)(obj)).IfCheckNum)) 
                        && (this.ItemCd == ((global::Mesnac.Entity.QmtCheckDetail)(obj)).ItemCd)) 
                        && (this.LLSerialID == ((global::Mesnac.Entity.QmtCheckDetail)(obj)).LLSerialID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _CheckCode = new NBear.Common.PropertyItem("CheckCode", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _SerialId = new NBear.Common.PropertyItem("SerialId", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _IfCheckNum = new NBear.Common.PropertyItem("IfCheckNum", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _ItemCd = new NBear.Common.PropertyItem("ItemCd", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _ItemClass = new NBear.Common.PropertyItem("ItemClass", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _IfLast = new NBear.Common.PropertyItem("IfLast", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _ItemCheck = new NBear.Common.PropertyItem("ItemCheck", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _IfUp = new NBear.Common.PropertyItem("IfUp", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _IfDown = new NBear.Common.PropertyItem("IfDown", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _JudgeResult = new NBear.Common.PropertyItem("JudgeResult", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _DealCode = new NBear.Common.PropertyItem("DealCode", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _Grade = new NBear.Common.PropertyItem("Grade", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _CardMark = new NBear.Common.PropertyItem("CardMark", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _DrawMark = new NBear.Common.PropertyItem("DrawMark", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _CheckEquipCode = new NBear.Common.PropertyItem("CheckEquipCode", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _IfUsed = new NBear.Common.PropertyItem("IfUsed", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _Handler = new NBear.Common.PropertyItem("Handler", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _HandleDate = new NBear.Common.PropertyItem("HandleDate", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _JudgeMemo = new NBear.Common.PropertyItem("JudgeMemo", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _CheckDate = new NBear.Common.PropertyItem("CheckDate", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _CheckTime = new NBear.Common.PropertyItem("CheckTime", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _CardMark2 = new NBear.Common.PropertyItem("CardMark2", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _SelSign = new NBear.Common.PropertyItem("SelSign", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _StandId = new NBear.Common.PropertyItem("StandId", "Mesnac.Entity.QmtCheckDetail");
            
            protected NBear.Common.PropertyItem _LLSerialID = new NBear.Common.PropertyItem("LLSerialID", "Mesnac.Entity.QmtCheckDetail");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem CheckCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckCode", _CheckCode.EntityConfiguration, _CheckCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SerialId {
                get {
                    if ((aliasName == null)) {
                        return _SerialId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SerialId", _SerialId.EntityConfiguration, _SerialId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfCheckNum {
                get {
                    if ((aliasName == null)) {
                        return _IfCheckNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfCheckNum", _IfCheckNum.EntityConfiguration, _IfCheckNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemCd {
                get {
                    if ((aliasName == null)) {
                        return _ItemCd;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemCd", _ItemCd.EntityConfiguration, _ItemCd.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemClass {
                get {
                    if ((aliasName == null)) {
                        return _ItemClass;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemClass", _ItemClass.EntityConfiguration, _ItemClass.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfLast {
                get {
                    if ((aliasName == null)) {
                        return _IfLast;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfLast", _IfLast.EntityConfiguration, _IfLast.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemCheck {
                get {
                    if ((aliasName == null)) {
                        return _ItemCheck;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemCheck", _ItemCheck.EntityConfiguration, _ItemCheck.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfUp {
                get {
                    if ((aliasName == null)) {
                        return _IfUp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfUp", _IfUp.EntityConfiguration, _IfUp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfDown {
                get {
                    if ((aliasName == null)) {
                        return _IfDown;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfDown", _IfDown.EntityConfiguration, _IfDown.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem JudgeResult {
                get {
                    if ((aliasName == null)) {
                        return _JudgeResult;
                    }
                    else {
                        return new NBear.Common.PropertyItem("JudgeResult", _JudgeResult.EntityConfiguration, _JudgeResult.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DealCode {
                get {
                    if ((aliasName == null)) {
                        return _DealCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DealCode", _DealCode.EntityConfiguration, _DealCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Grade {
                get {
                    if ((aliasName == null)) {
                        return _Grade;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Grade", _Grade.EntityConfiguration, _Grade.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CardMark {
                get {
                    if ((aliasName == null)) {
                        return _CardMark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CardMark", _CardMark.EntityConfiguration, _CardMark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DrawMark {
                get {
                    if ((aliasName == null)) {
                        return _DrawMark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DrawMark", _DrawMark.EntityConfiguration, _DrawMark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckEquipCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckEquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckEquipCode", _CheckEquipCode.EntityConfiguration, _CheckEquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfUsed {
                get {
                    if ((aliasName == null)) {
                        return _IfUsed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfUsed", _IfUsed.EntityConfiguration, _IfUsed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Handler {
                get {
                    if ((aliasName == null)) {
                        return _Handler;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Handler", _Handler.EntityConfiguration, _Handler.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HandleDate {
                get {
                    if ((aliasName == null)) {
                        return _HandleDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HandleDate", _HandleDate.EntityConfiguration, _HandleDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem JudgeMemo {
                get {
                    if ((aliasName == null)) {
                        return _JudgeMemo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("JudgeMemo", _JudgeMemo.EntityConfiguration, _JudgeMemo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckDate {
                get {
                    if ((aliasName == null)) {
                        return _CheckDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckDate", _CheckDate.EntityConfiguration, _CheckDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckTime {
                get {
                    if ((aliasName == null)) {
                        return _CheckTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckTime", _CheckTime.EntityConfiguration, _CheckTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CardMark2 {
                get {
                    if ((aliasName == null)) {
                        return _CardMark2;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CardMark2", _CardMark2.EntityConfiguration, _CardMark2.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SelSign {
                get {
                    if ((aliasName == null)) {
                        return _SelSign;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SelSign", _SelSign.EntityConfiguration, _SelSign.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandId {
                get {
                    if ((aliasName == null)) {
                        return _StandId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandId", _StandId.EntityConfiguration, _StandId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LLSerialID {
                get {
                    if ((aliasName == null)) {
                        return _LLSerialID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LLSerialID", _LLSerialID.EntityConfiguration, _LLSerialID.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
