//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasEquipArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasEquip> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasEquip\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatchUpd" +
        "ate=\"false\" isRelation=\"false\" mappingName=\"BasEquip\" batchSize=\"10\">\r\n  <Proper" +
        "ties>\r\n    <Property name=\"ObjID\" type=\"System.Nullable`1[System.Int32]\" isInher" +
        "ited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"ObjID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCode\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"System.String\" sqlType=" +
        "\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipTy" +
        "pe\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"EquipType\" mappingColumnType=\"System.Strin" +
        "g\" sqlType=\"char(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"EquipName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"EquipName\" mappingColumnType=\"S" +
        "ystem.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"EquipIP\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipIP\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"varchar(15)\" isPrimaryKey=\"false\" isNotNull=\"f" +
        "alse\" />\r\n    <Property name=\"EquipGroup\" type=\"System.String\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Equi" +
        "pGroup\" mappingColumnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"WorkShopCode\" type=\"System.Nullab" +
        "le`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"WorkShopCode\" mappingColumnType=\"System.Nullabl" +
        "e`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"SubFac\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SubFac\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"MixEquipType\" type=\"System.String\" isInherited=\"false\" " +
        "isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixEqui" +
        "pType\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"IsOneMix\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"IsOneMix\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LEDIP\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"LEDIP\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"AreaCode\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"AreaCode\" mappingColumnType=\"System.String\" sqlType=\"" +
        "varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IsFin" +
        "alMixing\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"IsFinalMixing\" mappingColumnType=\"Sy" +
        "stem.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"IsProEnvironment\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IsProEnviro" +
        "nment\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"MixType\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"MixType\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.Stri" +
        "ng\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"E" +
        "quipVerify\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"EquipVerify\" mappingColumnType=\"Sy" +
        "stem.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"StockNO\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"t" +
        "rue\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fal" +
        "se\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProp" +
        "ertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StockNO\" mappingColu" +
        "mnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"StockKW\" type=\"System.String\" isInherited=\"false\" isR" +
        "eadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StockKW\" m" +
        "appingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"RepairUser\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"RepairUser\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasEquip : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasEquipEntityConfiguration;
        
        protected global::System.Int32? _ObjID;
        
        protected string _EquipCode;
        
        protected string _EquipType;
        
        protected string _EquipName;
        
        protected string _EquipIP;
        
        protected string _EquipGroup;
        
        protected global::System.Int32? _WorkShopCode;
        
        protected string _SubFac;
        
        protected string _MixEquipType;
        
        protected string _IsOneMix;
        
        protected string _LEDIP;
        
        protected string _AreaCode;
        
        protected string _IsFinalMixing;
        
        protected string _IsProEnvironment;
        
        protected string _MixType;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        protected string _EquipVerify;
        
        protected string _StockNO;
        
        protected string _StockKW;
        
        protected string _RepairUser;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasEquip left, global::Mesnac.Entity.BasEquip right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasEquip left, global::Mesnac.Entity.BasEquip right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string EquipType {
            get {
                return this._EquipType;
            }
            set {
                this.OnPropertyChanged("EquipType", this._EquipType, value);
                this._EquipType = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public string EquipIP {
            get {
                return this._EquipIP;
            }
            set {
                this.OnPropertyChanged("EquipIP", this._EquipIP, value);
                this._EquipIP = value;
            }
        }
        
        public string EquipGroup {
            get {
                return this._EquipGroup;
            }
            set {
                this.OnPropertyChanged("EquipGroup", this._EquipGroup, value);
                this._EquipGroup = value;
            }
        }
        
        public global::System.Int32? WorkShopCode {
            get {
                return this._WorkShopCode;
            }
            set {
                this.OnPropertyChanged("WorkShopCode", this._WorkShopCode, value);
                this._WorkShopCode = value;
            }
        }
        
        public string SubFac {
            get {
                return this._SubFac;
            }
            set {
                this.OnPropertyChanged("SubFac", this._SubFac, value);
                this._SubFac = value;
            }
        }
        
        public string MixEquipType {
            get {
                return this._MixEquipType;
            }
            set {
                this.OnPropertyChanged("MixEquipType", this._MixEquipType, value);
                this._MixEquipType = value;
            }
        }
        
        public string IsOneMix {
            get {
                return this._IsOneMix;
            }
            set {
                this.OnPropertyChanged("IsOneMix", this._IsOneMix, value);
                this._IsOneMix = value;
            }
        }
        
        public string LEDIP {
            get {
                return this._LEDIP;
            }
            set {
                this.OnPropertyChanged("LEDIP", this._LEDIP, value);
                this._LEDIP = value;
            }
        }
        
        public string AreaCode {
            get {
                return this._AreaCode;
            }
            set {
                this.OnPropertyChanged("AreaCode", this._AreaCode, value);
                this._AreaCode = value;
            }
        }
        
        public string IsFinalMixing {
            get {
                return this._IsFinalMixing;
            }
            set {
                this.OnPropertyChanged("IsFinalMixing", this._IsFinalMixing, value);
                this._IsFinalMixing = value;
            }
        }
        
        public string IsProEnvironment {
            get {
                return this._IsProEnvironment;
            }
            set {
                this.OnPropertyChanged("IsProEnvironment", this._IsProEnvironment, value);
                this._IsProEnvironment = value;
            }
        }
        
        public string MixType {
            get {
                return this._MixType;
            }
            set {
                this.OnPropertyChanged("MixType", this._MixType, value);
                this._MixType = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string EquipVerify {
            get {
                return this._EquipVerify;
            }
            set {
                this.OnPropertyChanged("EquipVerify", this._EquipVerify, value);
                this._EquipVerify = value;
            }
        }
        
        public string StockNO {
            get {
                return this._StockNO;
            }
            set {
                this.OnPropertyChanged("StockNO", this._StockNO, value);
                this._StockNO = value;
            }
        }
        
        public string StockKW {
            get {
                return this._StockKW;
            }
            set {
                this.OnPropertyChanged("StockKW", this._StockKW, value);
                this._StockKW = value;
            }
        }
        
        public string RepairUser {
            get {
                return this._RepairUser;
            }
            set {
                this.OnPropertyChanged("RepairUser", this._RepairUser, value);
                this._RepairUser = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasEquip._BasEquipEntityConfiguration == null)) {
                BasEquip._BasEquipEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasEquip");
            }
            return BasEquip._BasEquipEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._EquipCode,
                    this._EquipType,
                    this._EquipName,
                    this._EquipIP,
                    this._EquipGroup,
                    this._WorkShopCode,
                    this._SubFac,
                    this._MixEquipType,
                    this._IsOneMix,
                    this._LEDIP,
                    this._AreaCode,
                    this._IsFinalMixing,
                    this._IsProEnvironment,
                    this._MixType,
                    this._Remark,
                    this._DeleteFlag,
                    this._EquipVerify,
                    this._StockNO,
                    this._StockKW,
                    this._RepairUser};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._EquipCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipType = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EquipName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._EquipIP = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._EquipGroup = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._WorkShopCode = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._SubFac = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixEquipType = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._IsOneMix = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._LEDIP = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._AreaCode = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._IsFinalMixing = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._IsProEnvironment = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._MixType = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._Remark = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._DeleteFlag = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._EquipVerify = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._StockNO = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._StockKW = reader.GetString(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._RepairUser = reader.GetString(20);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._EquipCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipType = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._EquipName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._EquipIP = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._EquipGroup = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._WorkShopCode = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._SubFac = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixEquipType = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._IsOneMix = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._LEDIP = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._AreaCode = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._IsFinalMixing = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._IsProEnvironment = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._MixType = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._Remark = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._DeleteFlag = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._EquipVerify = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._StockNO = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._StockKW = ((string)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._RepairUser = ((string)(row[20]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasEquip).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasEquip)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipType = new NBear.Common.PropertyItem("EquipType", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipIP = new NBear.Common.PropertyItem("EquipIP", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipGroup = new NBear.Common.PropertyItem("EquipGroup", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _WorkShopCode = new NBear.Common.PropertyItem("WorkShopCode", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _SubFac = new NBear.Common.PropertyItem("SubFac", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _MixEquipType = new NBear.Common.PropertyItem("MixEquipType", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _IsOneMix = new NBear.Common.PropertyItem("IsOneMix", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _LEDIP = new NBear.Common.PropertyItem("LEDIP", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _AreaCode = new NBear.Common.PropertyItem("AreaCode", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _IsFinalMixing = new NBear.Common.PropertyItem("IsFinalMixing", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _IsProEnvironment = new NBear.Common.PropertyItem("IsProEnvironment", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _MixType = new NBear.Common.PropertyItem("MixType", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _EquipVerify = new NBear.Common.PropertyItem("EquipVerify", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _StockNO = new NBear.Common.PropertyItem("StockNO", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _StockKW = new NBear.Common.PropertyItem("StockKW", "Mesnac.Entity.BasEquip");
            
            protected NBear.Common.PropertyItem _RepairUser = new NBear.Common.PropertyItem("RepairUser", "Mesnac.Entity.BasEquip");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipType {
                get {
                    if ((aliasName == null)) {
                        return _EquipType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipType", _EquipType.EntityConfiguration, _EquipType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipIP {
                get {
                    if ((aliasName == null)) {
                        return _EquipIP;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipIP", _EquipIP.EntityConfiguration, _EquipIP.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipGroup {
                get {
                    if ((aliasName == null)) {
                        return _EquipGroup;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipGroup", _EquipGroup.EntityConfiguration, _EquipGroup.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkShopCode {
                get {
                    if ((aliasName == null)) {
                        return _WorkShopCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkShopCode", _WorkShopCode.EntityConfiguration, _WorkShopCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SubFac {
                get {
                    if ((aliasName == null)) {
                        return _SubFac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SubFac", _SubFac.EntityConfiguration, _SubFac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixEquipType {
                get {
                    if ((aliasName == null)) {
                        return _MixEquipType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixEquipType", _MixEquipType.EntityConfiguration, _MixEquipType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsOneMix {
                get {
                    if ((aliasName == null)) {
                        return _IsOneMix;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsOneMix", _IsOneMix.EntityConfiguration, _IsOneMix.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LEDIP {
                get {
                    if ((aliasName == null)) {
                        return _LEDIP;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LEDIP", _LEDIP.EntityConfiguration, _LEDIP.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AreaCode {
                get {
                    if ((aliasName == null)) {
                        return _AreaCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AreaCode", _AreaCode.EntityConfiguration, _AreaCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsFinalMixing {
                get {
                    if ((aliasName == null)) {
                        return _IsFinalMixing;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsFinalMixing", _IsFinalMixing.EntityConfiguration, _IsFinalMixing.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsProEnvironment {
                get {
                    if ((aliasName == null)) {
                        return _IsProEnvironment;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsProEnvironment", _IsProEnvironment.EntityConfiguration, _IsProEnvironment.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixType {
                get {
                    if ((aliasName == null)) {
                        return _MixType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixType", _MixType.EntityConfiguration, _MixType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipVerify {
                get {
                    if ((aliasName == null)) {
                        return _EquipVerify;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipVerify", _EquipVerify.EntityConfiguration, _EquipVerify.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StockNO {
                get {
                    if ((aliasName == null)) {
                        return _StockNO;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StockNO", _StockNO.EntityConfiguration, _StockNO.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StockKW {
                get {
                    if ((aliasName == null)) {
                        return _StockKW;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StockKW", _StockKW.EntityConfiguration, _StockKW.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RepairUser {
                get {
                    if ((aliasName == null)) {
                        return _RepairUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RepairUser", _RepairUser.EntityConfiguration, _RepairUser.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
