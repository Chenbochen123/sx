//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_CleanRecordArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_CleanRecord> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_CleanRecord\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_CleanRecord\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"Id\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"I" +
        "d\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"Serialid\" type=\"System.Nullable`1[System.Int32]" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"Serialid\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sq" +
        "lType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Works" +
        "hop\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"Workshop\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"Equipname\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Equipname\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"varchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"EquipNo\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipNo\" ma" +
        "ppingColumnType=\"System.String\" sqlType=\"varchar(50)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"Posname\" type=\"System.String\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"Posname\" mappingColumnType=\"System.String\" sqlType=\"varchar(50)\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"Before_temp\" type=\"System.Nulla" +
        "ble`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"Before_temp\" mappingColumnType=\"System.Null" +
        "able`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"After_temp\" type=\"System.Nullable`1[System.Decimal]\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"After_temp\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sq" +
        "lType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"C" +
        "lean_date\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadO" +
        "nly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Clean_date\" m" +
        "appingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Clean_type\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"Clean_type\" mappingColumnType=\"System.String\" sqlType=\"va" +
        "rchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Clean_" +
        "fac\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"Clean_fac\" mappingColumnType=\"System.Str" +
        "ing\" sqlType=\"varchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"Memo\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"Memo\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"varchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </" +
        "Properties>\r\n</EntityConfiguration>")]
    public partial class Eqm_CleanRecord : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_CleanRecordEntityConfiguration;
        
        protected int _Id;
        
        protected global::System.Int32? _Serialid;
        
        protected string _Workshop;
        
        protected string _Equipname;
        
        protected string _EquipNo;
        
        protected string _Posname;
        
        protected global::System.Decimal? _Before_temp;
        
        protected global::System.Decimal? _After_temp;
        
        protected global::System.DateTime? _Clean_date;
        
        protected string _Clean_type;
        
        protected string _Clean_fac;
        
        protected string _Memo;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_CleanRecord left, global::Mesnac.Entity.Eqm_CleanRecord right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_CleanRecord left, global::Mesnac.Entity.Eqm_CleanRecord right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Id {
            get {
                return this._Id;
            }
            set {
                this.OnPropertyChanged("Id", this._Id, value);
                this._Id = value;
            }
        }
        
        public global::System.Int32? Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public string Workshop {
            get {
                return this._Workshop;
            }
            set {
                this.OnPropertyChanged("Workshop", this._Workshop, value);
                this._Workshop = value;
            }
        }
        
        public string Equipname {
            get {
                return this._Equipname;
            }
            set {
                this.OnPropertyChanged("Equipname", this._Equipname, value);
                this._Equipname = value;
            }
        }
        
        public string EquipNo {
            get {
                return this._EquipNo;
            }
            set {
                this.OnPropertyChanged("EquipNo", this._EquipNo, value);
                this._EquipNo = value;
            }
        }
        
        public string Posname {
            get {
                return this._Posname;
            }
            set {
                this.OnPropertyChanged("Posname", this._Posname, value);
                this._Posname = value;
            }
        }
        
        public global::System.Decimal? Before_temp {
            get {
                return this._Before_temp;
            }
            set {
                this.OnPropertyChanged("Before_temp", this._Before_temp, value);
                this._Before_temp = value;
            }
        }
        
        public global::System.Decimal? After_temp {
            get {
                return this._After_temp;
            }
            set {
                this.OnPropertyChanged("After_temp", this._After_temp, value);
                this._After_temp = value;
            }
        }
        
        public global::System.DateTime? Clean_date {
            get {
                return this._Clean_date;
            }
            set {
                this.OnPropertyChanged("Clean_date", this._Clean_date, value);
                this._Clean_date = value;
            }
        }
        
        public string Clean_type {
            get {
                return this._Clean_type;
            }
            set {
                this.OnPropertyChanged("Clean_type", this._Clean_type, value);
                this._Clean_type = value;
            }
        }
        
        public string Clean_fac {
            get {
                return this._Clean_fac;
            }
            set {
                this.OnPropertyChanged("Clean_fac", this._Clean_fac, value);
                this._Clean_fac = value;
            }
        }
        
        public string Memo {
            get {
                return this._Memo;
            }
            set {
                this.OnPropertyChanged("Memo", this._Memo, value);
                this._Memo = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_CleanRecord._Eqm_CleanRecordEntityConfiguration == null)) {
                Eqm_CleanRecord._Eqm_CleanRecordEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_CleanRecord");
            }
            return Eqm_CleanRecord._Eqm_CleanRecordEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Id,
                    this._Serialid,
                    this._Workshop,
                    this._Equipname,
                    this._EquipNo,
                    this._Posname,
                    this._Before_temp,
                    this._After_temp,
                    this._Clean_date,
                    this._Clean_type,
                    this._Clean_fac,
                    this._Memo};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Id = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Serialid = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Workshop = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Equipname = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._EquipNo = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Posname = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Before_temp = reader.GetDecimal(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._After_temp = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._Clean_date = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Clean_type = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Clean_fac = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._Memo = reader.GetString(11);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Id = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Serialid = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Workshop = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Equipname = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._EquipNo = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Posname = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Before_temp = ((System.Nullable<decimal>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._After_temp = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._Clean_date = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9))) {
                this._Clean_type = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._Clean_fac = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._Memo = ((string)(row[11]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_CleanRecord).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_CleanRecord)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Id = new NBear.Common.PropertyItem("Id", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Workshop = new NBear.Common.PropertyItem("Workshop", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Equipname = new NBear.Common.PropertyItem("Equipname", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _EquipNo = new NBear.Common.PropertyItem("EquipNo", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Posname = new NBear.Common.PropertyItem("Posname", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Before_temp = new NBear.Common.PropertyItem("Before_temp", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _After_temp = new NBear.Common.PropertyItem("After_temp", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Clean_date = new NBear.Common.PropertyItem("Clean_date", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Clean_type = new NBear.Common.PropertyItem("Clean_type", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Clean_fac = new NBear.Common.PropertyItem("Clean_fac", "Mesnac.Entity.Eqm_CleanRecord");
            
            protected NBear.Common.PropertyItem _Memo = new NBear.Common.PropertyItem("Memo", "Mesnac.Entity.Eqm_CleanRecord");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Id {
                get {
                    if ((aliasName == null)) {
                        return _Id;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Id", _Id.EntityConfiguration, _Id.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshop {
                get {
                    if ((aliasName == null)) {
                        return _Workshop;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshop", _Workshop.EntityConfiguration, _Workshop.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Equipname {
                get {
                    if ((aliasName == null)) {
                        return _Equipname;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Equipname", _Equipname.EntityConfiguration, _Equipname.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipNo {
                get {
                    if ((aliasName == null)) {
                        return _EquipNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipNo", _EquipNo.EntityConfiguration, _EquipNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Posname {
                get {
                    if ((aliasName == null)) {
                        return _Posname;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Posname", _Posname.EntityConfiguration, _Posname.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Before_temp {
                get {
                    if ((aliasName == null)) {
                        return _Before_temp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Before_temp", _Before_temp.EntityConfiguration, _Before_temp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem After_temp {
                get {
                    if ((aliasName == null)) {
                        return _After_temp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("After_temp", _After_temp.EntityConfiguration, _After_temp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Clean_date {
                get {
                    if ((aliasName == null)) {
                        return _Clean_date;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Clean_date", _Clean_date.EntityConfiguration, _Clean_date.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Clean_type {
                get {
                    if ((aliasName == null)) {
                        return _Clean_type;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Clean_type", _Clean_type.EntityConfiguration, _Clean_type.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Clean_fac {
                get {
                    if ((aliasName == null)) {
                        return _Clean_fac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Clean_fac", _Clean_fac.EntityConfiguration, _Clean_fac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Memo {
                get {
                    if ((aliasName == null)) {
                        return _Memo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Memo", _Memo.EntityConfiguration, _Memo.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
