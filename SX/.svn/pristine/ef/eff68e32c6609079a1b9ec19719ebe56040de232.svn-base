//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcCheckDataArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcCheckData> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.QmcCheckData\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcCheckData\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"CheckId\" type=\"System.Int32\" isInherited=\"fa" +
        "lse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ch" +
        "eckId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotN" +
        "ull=\"true\" />\r\n    <Property name=\"BillNo\" type=\"System.String\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Bi" +
        "llNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"SpecId\" type=\"System.Nullable`1[Sy" +
        "stem.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"SpecId\" mappingColumnType=\"System.Nullable`1[System.I" +
        "nt32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"Barcode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"Barcode\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"nvarchar(24)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"BatchCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"BatchCode\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"Frequency\" type=\"System.String\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "Frequency\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"OrderID\" type=\"System.Nullabl" +
        "e`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"OrderID\" mappingColumnType=\"System.Nullable`1[S" +
        "ystem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"MaterCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MaterCode\" mappingColum" +
        "nType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"SupplyFac\" type=\"System.Nullable`1[System.Int32]\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"SupplyFac\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTy" +
        "pe=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ProductF" +
        "ac\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ProductFac\" mappingColu" +
        "mnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"CheckDate\" type=\"System.Nullable`1[System." +
        "DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"CheckDate\" mappingColumnType=\"System.Nullable`1[System." +
        "DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pr" +
        "operty name=\"CheckResult\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CheckResult\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" " +
        "mappingColumnType=\"System.String\" sqlType=\"varchar(50)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"RecorderId\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"RecorderId\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordTime\" type=\"Syste" +
        "m.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"RecordTime\" mappingColumnType=\"Syst" +
        "em.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"LastModifierId\" type=\"System.String\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"LastModifierId\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastModifyTime\" type" +
        "=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"LastModifyTime\" mappingColum" +
        "nType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"LedgerId\" type=\"System.Nullable`1[S" +
        "ystem.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"LedgerId\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"RecordStat\" type=\"System.Nullable`1[System.Int32]\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"RecordStat\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"i" +
        "nt\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StandardId\" t" +
        "ype=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"StandardId\" mappingColumnTyp" +
        "e=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"ApproverId\" type=\"System.String\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "ApproverId\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ApproveFlag\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"ApproveFlag\" mappingColumnType=\"System.String\" sqlType=\"char(" +
        "1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"FXFlag\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"FXFlag\" mappingColumnType=\"System.String\" sqlType=" +
        "\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityCo" +
        "nfiguration>")]
    public partial class QmcCheckData : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcCheckDataEntityConfiguration;
        
        protected int _CheckId;
        
        protected string _BillNo;
        
        protected global::System.Int32? _SpecId;
        
        protected string _Barcode;
        
        protected string _BatchCode;
        
        protected string _Frequency;
        
        protected global::System.Int32? _OrderID;
        
        protected string _MaterCode;
        
        protected global::System.Int32? _SupplyFac;
        
        protected global::System.Int32? _ProductFac;
        
        protected global::System.DateTime? _CheckDate;
        
        protected string _CheckResult;
        
        protected string _Remark;
        
        protected string _RecorderId;
        
        protected global::System.DateTime? _RecordTime;
        
        protected string _LastModifierId;
        
        protected global::System.DateTime? _LastModifyTime;
        
        protected global::System.Int32? _LedgerId;
        
        protected string _DeleteFlag;
        
        protected global::System.Int32? _RecordStat;
        
        protected global::System.Int32? _StandardId;
        
        protected string _ApproverId;
        
        protected string _ApproveFlag;
        
        protected string _FXFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcCheckData left, global::Mesnac.Entity.QmcCheckData right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcCheckData left, global::Mesnac.Entity.QmcCheckData right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int CheckId {
            get {
                return this._CheckId;
            }
            set {
                this.OnPropertyChanged("CheckId", this._CheckId, value);
                this._CheckId = value;
            }
        }
        
        public string BillNo {
            get {
                return this._BillNo;
            }
            set {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }
        
        public global::System.Int32? SpecId {
            get {
                return this._SpecId;
            }
            set {
                this.OnPropertyChanged("SpecId", this._SpecId, value);
                this._SpecId = value;
            }
        }
        
        public string Barcode {
            get {
                return this._Barcode;
            }
            set {
                this.OnPropertyChanged("Barcode", this._Barcode, value);
                this._Barcode = value;
            }
        }
        
        public string BatchCode {
            get {
                return this._BatchCode;
            }
            set {
                this.OnPropertyChanged("BatchCode", this._BatchCode, value);
                this._BatchCode = value;
            }
        }
        
        public string Frequency {
            get {
                return this._Frequency;
            }
            set {
                this.OnPropertyChanged("Frequency", this._Frequency, value);
                this._Frequency = value;
            }
        }
        
        public global::System.Int32? OrderID {
            get {
                return this._OrderID;
            }
            set {
                this.OnPropertyChanged("OrderID", this._OrderID, value);
                this._OrderID = value;
            }
        }
        
        public string MaterCode {
            get {
                return this._MaterCode;
            }
            set {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }
        
        public global::System.Int32? SupplyFac {
            get {
                return this._SupplyFac;
            }
            set {
                this.OnPropertyChanged("SupplyFac", this._SupplyFac, value);
                this._SupplyFac = value;
            }
        }
        
        public global::System.Int32? ProductFac {
            get {
                return this._ProductFac;
            }
            set {
                this.OnPropertyChanged("ProductFac", this._ProductFac, value);
                this._ProductFac = value;
            }
        }
        
        public global::System.DateTime? CheckDate {
            get {
                return this._CheckDate;
            }
            set {
                this.OnPropertyChanged("CheckDate", this._CheckDate, value);
                this._CheckDate = value;
            }
        }
        
        public string CheckResult {
            get {
                return this._CheckResult;
            }
            set {
                this.OnPropertyChanged("CheckResult", this._CheckResult, value);
                this._CheckResult = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string RecorderId {
            get {
                return this._RecorderId;
            }
            set {
                this.OnPropertyChanged("RecorderId", this._RecorderId, value);
                this._RecorderId = value;
            }
        }
        
        public global::System.DateTime? RecordTime {
            get {
                return this._RecordTime;
            }
            set {
                this.OnPropertyChanged("RecordTime", this._RecordTime, value);
                this._RecordTime = value;
            }
        }
        
        public string LastModifierId {
            get {
                return this._LastModifierId;
            }
            set {
                this.OnPropertyChanged("LastModifierId", this._LastModifierId, value);
                this._LastModifierId = value;
            }
        }
        
        public global::System.DateTime? LastModifyTime {
            get {
                return this._LastModifyTime;
            }
            set {
                this.OnPropertyChanged("LastModifyTime", this._LastModifyTime, value);
                this._LastModifyTime = value;
            }
        }
        
        public global::System.Int32? LedgerId {
            get {
                return this._LedgerId;
            }
            set {
                this.OnPropertyChanged("LedgerId", this._LedgerId, value);
                this._LedgerId = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public global::System.Int32? RecordStat {
            get {
                return this._RecordStat;
            }
            set {
                this.OnPropertyChanged("RecordStat", this._RecordStat, value);
                this._RecordStat = value;
            }
        }
        
        public global::System.Int32? StandardId {
            get {
                return this._StandardId;
            }
            set {
                this.OnPropertyChanged("StandardId", this._StandardId, value);
                this._StandardId = value;
            }
        }
        
        public string ApproverId {
            get {
                return this._ApproverId;
            }
            set {
                this.OnPropertyChanged("ApproverId", this._ApproverId, value);
                this._ApproverId = value;
            }
        }
        
        public string ApproveFlag {
            get {
                return this._ApproveFlag;
            }
            set {
                this.OnPropertyChanged("ApproveFlag", this._ApproveFlag, value);
                this._ApproveFlag = value;
            }
        }
        
        public string FXFlag {
            get {
                return this._FXFlag;
            }
            set {
                this.OnPropertyChanged("FXFlag", this._FXFlag, value);
                this._FXFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcCheckData._QmcCheckDataEntityConfiguration == null)) {
                QmcCheckData._QmcCheckDataEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcCheckData");
            }
            return QmcCheckData._QmcCheckDataEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._CheckId,
                    this._BillNo,
                    this._SpecId,
                    this._Barcode,
                    this._BatchCode,
                    this._Frequency,
                    this._OrderID,
                    this._MaterCode,
                    this._SupplyFac,
                    this._ProductFac,
                    this._CheckDate,
                    this._CheckResult,
                    this._Remark,
                    this._RecorderId,
                    this._RecordTime,
                    this._LastModifierId,
                    this._LastModifyTime,
                    this._LedgerId,
                    this._DeleteFlag,
                    this._RecordStat,
                    this._StandardId,
                    this._ApproverId,
                    this._ApproveFlag,
                    this._FXFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._CheckId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._BillNo = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._SpecId = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Barcode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._BatchCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Frequency = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._OrderID = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._MaterCode = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._SupplyFac = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._ProductFac = reader.GetInt32(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._CheckDate = this.GetDateTime(reader, 10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._CheckResult = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._Remark = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._RecorderId = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._RecordTime = this.GetDateTime(reader, 14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._LastModifierId = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._LastModifyTime = this.GetDateTime(reader, 16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._LedgerId = reader.GetInt32(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._DeleteFlag = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._RecordStat = reader.GetInt32(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._StandardId = reader.GetInt32(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._ApproverId = reader.GetString(21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._ApproveFlag = reader.GetString(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._FXFlag = reader.GetString(23);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._CheckId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._BillNo = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._SpecId = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Barcode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._BatchCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Frequency = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._OrderID = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._MaterCode = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._SupplyFac = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._ProductFac = ((System.Nullable<int>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._CheckDate = this.GetDateTime(row, 10);
            }
            if ((false == row.IsNull(11))) {
                this._CheckResult = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._Remark = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._RecorderId = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._RecordTime = this.GetDateTime(row, 14);
            }
            if ((false == row.IsNull(15))) {
                this._LastModifierId = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._LastModifyTime = this.GetDateTime(row, 16);
            }
            if ((false == row.IsNull(17))) {
                this._LedgerId = ((System.Nullable<int>)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._DeleteFlag = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._RecordStat = ((System.Nullable<int>)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._StandardId = ((System.Nullable<int>)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._ApproverId = ((string)(row[21]));
            }
            if ((false == row.IsNull(22))) {
                this._ApproveFlag = ((string)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._FXFlag = ((string)(row[23]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcCheckData).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcCheckData)(obj)).isAttached) 
                        && (this.CheckId == ((global::Mesnac.Entity.QmcCheckData)(obj)).CheckId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _CheckId = new NBear.Common.PropertyItem("CheckId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _SpecId = new NBear.Common.PropertyItem("SpecId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _Barcode = new NBear.Common.PropertyItem("Barcode", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _BatchCode = new NBear.Common.PropertyItem("BatchCode", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _Frequency = new NBear.Common.PropertyItem("Frequency", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _OrderID = new NBear.Common.PropertyItem("OrderID", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _SupplyFac = new NBear.Common.PropertyItem("SupplyFac", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _ProductFac = new NBear.Common.PropertyItem("ProductFac", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _CheckDate = new NBear.Common.PropertyItem("CheckDate", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _CheckResult = new NBear.Common.PropertyItem("CheckResult", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _RecorderId = new NBear.Common.PropertyItem("RecorderId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _RecordTime = new NBear.Common.PropertyItem("RecordTime", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _LastModifierId = new NBear.Common.PropertyItem("LastModifierId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _LastModifyTime = new NBear.Common.PropertyItem("LastModifyTime", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _LedgerId = new NBear.Common.PropertyItem("LedgerId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _RecordStat = new NBear.Common.PropertyItem("RecordStat", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _StandardId = new NBear.Common.PropertyItem("StandardId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _ApproverId = new NBear.Common.PropertyItem("ApproverId", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _ApproveFlag = new NBear.Common.PropertyItem("ApproveFlag", "Mesnac.Entity.QmcCheckData");
            
            protected NBear.Common.PropertyItem _FXFlag = new NBear.Common.PropertyItem("FXFlag", "Mesnac.Entity.QmcCheckData");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem CheckId {
                get {
                    if ((aliasName == null)) {
                        return _CheckId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckId", _CheckId.EntityConfiguration, _CheckId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BillNo {
                get {
                    if ((aliasName == null)) {
                        return _BillNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpecId {
                get {
                    if ((aliasName == null)) {
                        return _SpecId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpecId", _SpecId.EntityConfiguration, _SpecId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Barcode {
                get {
                    if ((aliasName == null)) {
                        return _Barcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Barcode", _Barcode.EntityConfiguration, _Barcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BatchCode {
                get {
                    if ((aliasName == null)) {
                        return _BatchCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BatchCode", _BatchCode.EntityConfiguration, _BatchCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Frequency {
                get {
                    if ((aliasName == null)) {
                        return _Frequency;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Frequency", _Frequency.EntityConfiguration, _Frequency.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OrderID {
                get {
                    if ((aliasName == null)) {
                        return _OrderID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OrderID", _OrderID.EntityConfiguration, _OrderID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SupplyFac {
                get {
                    if ((aliasName == null)) {
                        return _SupplyFac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SupplyFac", _SupplyFac.EntityConfiguration, _SupplyFac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProductFac {
                get {
                    if ((aliasName == null)) {
                        return _ProductFac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProductFac", _ProductFac.EntityConfiguration, _ProductFac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckDate {
                get {
                    if ((aliasName == null)) {
                        return _CheckDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckDate", _CheckDate.EntityConfiguration, _CheckDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckResult {
                get {
                    if ((aliasName == null)) {
                        return _CheckResult;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckResult", _CheckResult.EntityConfiguration, _CheckResult.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecorderId {
                get {
                    if ((aliasName == null)) {
                        return _RecorderId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecorderId", _RecorderId.EntityConfiguration, _RecorderId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordTime {
                get {
                    if ((aliasName == null)) {
                        return _RecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordTime", _RecordTime.EntityConfiguration, _RecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastModifierId {
                get {
                    if ((aliasName == null)) {
                        return _LastModifierId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastModifierId", _LastModifierId.EntityConfiguration, _LastModifierId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastModifyTime {
                get {
                    if ((aliasName == null)) {
                        return _LastModifyTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastModifyTime", _LastModifyTime.EntityConfiguration, _LastModifyTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LedgerId {
                get {
                    if ((aliasName == null)) {
                        return _LedgerId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LedgerId", _LedgerId.EntityConfiguration, _LedgerId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordStat {
                get {
                    if ((aliasName == null)) {
                        return _RecordStat;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordStat", _RecordStat.EntityConfiguration, _RecordStat.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandardId {
                get {
                    if ((aliasName == null)) {
                        return _StandardId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandardId", _StandardId.EntityConfiguration, _StandardId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ApproverId {
                get {
                    if ((aliasName == null)) {
                        return _ApproverId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ApproverId", _ApproverId.EntityConfiguration, _ApproverId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ApproveFlag {
                get {
                    if ((aliasName == null)) {
                        return _ApproveFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ApproveFlag", _ApproveFlag.EntityConfiguration, _ApproveFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FXFlag {
                get {
                    if ((aliasName == null)) {
                        return _FXFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FXFlag", _FXFlag.EntityConfiguration, _FXFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
