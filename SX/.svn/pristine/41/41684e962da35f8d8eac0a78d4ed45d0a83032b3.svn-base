//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class SysProblemRecordArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.SysProblemRecord> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.SysProblemRecord\" isReadOnly=\"false\" isAutoPreLoad=\"false\" i" +
        "sBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"SysProblemRecord\" batchSize" +
        "=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherit" +
        "ed=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" is" +
        "NotNull=\"true\" />\r\n    <Property name=\"CreateDate\" type=\"System.Nullable`1[Syste" +
        "m.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"CreateDate\" mappingColumnType=\"System.Nullable`1[Syst" +
        "em.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"CreateDept\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CreateDept\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"CreateUser\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"CreateUser\" mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ProblemDesc\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ProblemDesc\" mappingColumnType=\"System.String\" sqlType=\"va" +
        "rchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Probl" +
        "emType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"ProblemType\" mappingColumnType=\"Syste" +
        "m.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"ErrorLevel\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ErrorLevel\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"ProblemReason\" type=\"System.String\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"ProblemReason\" mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Solution\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"Solution\" mappingColumnType=\"System.String\" sqlType=\"va" +
        "rchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DealR" +
        "esult\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"DealResult\" mappingColumnType=\"System." +
        "String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"DealDept\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DealDept\" mappingColu" +
        "mnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"DealUser\" type=\"System.String\" isInherited=\"false\" " +
        "isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" is" +
        "FriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fals" +
        "e\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DealUs" +
        "er\" mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"DealDate\" type=\"System.Nullable`1[Sy" +
        "stem.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"DealDate\" mappingColumnType=\"System.Nullable`1[Sys" +
        "tem.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"ValidateUser\" type=\"System.String\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ValidateUser\" " +
        "mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"ValidateDept\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"ValidateDept\" mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ValidateDate\" typ" +
        "e=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"ValidateDate\" mappingColumn" +
        "Type=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isI" +
        "nherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.S" +
        "tring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"varchar(" +
        "100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfig" +
        "uration>")]
    public partial class SysProblemRecord : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _SysProblemRecordEntityConfiguration;
        
        protected int _ObjID;
        
        protected global::System.DateTime? _CreateDate;
        
        protected string _CreateDept;
        
        protected string _CreateUser;
        
        protected string _ProblemDesc;
        
        protected string _ProblemType;
        
        protected string _ErrorLevel;
        
        protected string _ProblemReason;
        
        protected string _Solution;
        
        protected string _DealResult;
        
        protected string _DealDept;
        
        protected string _DealUser;
        
        protected global::System.DateTime? _DealDate;
        
        protected string _ValidateUser;
        
        protected string _ValidateDept;
        
        protected global::System.DateTime? _ValidateDate;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.SysProblemRecord left, global::Mesnac.Entity.SysProblemRecord right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.SysProblemRecord left, global::Mesnac.Entity.SysProblemRecord right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.DateTime? CreateDate {
            get {
                return this._CreateDate;
            }
            set {
                this.OnPropertyChanged("CreateDate", this._CreateDate, value);
                this._CreateDate = value;
            }
        }
        
        public string CreateDept {
            get {
                return this._CreateDept;
            }
            set {
                this.OnPropertyChanged("CreateDept", this._CreateDept, value);
                this._CreateDept = value;
            }
        }
        
        public string CreateUser {
            get {
                return this._CreateUser;
            }
            set {
                this.OnPropertyChanged("CreateUser", this._CreateUser, value);
                this._CreateUser = value;
            }
        }
        
        public string ProblemDesc {
            get {
                return this._ProblemDesc;
            }
            set {
                this.OnPropertyChanged("ProblemDesc", this._ProblemDesc, value);
                this._ProblemDesc = value;
            }
        }
        
        public string ProblemType {
            get {
                return this._ProblemType;
            }
            set {
                this.OnPropertyChanged("ProblemType", this._ProblemType, value);
                this._ProblemType = value;
            }
        }
        
        public string ErrorLevel {
            get {
                return this._ErrorLevel;
            }
            set {
                this.OnPropertyChanged("ErrorLevel", this._ErrorLevel, value);
                this._ErrorLevel = value;
            }
        }
        
        public string ProblemReason {
            get {
                return this._ProblemReason;
            }
            set {
                this.OnPropertyChanged("ProblemReason", this._ProblemReason, value);
                this._ProblemReason = value;
            }
        }
        
        public string Solution {
            get {
                return this._Solution;
            }
            set {
                this.OnPropertyChanged("Solution", this._Solution, value);
                this._Solution = value;
            }
        }
        
        public string DealResult {
            get {
                return this._DealResult;
            }
            set {
                this.OnPropertyChanged("DealResult", this._DealResult, value);
                this._DealResult = value;
            }
        }
        
        public string DealDept {
            get {
                return this._DealDept;
            }
            set {
                this.OnPropertyChanged("DealDept", this._DealDept, value);
                this._DealDept = value;
            }
        }
        
        public string DealUser {
            get {
                return this._DealUser;
            }
            set {
                this.OnPropertyChanged("DealUser", this._DealUser, value);
                this._DealUser = value;
            }
        }
        
        public global::System.DateTime? DealDate {
            get {
                return this._DealDate;
            }
            set {
                this.OnPropertyChanged("DealDate", this._DealDate, value);
                this._DealDate = value;
            }
        }
        
        public string ValidateUser {
            get {
                return this._ValidateUser;
            }
            set {
                this.OnPropertyChanged("ValidateUser", this._ValidateUser, value);
                this._ValidateUser = value;
            }
        }
        
        public string ValidateDept {
            get {
                return this._ValidateDept;
            }
            set {
                this.OnPropertyChanged("ValidateDept", this._ValidateDept, value);
                this._ValidateDept = value;
            }
        }
        
        public global::System.DateTime? ValidateDate {
            get {
                return this._ValidateDate;
            }
            set {
                this.OnPropertyChanged("ValidateDate", this._ValidateDate, value);
                this._ValidateDate = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((SysProblemRecord._SysProblemRecordEntityConfiguration == null)) {
                SysProblemRecord._SysProblemRecordEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.SysProblemRecord");
            }
            return SysProblemRecord._SysProblemRecordEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._CreateDate,
                    this._CreateDept,
                    this._CreateUser,
                    this._ProblemDesc,
                    this._ProblemType,
                    this._ErrorLevel,
                    this._ProblemReason,
                    this._Solution,
                    this._DealResult,
                    this._DealDept,
                    this._DealUser,
                    this._DealDate,
                    this._ValidateUser,
                    this._ValidateDept,
                    this._ValidateDate,
                    this._DeleteFlag,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._CreateDate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._CreateDept = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._CreateUser = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ProblemDesc = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._ProblemType = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ErrorLevel = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._ProblemReason = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._Solution = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._DealResult = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._DealDept = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._DealUser = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._DealDate = this.GetDateTime(reader, 12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._ValidateUser = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._ValidateDept = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._ValidateDate = this.GetDateTime(reader, 15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._DeleteFlag = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._Remark = reader.GetString(17);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._CreateDate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2))) {
                this._CreateDept = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._CreateUser = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ProblemDesc = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._ProblemType = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._ErrorLevel = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._ProblemReason = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._Solution = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._DealResult = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._DealDept = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._DealUser = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._DealDate = this.GetDateTime(row, 12);
            }
            if ((false == row.IsNull(13))) {
                this._ValidateUser = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._ValidateDept = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._ValidateDate = this.GetDateTime(row, 15);
            }
            if ((false == row.IsNull(16))) {
                this._DeleteFlag = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._Remark = ((string)(row[17]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.SysProblemRecord).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.SysProblemRecord)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.SysProblemRecord)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _CreateDate = new NBear.Common.PropertyItem("CreateDate", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _CreateDept = new NBear.Common.PropertyItem("CreateDept", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _CreateUser = new NBear.Common.PropertyItem("CreateUser", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ProblemDesc = new NBear.Common.PropertyItem("ProblemDesc", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ProblemType = new NBear.Common.PropertyItem("ProblemType", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ErrorLevel = new NBear.Common.PropertyItem("ErrorLevel", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ProblemReason = new NBear.Common.PropertyItem("ProblemReason", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _Solution = new NBear.Common.PropertyItem("Solution", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _DealResult = new NBear.Common.PropertyItem("DealResult", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _DealDept = new NBear.Common.PropertyItem("DealDept", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _DealUser = new NBear.Common.PropertyItem("DealUser", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _DealDate = new NBear.Common.PropertyItem("DealDate", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ValidateUser = new NBear.Common.PropertyItem("ValidateUser", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ValidateDept = new NBear.Common.PropertyItem("ValidateDept", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _ValidateDate = new NBear.Common.PropertyItem("ValidateDate", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.SysProblemRecord");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.SysProblemRecord");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreateDate {
                get {
                    if ((aliasName == null)) {
                        return _CreateDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreateDate", _CreateDate.EntityConfiguration, _CreateDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreateDept {
                get {
                    if ((aliasName == null)) {
                        return _CreateDept;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreateDept", _CreateDept.EntityConfiguration, _CreateDept.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreateUser {
                get {
                    if ((aliasName == null)) {
                        return _CreateUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreateUser", _CreateUser.EntityConfiguration, _CreateUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProblemDesc {
                get {
                    if ((aliasName == null)) {
                        return _ProblemDesc;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProblemDesc", _ProblemDesc.EntityConfiguration, _ProblemDesc.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProblemType {
                get {
                    if ((aliasName == null)) {
                        return _ProblemType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProblemType", _ProblemType.EntityConfiguration, _ProblemType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ErrorLevel {
                get {
                    if ((aliasName == null)) {
                        return _ErrorLevel;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ErrorLevel", _ErrorLevel.EntityConfiguration, _ErrorLevel.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProblemReason {
                get {
                    if ((aliasName == null)) {
                        return _ProblemReason;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProblemReason", _ProblemReason.EntityConfiguration, _ProblemReason.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Solution {
                get {
                    if ((aliasName == null)) {
                        return _Solution;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Solution", _Solution.EntityConfiguration, _Solution.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DealResult {
                get {
                    if ((aliasName == null)) {
                        return _DealResult;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DealResult", _DealResult.EntityConfiguration, _DealResult.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DealDept {
                get {
                    if ((aliasName == null)) {
                        return _DealDept;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DealDept", _DealDept.EntityConfiguration, _DealDept.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DealUser {
                get {
                    if ((aliasName == null)) {
                        return _DealUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DealUser", _DealUser.EntityConfiguration, _DealUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DealDate {
                get {
                    if ((aliasName == null)) {
                        return _DealDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DealDate", _DealDate.EntityConfiguration, _DealDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ValidateUser {
                get {
                    if ((aliasName == null)) {
                        return _ValidateUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValidateUser", _ValidateUser.EntityConfiguration, _ValidateUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ValidateDept {
                get {
                    if ((aliasName == null)) {
                        return _ValidateDept;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValidateDept", _ValidateDept.EntityConfiguration, _ValidateDept.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ValidateDate {
                get {
                    if ((aliasName == null)) {
                        return _ValidateDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValidateDate", _ValidateDate.EntityConfiguration, _ValidateDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
