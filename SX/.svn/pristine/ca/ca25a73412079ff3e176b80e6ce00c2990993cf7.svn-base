//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmtQrigMasterArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmtQrigMaster> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.QmtQrigMaster\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"QmtQrigMaster\" batchSize=\"10\">\r" +
        "\n  <Properties>\r\n    <Property name=\"SeqNo\" type=\"System.Int64\" isInherited=\"fal" +
        "se\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Seq" +
        "No\" mappingColumnType=\"System.Int64\" sqlType=\"bigint\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"PlanDate\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"PlanDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCode\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"EquipCode\" mappingColumnType=\"System.String\" sqlType=\"char(5)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftId\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"ShiftId\" mappingColumnType=\"System.String\" sqlType=\"char(10" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftClass\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"ShiftClass\" mappingColumnType=\"System.String\" sq" +
        "lType=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "MaterCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"MaterCode\" mappingColumnType=\"Syste" +
        "m.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"SerialId\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SerialId\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"CheckNum\" type=\"System.Nullable`1[System.Int16]\" isInherit" +
        "ed=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"CheckNum\" mappingColumnType=\"System.Nullable`1[System.Int16]\" sqlType=\"small" +
        "int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CheckDate\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"CheckDate\" mappingColumnType=\"System.String\" sq" +
        "lType=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "CheckTime\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"CheckTime\" mappingColumnType=\"Syste" +
        "m.String\" sqlType=\"char(8)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"ShiftCheckId\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"tr" +
        "ue\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftCheckId\" mapping" +
        "ColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"CheckClassName\" type=\"System.String\" isInherited=\"f" +
        "alse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"C" +
        "heckClassName\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"WorkerBarcode\" type=\"System.S" +
        "tring\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=" +
        "\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fa" +
        "lse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"" +
        "false\" mappingName=\"WorkerBarcode\" mappingColumnType=\"System.String\" sqlType=\"ch" +
        "ar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Flag\" typ" +
        "e=\"System.Nullable`1[System.Boolean]\" isInherited=\"false\" isReadOnly=\"true\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"Flag\" mappingColumnType=\"Syst" +
        "em.Nullable`1[System.Boolean]\" sqlType=\"bit\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"IfLast\" type=\"System.Nullable`1[System.Boolean]\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"IfLast\" mappingColumnType=\"System.Nullable`1[System.Boolean]\" sqlType=" +
        "\"bit\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"TestType\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"TestType\" mappingColumnType=\"System.String\" sql" +
        "Type=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"CheckEquipCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CheckEquipCode\" ma" +
        "ppingColumnType=\"System.String\" sqlType=\"nchar(30)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"CheckEquipName\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"CheckEquipName\" mappingColumnType=\"System.String\" sqlType=\"nchar(30)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Workshopid\" type=\"Syst" +
        "em.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"Workshopid\" mappingColumnType=\"System." +
        "Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"LastChangeTime\" type=\"System.Nullable`1[System.DateTime]\"" +
        " isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"LastChangeTime\" mappingColumnType=\"System.Nullable`1[System.DateTi" +
        "me]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"SulfTime\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"SulfTime\" mappingColumnType=\"" +
        "System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"SulfEquip\" type=\"System.String\" isInherited=\"false\" isReadOnl" +
        "y=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SulfEquip\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"CheckPlan_Class\" type=\"System.String\" isInherit" +
        "ed=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"CheckPlan_Class\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StandCode\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"StandCode\" mappingColumnType=\"System.String\" sqlType=\"ch" +
        "ar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Recipetyp" +
        "e\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"Recipetype\" mappingColumnType=\"System.Strin" +
        "g\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnTy" +
        "pe=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"ZJSID\" type=\"System.String\" isInherited=\"false\" isReadOnl" +
        "y=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ZJSID\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"LLSerialID\" type=\"System.String\" isInherited=\"false" +
        "\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"LLSer" +
        "ialID\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"CheckPlan_Date\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"CheckPlan_Date\" mappingColumnType=\"System.String\" sqlType=\"char(1" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigur" +
        "ation>")]
    public partial class QmtQrigMaster : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmtQrigMasterEntityConfiguration;
        
        protected long _SeqNo;
        
        protected string _PlanDate;
        
        protected string _EquipCode;
        
        protected string _ShiftId;
        
        protected string _ShiftClass;
        
        protected string _MaterCode;
        
        protected string _SerialId;
        
        protected global::System.Int16? _CheckNum;
        
        protected string _CheckDate;
        
        protected string _CheckTime;
        
        protected string _ShiftCheckId;
        
        protected string _CheckClassName;
        
        protected string _WorkerBarcode;
        
        protected global::System.Boolean? _Flag;
        
        protected global::System.Boolean? _IfLast;
        
        protected string _TestType;
        
        protected string _Remark;
        
        protected string _CheckEquipCode;
        
        protected string _CheckEquipName;
        
        protected global::System.Int32? _Workshopid;
        
        protected global::System.DateTime? _LastChangeTime;
        
        protected string _SulfTime;
        
        protected string _SulfEquip;
        
        protected string _CheckPlan_Class;
        
        protected string _StandCode;
        
        protected string _Recipetype;
        
        protected string _DeleteFlag;
        
        protected string _ZJSID;
        
        protected string _LLSerialID;
        
        protected string _CheckPlan_Date;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmtQrigMaster left, global::Mesnac.Entity.QmtQrigMaster right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmtQrigMaster left, global::Mesnac.Entity.QmtQrigMaster right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public long SeqNo {
            get {
                return this._SeqNo;
            }
            set {
                this.OnPropertyChanged("SeqNo", this._SeqNo, value);
                this._SeqNo = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string ShiftId {
            get {
                return this._ShiftId;
            }
            set {
                this.OnPropertyChanged("ShiftId", this._ShiftId, value);
                this._ShiftId = value;
            }
        }
        
        public string ShiftClass {
            get {
                return this._ShiftClass;
            }
            set {
                this.OnPropertyChanged("ShiftClass", this._ShiftClass, value);
                this._ShiftClass = value;
            }
        }
        
        public string MaterCode {
            get {
                return this._MaterCode;
            }
            set {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }
        
        public string SerialId {
            get {
                return this._SerialId;
            }
            set {
                this.OnPropertyChanged("SerialId", this._SerialId, value);
                this._SerialId = value;
            }
        }
        
        public global::System.Int16? CheckNum {
            get {
                return this._CheckNum;
            }
            set {
                this.OnPropertyChanged("CheckNum", this._CheckNum, value);
                this._CheckNum = value;
            }
        }
        
        public string CheckDate {
            get {
                return this._CheckDate;
            }
            set {
                this.OnPropertyChanged("CheckDate", this._CheckDate, value);
                this._CheckDate = value;
            }
        }
        
        public string CheckTime {
            get {
                return this._CheckTime;
            }
            set {
                this.OnPropertyChanged("CheckTime", this._CheckTime, value);
                this._CheckTime = value;
            }
        }
        
        public string ShiftCheckId {
            get {
                return this._ShiftCheckId;
            }
            set {
                this.OnPropertyChanged("ShiftCheckId", this._ShiftCheckId, value);
                this._ShiftCheckId = value;
            }
        }
        
        public string CheckClassName {
            get {
                return this._CheckClassName;
            }
            set {
                this.OnPropertyChanged("CheckClassName", this._CheckClassName, value);
                this._CheckClassName = value;
            }
        }
        
        public string WorkerBarcode {
            get {
                return this._WorkerBarcode;
            }
            set {
                this.OnPropertyChanged("WorkerBarcode", this._WorkerBarcode, value);
                this._WorkerBarcode = value;
            }
        }
        
        public global::System.Boolean? Flag {
            get {
                return this._Flag;
            }
            set {
                this.OnPropertyChanged("Flag", this._Flag, value);
                this._Flag = value;
            }
        }
        
        public global::System.Boolean? IfLast {
            get {
                return this._IfLast;
            }
            set {
                this.OnPropertyChanged("IfLast", this._IfLast, value);
                this._IfLast = value;
            }
        }
        
        public string TestType {
            get {
                return this._TestType;
            }
            set {
                this.OnPropertyChanged("TestType", this._TestType, value);
                this._TestType = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string CheckEquipCode {
            get {
                return this._CheckEquipCode;
            }
            set {
                this.OnPropertyChanged("CheckEquipCode", this._CheckEquipCode, value);
                this._CheckEquipCode = value;
            }
        }
        
        public string CheckEquipName {
            get {
                return this._CheckEquipName;
            }
            set {
                this.OnPropertyChanged("CheckEquipName", this._CheckEquipName, value);
                this._CheckEquipName = value;
            }
        }
        
        public global::System.Int32? Workshopid {
            get {
                return this._Workshopid;
            }
            set {
                this.OnPropertyChanged("Workshopid", this._Workshopid, value);
                this._Workshopid = value;
            }
        }
        
        public global::System.DateTime? LastChangeTime {
            get {
                return this._LastChangeTime;
            }
            set {
                this.OnPropertyChanged("LastChangeTime", this._LastChangeTime, value);
                this._LastChangeTime = value;
            }
        }
        
        public string SulfTime {
            get {
                return this._SulfTime;
            }
            set {
                this.OnPropertyChanged("SulfTime", this._SulfTime, value);
                this._SulfTime = value;
            }
        }
        
        public string SulfEquip {
            get {
                return this._SulfEquip;
            }
            set {
                this.OnPropertyChanged("SulfEquip", this._SulfEquip, value);
                this._SulfEquip = value;
            }
        }
        
        public string CheckPlan_Class {
            get {
                return this._CheckPlan_Class;
            }
            set {
                this.OnPropertyChanged("CheckPlan_Class", this._CheckPlan_Class, value);
                this._CheckPlan_Class = value;
            }
        }
        
        public string StandCode {
            get {
                return this._StandCode;
            }
            set {
                this.OnPropertyChanged("StandCode", this._StandCode, value);
                this._StandCode = value;
            }
        }
        
        public string Recipetype {
            get {
                return this._Recipetype;
            }
            set {
                this.OnPropertyChanged("Recipetype", this._Recipetype, value);
                this._Recipetype = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string ZJSID {
            get {
                return this._ZJSID;
            }
            set {
                this.OnPropertyChanged("ZJSID", this._ZJSID, value);
                this._ZJSID = value;
            }
        }
        
        public string LLSerialID {
            get {
                return this._LLSerialID;
            }
            set {
                this.OnPropertyChanged("LLSerialID", this._LLSerialID, value);
                this._LLSerialID = value;
            }
        }
        
        public string CheckPlan_Date {
            get {
                return this._CheckPlan_Date;
            }
            set {
                this.OnPropertyChanged("CheckPlan_Date", this._CheckPlan_Date, value);
                this._CheckPlan_Date = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmtQrigMaster._QmtQrigMasterEntityConfiguration == null)) {
                QmtQrigMaster._QmtQrigMasterEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmtQrigMaster");
            }
            return QmtQrigMaster._QmtQrigMasterEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._SeqNo,
                    this._PlanDate,
                    this._EquipCode,
                    this._ShiftId,
                    this._ShiftClass,
                    this._MaterCode,
                    this._SerialId,
                    this._CheckNum,
                    this._CheckDate,
                    this._CheckTime,
                    this._ShiftCheckId,
                    this._CheckClassName,
                    this._WorkerBarcode,
                    this._Flag,
                    this._IfLast,
                    this._TestType,
                    this._Remark,
                    this._CheckEquipCode,
                    this._CheckEquipName,
                    this._Workshopid,
                    this._LastChangeTime,
                    this._SulfTime,
                    this._SulfEquip,
                    this._CheckPlan_Class,
                    this._StandCode,
                    this._Recipetype,
                    this._DeleteFlag,
                    this._ZJSID,
                    this._LLSerialID,
                    this._CheckPlan_Date};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._SeqNo = reader.GetInt64(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PlanDate = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ShiftId = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ShiftClass = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._MaterCode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._SerialId = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._CheckNum = reader.GetInt16(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._CheckDate = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._CheckTime = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._ShiftCheckId = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._CheckClassName = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._WorkerBarcode = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._Flag = reader.GetBoolean(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._IfLast = reader.GetBoolean(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._TestType = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._Remark = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._CheckEquipCode = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._CheckEquipName = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._Workshopid = reader.GetInt32(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._LastChangeTime = this.GetDateTime(reader, 20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._SulfTime = reader.GetString(21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._SulfEquip = reader.GetString(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._CheckPlan_Class = reader.GetString(23);
            }
            if ((false == reader.IsDBNull(24))) {
                this._StandCode = reader.GetString(24);
            }
            if ((false == reader.IsDBNull(25))) {
                this._Recipetype = reader.GetString(25);
            }
            if ((false == reader.IsDBNull(26))) {
                this._DeleteFlag = reader.GetString(26);
            }
            if ((false == reader.IsDBNull(27))) {
                this._ZJSID = reader.GetString(27);
            }
            if ((false == reader.IsDBNull(28))) {
                this._LLSerialID = reader.GetString(28);
            }
            if ((false == reader.IsDBNull(29))) {
                this._CheckPlan_Date = reader.GetString(29);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._SeqNo = ((long)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PlanDate = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ShiftId = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ShiftClass = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._MaterCode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._SerialId = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._CheckNum = ((System.Nullable<short>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._CheckDate = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._CheckTime = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._ShiftCheckId = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._CheckClassName = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._WorkerBarcode = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._Flag = ((System.Nullable<bool>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._IfLast = ((System.Nullable<bool>)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._TestType = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._Remark = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._CheckEquipCode = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._CheckEquipName = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._Workshopid = ((System.Nullable<int>)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._LastChangeTime = this.GetDateTime(row, 20);
            }
            if ((false == row.IsNull(21))) {
                this._SulfTime = ((string)(row[21]));
            }
            if ((false == row.IsNull(22))) {
                this._SulfEquip = ((string)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._CheckPlan_Class = ((string)(row[23]));
            }
            if ((false == row.IsNull(24))) {
                this._StandCode = ((string)(row[24]));
            }
            if ((false == row.IsNull(25))) {
                this._Recipetype = ((string)(row[25]));
            }
            if ((false == row.IsNull(26))) {
                this._DeleteFlag = ((string)(row[26]));
            }
            if ((false == row.IsNull(27))) {
                this._ZJSID = ((string)(row[27]));
            }
            if ((false == row.IsNull(28))) {
                this._LLSerialID = ((string)(row[28]));
            }
            if ((false == row.IsNull(29))) {
                this._CheckPlan_Date = ((string)(row[29]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmtQrigMaster).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmtQrigMaster)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _SeqNo = new NBear.Common.PropertyItem("SeqNo", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _ShiftId = new NBear.Common.PropertyItem("ShiftId", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _ShiftClass = new NBear.Common.PropertyItem("ShiftClass", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _SerialId = new NBear.Common.PropertyItem("SerialId", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckNum = new NBear.Common.PropertyItem("CheckNum", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckDate = new NBear.Common.PropertyItem("CheckDate", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckTime = new NBear.Common.PropertyItem("CheckTime", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _ShiftCheckId = new NBear.Common.PropertyItem("ShiftCheckId", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckClassName = new NBear.Common.PropertyItem("CheckClassName", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _WorkerBarcode = new NBear.Common.PropertyItem("WorkerBarcode", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _Flag = new NBear.Common.PropertyItem("Flag", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _IfLast = new NBear.Common.PropertyItem("IfLast", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _TestType = new NBear.Common.PropertyItem("TestType", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckEquipCode = new NBear.Common.PropertyItem("CheckEquipCode", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckEquipName = new NBear.Common.PropertyItem("CheckEquipName", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _Workshopid = new NBear.Common.PropertyItem("Workshopid", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _LastChangeTime = new NBear.Common.PropertyItem("LastChangeTime", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _SulfTime = new NBear.Common.PropertyItem("SulfTime", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _SulfEquip = new NBear.Common.PropertyItem("SulfEquip", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckPlan_Class = new NBear.Common.PropertyItem("CheckPlan_Class", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _StandCode = new NBear.Common.PropertyItem("StandCode", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _Recipetype = new NBear.Common.PropertyItem("Recipetype", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _ZJSID = new NBear.Common.PropertyItem("ZJSID", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _LLSerialID = new NBear.Common.PropertyItem("LLSerialID", "Mesnac.Entity.QmtQrigMaster");
            
            protected NBear.Common.PropertyItem _CheckPlan_Date = new NBear.Common.PropertyItem("CheckPlan_Date", "Mesnac.Entity.QmtQrigMaster");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem SeqNo {
                get {
                    if ((aliasName == null)) {
                        return _SeqNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SeqNo", _SeqNo.EntityConfiguration, _SeqNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftId {
                get {
                    if ((aliasName == null)) {
                        return _ShiftId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftId", _ShiftId.EntityConfiguration, _ShiftId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftClass {
                get {
                    if ((aliasName == null)) {
                        return _ShiftClass;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftClass", _ShiftClass.EntityConfiguration, _ShiftClass.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SerialId {
                get {
                    if ((aliasName == null)) {
                        return _SerialId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SerialId", _SerialId.EntityConfiguration, _SerialId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckNum {
                get {
                    if ((aliasName == null)) {
                        return _CheckNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckNum", _CheckNum.EntityConfiguration, _CheckNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckDate {
                get {
                    if ((aliasName == null)) {
                        return _CheckDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckDate", _CheckDate.EntityConfiguration, _CheckDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckTime {
                get {
                    if ((aliasName == null)) {
                        return _CheckTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckTime", _CheckTime.EntityConfiguration, _CheckTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftCheckId {
                get {
                    if ((aliasName == null)) {
                        return _ShiftCheckId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftCheckId", _ShiftCheckId.EntityConfiguration, _ShiftCheckId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckClassName {
                get {
                    if ((aliasName == null)) {
                        return _CheckClassName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckClassName", _CheckClassName.EntityConfiguration, _CheckClassName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkerBarcode {
                get {
                    if ((aliasName == null)) {
                        return _WorkerBarcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkerBarcode", _WorkerBarcode.EntityConfiguration, _WorkerBarcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Flag {
                get {
                    if ((aliasName == null)) {
                        return _Flag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Flag", _Flag.EntityConfiguration, _Flag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfLast {
                get {
                    if ((aliasName == null)) {
                        return _IfLast;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfLast", _IfLast.EntityConfiguration, _IfLast.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TestType {
                get {
                    if ((aliasName == null)) {
                        return _TestType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TestType", _TestType.EntityConfiguration, _TestType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckEquipCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckEquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckEquipCode", _CheckEquipCode.EntityConfiguration, _CheckEquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckEquipName {
                get {
                    if ((aliasName == null)) {
                        return _CheckEquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckEquipName", _CheckEquipName.EntityConfiguration, _CheckEquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshopid {
                get {
                    if ((aliasName == null)) {
                        return _Workshopid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshopid", _Workshopid.EntityConfiguration, _Workshopid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastChangeTime {
                get {
                    if ((aliasName == null)) {
                        return _LastChangeTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastChangeTime", _LastChangeTime.EntityConfiguration, _LastChangeTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SulfTime {
                get {
                    if ((aliasName == null)) {
                        return _SulfTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SulfTime", _SulfTime.EntityConfiguration, _SulfTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SulfEquip {
                get {
                    if ((aliasName == null)) {
                        return _SulfEquip;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SulfEquip", _SulfEquip.EntityConfiguration, _SulfEquip.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckPlan_Class {
                get {
                    if ((aliasName == null)) {
                        return _CheckPlan_Class;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckPlan_Class", _CheckPlan_Class.EntityConfiguration, _CheckPlan_Class.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandCode {
                get {
                    if ((aliasName == null)) {
                        return _StandCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandCode", _StandCode.EntityConfiguration, _StandCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Recipetype {
                get {
                    if ((aliasName == null)) {
                        return _Recipetype;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Recipetype", _Recipetype.EntityConfiguration, _Recipetype.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ZJSID {
                get {
                    if ((aliasName == null)) {
                        return _ZJSID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ZJSID", _ZJSID.EntityConfiguration, _ZJSID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LLSerialID {
                get {
                    if ((aliasName == null)) {
                        return _LLSerialID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LLSerialID", _LLSerialID.EntityConfiguration, _LLSerialID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckPlan_Date {
                get {
                    if ((aliasName == null)) {
                        return _CheckPlan_Date;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckPlan_Date", _CheckPlan_Date.EntityConfiguration, _CheckPlan_Date.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
