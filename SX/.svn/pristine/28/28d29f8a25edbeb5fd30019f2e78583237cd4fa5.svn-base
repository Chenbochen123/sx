//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_MixCleanArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_MixClean> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_MixClean\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_MixClean\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"Serialid\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"S" +
        "erialid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNo" +
        "tNull=\"true\" />\r\n    <Property name=\"Workshop\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"Workshop\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipName\" type=\"System.Strin" +
        "g\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"EquipName\" mappingColumnType=\"System.String\" sqlType=\"varchar(2" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCode\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"System.String\" sq" +
        "lType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P" +
        "osName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"PosName\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"Cycle\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Cycle\" m" +
        "appingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"Shiftname\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"Shiftname\" mappingColumnType=\"System.String\" sqlType=\"varchar(10)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StartDate\" type=" +
        "\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"StartDate\" mappingColumnType=" +
        "\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"Lastdate\" type=\"System.Nullable`1[System." +
        "DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"Lastdate\" mappingColumnType=\"System.Nullable`1[System.D" +
        "ateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"Useshifts\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false" +
        "\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"Useshifts\" mappingColumnType=\"System.Nullable`1[System.Int32]\"" +
        " sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</Ent" +
        "ityConfiguration>")]
    public partial class Eqm_MixClean : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_MixCleanEntityConfiguration;
        
        protected int _Serialid;
        
        protected string _Workshop;
        
        protected string _EquipName;
        
        protected string _EquipCode;
        
        protected string _PosName;
        
        protected global::System.Int32? _Cycle;
        
        protected string _Shiftname;
        
        protected global::System.DateTime? _StartDate;
        
        protected global::System.DateTime? _Lastdate;
        
        protected global::System.Int32? _Useshifts;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_MixClean left, global::Mesnac.Entity.Eqm_MixClean right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_MixClean left, global::Mesnac.Entity.Eqm_MixClean right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public string Workshop {
            get {
                return this._Workshop;
            }
            set {
                this.OnPropertyChanged("Workshop", this._Workshop, value);
                this._Workshop = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string PosName {
            get {
                return this._PosName;
            }
            set {
                this.OnPropertyChanged("PosName", this._PosName, value);
                this._PosName = value;
            }
        }
        
        public global::System.Int32? Cycle {
            get {
                return this._Cycle;
            }
            set {
                this.OnPropertyChanged("Cycle", this._Cycle, value);
                this._Cycle = value;
            }
        }
        
        public string Shiftname {
            get {
                return this._Shiftname;
            }
            set {
                this.OnPropertyChanged("Shiftname", this._Shiftname, value);
                this._Shiftname = value;
            }
        }
        
        public global::System.DateTime? StartDate {
            get {
                return this._StartDate;
            }
            set {
                this.OnPropertyChanged("StartDate", this._StartDate, value);
                this._StartDate = value;
            }
        }
        
        public global::System.DateTime? Lastdate {
            get {
                return this._Lastdate;
            }
            set {
                this.OnPropertyChanged("Lastdate", this._Lastdate, value);
                this._Lastdate = value;
            }
        }
        
        public global::System.Int32? Useshifts {
            get {
                return this._Useshifts;
            }
            set {
                this.OnPropertyChanged("Useshifts", this._Useshifts, value);
                this._Useshifts = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_MixClean._Eqm_MixCleanEntityConfiguration == null)) {
                Eqm_MixClean._Eqm_MixCleanEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_MixClean");
            }
            return Eqm_MixClean._Eqm_MixCleanEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Serialid,
                    this._Workshop,
                    this._EquipName,
                    this._EquipCode,
                    this._PosName,
                    this._Cycle,
                    this._Shiftname,
                    this._StartDate,
                    this._Lastdate,
                    this._Useshifts};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Serialid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Workshop = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EquipCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._PosName = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Cycle = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Shiftname = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._StartDate = this.GetDateTime(reader, 7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._Lastdate = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Useshifts = reader.GetInt32(9);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Serialid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Workshop = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._EquipCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._PosName = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Cycle = ((System.Nullable<int>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Shiftname = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._StartDate = this.GetDateTime(row, 7);
            }
            if ((false == row.IsNull(8))) {
                this._Lastdate = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9))) {
                this._Useshifts = ((System.Nullable<int>)(row[9]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_MixClean).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_MixClean)(obj)).isAttached) 
                        && (this.Serialid == ((global::Mesnac.Entity.Eqm_MixClean)(obj)).Serialid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _Workshop = new NBear.Common.PropertyItem("Workshop", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _PosName = new NBear.Common.PropertyItem("PosName", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _Cycle = new NBear.Common.PropertyItem("Cycle", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _Shiftname = new NBear.Common.PropertyItem("Shiftname", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _StartDate = new NBear.Common.PropertyItem("StartDate", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _Lastdate = new NBear.Common.PropertyItem("Lastdate", "Mesnac.Entity.Eqm_MixClean");
            
            protected NBear.Common.PropertyItem _Useshifts = new NBear.Common.PropertyItem("Useshifts", "Mesnac.Entity.Eqm_MixClean");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshop {
                get {
                    if ((aliasName == null)) {
                        return _Workshop;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshop", _Workshop.EntityConfiguration, _Workshop.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PosName {
                get {
                    if ((aliasName == null)) {
                        return _PosName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PosName", _PosName.EntityConfiguration, _PosName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Cycle {
                get {
                    if ((aliasName == null)) {
                        return _Cycle;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Cycle", _Cycle.EntityConfiguration, _Cycle.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Shiftname {
                get {
                    if ((aliasName == null)) {
                        return _Shiftname;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Shiftname", _Shiftname.EntityConfiguration, _Shiftname.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartDate {
                get {
                    if ((aliasName == null)) {
                        return _StartDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartDate", _StartDate.EntityConfiguration, _StartDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Lastdate {
                get {
                    if ((aliasName == null)) {
                        return _Lastdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Lastdate", _Lastdate.EntityConfiguration, _Lastdate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Useshifts {
                get {
                    if ((aliasName == null)) {
                        return _Useshifts;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Useshifts", _Useshifts.EntityConfiguration, _Useshifts.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
