//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmtCheckMasterArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmtCheckMaster> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmtCheckMaster\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmtCheckMaster\" batchSize=\"10" +
        "\">\r\n  <Properties>\r\n    <Property name=\"CheckCode\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"CheckCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(13)\" isPrima" +
        "ryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"PlanDate\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"PlanDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCode\" type" +
        "=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Shi" +
        "ftId\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftId\" mappingColum" +
        "nType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"ShiftClass\" type=\"System.Nullable`1[System." +
        "Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ShiftClass\" mappingColumnType=\"System.Nullable`1[System.In" +
        "t32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"MaterCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"MaterCode\" mappingColumnType=\"S" +
        "ystem.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"RubType\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ru" +
        "bType\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StartId\" type=\"System.Nu" +
        "llable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"StartId\" mappingColumnType=\"System.Nullabl" +
        "e`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"EndId\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false" +
        "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EndI" +
        "d\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RuleId\" type=\"System.Nullabl" +
        "e`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"RuleId\" mappingColumnType=\"System.Nullable`1[Sy" +
        "stem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"RuleVision\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RuleV" +
        "ision\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StandId\" type=\"System.Nu" +
        "llable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"StandId\" mappingColumnType=\"System.Nullabl" +
        "e`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"StandVision\" type=\"System.Nullable`1[System.Int32]\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"StandVision\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CheckDate\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"CheckDate\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Shi" +
        "ftCheckId\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"ShiftCheckId\" mappingColumnType=\"S" +
        "ystem.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"ShiftCheckGroupID\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftCheckG" +
        "roupID\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"WorkerBarcode\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"WorkerBarcode\" mappingColumnType=\"System.String\" sqlType=\"char(6)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"AuditCode\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"AuditCode\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Audit" +
        "Mark\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"AuditMark\" mappingCol" +
        "umnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"JudgeMemo\" type=\"System.String\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"JudgeMemo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(255)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IfJudge\" type=\"System.S" +
        "tring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"IfJudge\" mappingColumnType=\"System.String\" sqlType=\"char(1)" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastChangeTime\"" +
        " type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"LastChangeTime\" mapping" +
        "ColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=" +
        "\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StandCode\" type=\"System.Nullab" +
        "le`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"StandCode\" mappingColumnType=\"System.Nullable`" +
        "1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"CPFLAG\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CPFLA" +
        "G\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"BatchNo\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"BatchNo\" mappingColumnType=\"System.String\" sqlType=\"varchar(50)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ZJSID\" type=\"Sys" +
        "tem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"ZJSID\" mappingColumnType=\"System.String\" sqlType=\"varc" +
        "har(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CheckPla" +
        "nDate\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"CheckPlanDate\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"char(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Pro" +
        "perties>\r\n</EntityConfiguration>")]
    public partial class QmtCheckMaster : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmtCheckMasterEntityConfiguration;
        
        protected string _CheckCode;
        
        protected string _PlanDate;
        
        protected string _EquipCode;
        
        protected global::System.Int32? _ShiftId;
        
        protected global::System.Int32? _ShiftClass;
        
        protected string _MaterCode;
        
        protected global::System.Int32? _RubType;
        
        protected global::System.Int32? _StartId;
        
        protected global::System.Int32? _EndId;
        
        protected global::System.Int32? _RuleId;
        
        protected global::System.Int32? _RuleVision;
        
        protected global::System.Int32? _StandId;
        
        protected global::System.Int32? _StandVision;
        
        protected string _CheckDate;
        
        protected string _ShiftCheckId;
        
        protected string _ShiftCheckGroupID;
        
        protected string _WorkerBarcode;
        
        protected string _AuditCode;
        
        protected global::System.Int32? _AuditMark;
        
        protected string _JudgeMemo;
        
        protected string _IfJudge;
        
        protected global::System.DateTime? _LastChangeTime;
        
        protected global::System.Int32? _StandCode;
        
        protected global::System.Int32? _CPFLAG;
        
        protected string _BatchNo;
        
        protected string _ZJSID;
        
        protected string _CheckPlanDate;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmtCheckMaster left, global::Mesnac.Entity.QmtCheckMaster right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmtCheckMaster left, global::Mesnac.Entity.QmtCheckMaster right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string CheckCode {
            get {
                return this._CheckCode;
            }
            set {
                this.OnPropertyChanged("CheckCode", this._CheckCode, value);
                this._CheckCode = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public global::System.Int32? ShiftId {
            get {
                return this._ShiftId;
            }
            set {
                this.OnPropertyChanged("ShiftId", this._ShiftId, value);
                this._ShiftId = value;
            }
        }
        
        public global::System.Int32? ShiftClass {
            get {
                return this._ShiftClass;
            }
            set {
                this.OnPropertyChanged("ShiftClass", this._ShiftClass, value);
                this._ShiftClass = value;
            }
        }
        
        public string MaterCode {
            get {
                return this._MaterCode;
            }
            set {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }
        
        public global::System.Int32? RubType {
            get {
                return this._RubType;
            }
            set {
                this.OnPropertyChanged("RubType", this._RubType, value);
                this._RubType = value;
            }
        }
        
        public global::System.Int32? StartId {
            get {
                return this._StartId;
            }
            set {
                this.OnPropertyChanged("StartId", this._StartId, value);
                this._StartId = value;
            }
        }
        
        public global::System.Int32? EndId {
            get {
                return this._EndId;
            }
            set {
                this.OnPropertyChanged("EndId", this._EndId, value);
                this._EndId = value;
            }
        }
        
        public global::System.Int32? RuleId {
            get {
                return this._RuleId;
            }
            set {
                this.OnPropertyChanged("RuleId", this._RuleId, value);
                this._RuleId = value;
            }
        }
        
        public global::System.Int32? RuleVision {
            get {
                return this._RuleVision;
            }
            set {
                this.OnPropertyChanged("RuleVision", this._RuleVision, value);
                this._RuleVision = value;
            }
        }
        
        public global::System.Int32? StandId {
            get {
                return this._StandId;
            }
            set {
                this.OnPropertyChanged("StandId", this._StandId, value);
                this._StandId = value;
            }
        }
        
        public global::System.Int32? StandVision {
            get {
                return this._StandVision;
            }
            set {
                this.OnPropertyChanged("StandVision", this._StandVision, value);
                this._StandVision = value;
            }
        }
        
        public string CheckDate {
            get {
                return this._CheckDate;
            }
            set {
                this.OnPropertyChanged("CheckDate", this._CheckDate, value);
                this._CheckDate = value;
            }
        }
        
        public string ShiftCheckId {
            get {
                return this._ShiftCheckId;
            }
            set {
                this.OnPropertyChanged("ShiftCheckId", this._ShiftCheckId, value);
                this._ShiftCheckId = value;
            }
        }
        
        public string ShiftCheckGroupID {
            get {
                return this._ShiftCheckGroupID;
            }
            set {
                this.OnPropertyChanged("ShiftCheckGroupID", this._ShiftCheckGroupID, value);
                this._ShiftCheckGroupID = value;
            }
        }
        
        public string WorkerBarcode {
            get {
                return this._WorkerBarcode;
            }
            set {
                this.OnPropertyChanged("WorkerBarcode", this._WorkerBarcode, value);
                this._WorkerBarcode = value;
            }
        }
        
        public string AuditCode {
            get {
                return this._AuditCode;
            }
            set {
                this.OnPropertyChanged("AuditCode", this._AuditCode, value);
                this._AuditCode = value;
            }
        }
        
        public global::System.Int32? AuditMark {
            get {
                return this._AuditMark;
            }
            set {
                this.OnPropertyChanged("AuditMark", this._AuditMark, value);
                this._AuditMark = value;
            }
        }
        
        public string JudgeMemo {
            get {
                return this._JudgeMemo;
            }
            set {
                this.OnPropertyChanged("JudgeMemo", this._JudgeMemo, value);
                this._JudgeMemo = value;
            }
        }
        
        public string IfJudge {
            get {
                return this._IfJudge;
            }
            set {
                this.OnPropertyChanged("IfJudge", this._IfJudge, value);
                this._IfJudge = value;
            }
        }
        
        public global::System.DateTime? LastChangeTime {
            get {
                return this._LastChangeTime;
            }
            set {
                this.OnPropertyChanged("LastChangeTime", this._LastChangeTime, value);
                this._LastChangeTime = value;
            }
        }
        
        public global::System.Int32? StandCode {
            get {
                return this._StandCode;
            }
            set {
                this.OnPropertyChanged("StandCode", this._StandCode, value);
                this._StandCode = value;
            }
        }
        
        public global::System.Int32? CPFLAG {
            get {
                return this._CPFLAG;
            }
            set {
                this.OnPropertyChanged("CPFLAG", this._CPFLAG, value);
                this._CPFLAG = value;
            }
        }
        
        public string BatchNo {
            get {
                return this._BatchNo;
            }
            set {
                this.OnPropertyChanged("BatchNo", this._BatchNo, value);
                this._BatchNo = value;
            }
        }
        
        public string ZJSID {
            get {
                return this._ZJSID;
            }
            set {
                this.OnPropertyChanged("ZJSID", this._ZJSID, value);
                this._ZJSID = value;
            }
        }
        
        public string CheckPlanDate {
            get {
                return this._CheckPlanDate;
            }
            set {
                this.OnPropertyChanged("CheckPlanDate", this._CheckPlanDate, value);
                this._CheckPlanDate = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmtCheckMaster._QmtCheckMasterEntityConfiguration == null)) {
                QmtCheckMaster._QmtCheckMasterEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmtCheckMaster");
            }
            return QmtCheckMaster._QmtCheckMasterEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._CheckCode,
                    this._PlanDate,
                    this._EquipCode,
                    this._ShiftId,
                    this._ShiftClass,
                    this._MaterCode,
                    this._RubType,
                    this._StartId,
                    this._EndId,
                    this._RuleId,
                    this._RuleVision,
                    this._StandId,
                    this._StandVision,
                    this._CheckDate,
                    this._ShiftCheckId,
                    this._ShiftCheckGroupID,
                    this._WorkerBarcode,
                    this._AuditCode,
                    this._AuditMark,
                    this._JudgeMemo,
                    this._IfJudge,
                    this._LastChangeTime,
                    this._StandCode,
                    this._CPFLAG,
                    this._BatchNo,
                    this._ZJSID,
                    this._CheckPlanDate};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._CheckCode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PlanDate = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ShiftId = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ShiftClass = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._MaterCode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._RubType = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._StartId = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._EndId = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._RuleId = reader.GetInt32(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._RuleVision = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._StandId = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._StandVision = reader.GetInt32(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._CheckDate = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._ShiftCheckId = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._ShiftCheckGroupID = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._WorkerBarcode = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._AuditCode = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._AuditMark = reader.GetInt32(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._JudgeMemo = reader.GetString(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._IfJudge = reader.GetString(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._LastChangeTime = this.GetDateTime(reader, 21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._StandCode = reader.GetInt32(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._CPFLAG = reader.GetInt32(23);
            }
            if ((false == reader.IsDBNull(24))) {
                this._BatchNo = reader.GetString(24);
            }
            if ((false == reader.IsDBNull(25))) {
                this._ZJSID = reader.GetString(25);
            }
            if ((false == reader.IsDBNull(26))) {
                this._CheckPlanDate = reader.GetString(26);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._CheckCode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PlanDate = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ShiftId = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ShiftClass = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._MaterCode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._RubType = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._StartId = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._EndId = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._RuleId = ((System.Nullable<int>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._RuleVision = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._StandId = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._StandVision = ((System.Nullable<int>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._CheckDate = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._ShiftCheckId = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._ShiftCheckGroupID = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._WorkerBarcode = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._AuditCode = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._AuditMark = ((System.Nullable<int>)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._JudgeMemo = ((string)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._IfJudge = ((string)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._LastChangeTime = this.GetDateTime(row, 21);
            }
            if ((false == row.IsNull(22))) {
                this._StandCode = ((System.Nullable<int>)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._CPFLAG = ((System.Nullable<int>)(row[23]));
            }
            if ((false == row.IsNull(24))) {
                this._BatchNo = ((string)(row[24]));
            }
            if ((false == row.IsNull(25))) {
                this._ZJSID = ((string)(row[25]));
            }
            if ((false == row.IsNull(26))) {
                this._CheckPlanDate = ((string)(row[26]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmtCheckMaster).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmtCheckMaster)(obj)).isAttached) 
                        && (this.CheckCode == ((global::Mesnac.Entity.QmtCheckMaster)(obj)).CheckCode));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _CheckCode = new NBear.Common.PropertyItem("CheckCode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _ShiftId = new NBear.Common.PropertyItem("ShiftId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _ShiftClass = new NBear.Common.PropertyItem("ShiftClass", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _RubType = new NBear.Common.PropertyItem("RubType", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _StartId = new NBear.Common.PropertyItem("StartId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _EndId = new NBear.Common.PropertyItem("EndId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _RuleId = new NBear.Common.PropertyItem("RuleId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _RuleVision = new NBear.Common.PropertyItem("RuleVision", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _StandId = new NBear.Common.PropertyItem("StandId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _StandVision = new NBear.Common.PropertyItem("StandVision", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _CheckDate = new NBear.Common.PropertyItem("CheckDate", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _ShiftCheckId = new NBear.Common.PropertyItem("ShiftCheckId", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _ShiftCheckGroupID = new NBear.Common.PropertyItem("ShiftCheckGroupID", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _WorkerBarcode = new NBear.Common.PropertyItem("WorkerBarcode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _AuditCode = new NBear.Common.PropertyItem("AuditCode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _AuditMark = new NBear.Common.PropertyItem("AuditMark", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _JudgeMemo = new NBear.Common.PropertyItem("JudgeMemo", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _IfJudge = new NBear.Common.PropertyItem("IfJudge", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _LastChangeTime = new NBear.Common.PropertyItem("LastChangeTime", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _StandCode = new NBear.Common.PropertyItem("StandCode", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _CPFLAG = new NBear.Common.PropertyItem("CPFLAG", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _BatchNo = new NBear.Common.PropertyItem("BatchNo", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _ZJSID = new NBear.Common.PropertyItem("ZJSID", "Mesnac.Entity.QmtCheckMaster");
            
            protected NBear.Common.PropertyItem _CheckPlanDate = new NBear.Common.PropertyItem("CheckPlanDate", "Mesnac.Entity.QmtCheckMaster");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem CheckCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckCode", _CheckCode.EntityConfiguration, _CheckCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftId {
                get {
                    if ((aliasName == null)) {
                        return _ShiftId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftId", _ShiftId.EntityConfiguration, _ShiftId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftClass {
                get {
                    if ((aliasName == null)) {
                        return _ShiftClass;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftClass", _ShiftClass.EntityConfiguration, _ShiftClass.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubType {
                get {
                    if ((aliasName == null)) {
                        return _RubType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubType", _RubType.EntityConfiguration, _RubType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartId {
                get {
                    if ((aliasName == null)) {
                        return _StartId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartId", _StartId.EntityConfiguration, _StartId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EndId {
                get {
                    if ((aliasName == null)) {
                        return _EndId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EndId", _EndId.EntityConfiguration, _EndId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RuleId {
                get {
                    if ((aliasName == null)) {
                        return _RuleId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RuleId", _RuleId.EntityConfiguration, _RuleId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RuleVision {
                get {
                    if ((aliasName == null)) {
                        return _RuleVision;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RuleVision", _RuleVision.EntityConfiguration, _RuleVision.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandId {
                get {
                    if ((aliasName == null)) {
                        return _StandId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandId", _StandId.EntityConfiguration, _StandId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandVision {
                get {
                    if ((aliasName == null)) {
                        return _StandVision;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandVision", _StandVision.EntityConfiguration, _StandVision.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckDate {
                get {
                    if ((aliasName == null)) {
                        return _CheckDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckDate", _CheckDate.EntityConfiguration, _CheckDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftCheckId {
                get {
                    if ((aliasName == null)) {
                        return _ShiftCheckId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftCheckId", _ShiftCheckId.EntityConfiguration, _ShiftCheckId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftCheckGroupID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftCheckGroupID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftCheckGroupID", _ShiftCheckGroupID.EntityConfiguration, _ShiftCheckGroupID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkerBarcode {
                get {
                    if ((aliasName == null)) {
                        return _WorkerBarcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkerBarcode", _WorkerBarcode.EntityConfiguration, _WorkerBarcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AuditCode {
                get {
                    if ((aliasName == null)) {
                        return _AuditCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AuditCode", _AuditCode.EntityConfiguration, _AuditCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AuditMark {
                get {
                    if ((aliasName == null)) {
                        return _AuditMark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AuditMark", _AuditMark.EntityConfiguration, _AuditMark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem JudgeMemo {
                get {
                    if ((aliasName == null)) {
                        return _JudgeMemo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("JudgeMemo", _JudgeMemo.EntityConfiguration, _JudgeMemo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfJudge {
                get {
                    if ((aliasName == null)) {
                        return _IfJudge;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfJudge", _IfJudge.EntityConfiguration, _IfJudge.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastChangeTime {
                get {
                    if ((aliasName == null)) {
                        return _LastChangeTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastChangeTime", _LastChangeTime.EntityConfiguration, _LastChangeTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandCode {
                get {
                    if ((aliasName == null)) {
                        return _StandCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandCode", _StandCode.EntityConfiguration, _StandCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CPFLAG {
                get {
                    if ((aliasName == null)) {
                        return _CPFLAG;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CPFLAG", _CPFLAG.EntityConfiguration, _CPFLAG.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BatchNo {
                get {
                    if ((aliasName == null)) {
                        return _BatchNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BatchNo", _BatchNo.EntityConfiguration, _BatchNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ZJSID {
                get {
                    if ((aliasName == null)) {
                        return _ZJSID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ZJSID", _ZJSID.EntityConfiguration, _ZJSID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckPlanDate {
                get {
                    if ((aliasName == null)) {
                        return _CheckPlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckPlanDate", _CheckPlanDate.EntityConfiguration, _CheckPlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
