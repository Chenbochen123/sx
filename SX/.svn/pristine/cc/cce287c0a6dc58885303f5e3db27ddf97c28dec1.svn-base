//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Pmt_equipclassArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Pmt_equipclass> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Pmt_equipclass\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"Pmt_equipclass\" batchSize=\"10" +
        "\">\r\n  <Properties>\r\n    <Property name=\"Equip_class\" type=\"System.String\" isInhe" +
        "rited=\"false\" sqlDefaultValue=\"\' \'\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"Equip_class\" mappingColumnType=\"System.String\" sql" +
        "Type=\"char(2)\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Equi" +
        "p_classname\" type=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"\' \'\" isRe" +
        "adOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Equip_clas" +
        "sname\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(10)\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isIn" +
        "herited=\"false\" sqlDefaultValue=\"\' \'\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"nvarchar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</E" +
        "ntityConfiguration>")]
    public partial class Pmt_equipclass : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Pmt_equipclassEntityConfiguration;
        
        protected string _Equip_class;
        
        protected string _Equip_classname;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Pmt_equipclass left, global::Mesnac.Entity.Pmt_equipclass right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Pmt_equipclass left, global::Mesnac.Entity.Pmt_equipclass right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Equip_class {
            get {
                return this._Equip_class;
            }
            set {
                this.OnPropertyChanged("Equip_class", this._Equip_class, value);
                this._Equip_class = value;
            }
        }
        
        public string Equip_classname {
            get {
                return this._Equip_classname;
            }
            set {
                this.OnPropertyChanged("Equip_classname", this._Equip_classname, value);
                this._Equip_classname = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Pmt_equipclass._Pmt_equipclassEntityConfiguration == null)) {
                Pmt_equipclass._Pmt_equipclassEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Pmt_equipclass");
            }
            return Pmt_equipclass._Pmt_equipclassEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Equip_class,
                    this._Equip_classname,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Equip_class = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Equip_classname = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Remark = reader.GetString(2);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Equip_class = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Equip_classname = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Remark = ((string)(row[2]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Pmt_equipclass).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Pmt_equipclass)(obj)).isAttached) 
                        && (this.Equip_class == ((global::Mesnac.Entity.Pmt_equipclass)(obj)).Equip_class));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Equip_class = new NBear.Common.PropertyItem("Equip_class", "Mesnac.Entity.Pmt_equipclass");
            
            protected NBear.Common.PropertyItem _Equip_classname = new NBear.Common.PropertyItem("Equip_classname", "Mesnac.Entity.Pmt_equipclass");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.Pmt_equipclass");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Equip_class {
                get {
                    if ((aliasName == null)) {
                        return _Equip_class;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Equip_class", _Equip_class.EntityConfiguration, _Equip_class.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Equip_classname {
                get {
                    if ((aliasName == null)) {
                        return _Equip_classname;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Equip_classname", _Equip_classname.EntityConfiguration, _Equip_classname.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
