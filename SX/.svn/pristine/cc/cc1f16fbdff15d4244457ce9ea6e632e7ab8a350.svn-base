//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class SysTaskRemindArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.SysTaskRemind> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.SysTaskRemind\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBa" +
        "tchUpdate=\"false\" isRelation=\"false\" mappingName=\"SysTaskRemind\" batchSize=\"10\">" +
        "\r\n  <Properties>\r\n    <Property name=\"EventID\" type=\"System.Int64\" isInherited=\"" +
        "false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "EventID\" mappingColumnType=\"System.Int64\" sqlType=\"bigint\" isPrimaryKey=\"true\" i" +
        "sNotNull=\"true\" />\r\n    <Property name=\"EventName\" type=\"System.String\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"EventName\" mappingColumnType=\"System.String\" sqlType=\"varchar(200)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StartDate\" type=\"System" +
        ".Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"StartDate\" mappingColumnType=\"System" +
        ".Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"EndDate\" type=\"System.Nullable`1[System.DateTime" +
        "]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"EndDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\"" +
        " sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"Details\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"Details\" mappingColumnType=\"Syste" +
        "m.String\" sqlType=\"text\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"CreateUser\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CreateUser\" mappingColumn" +
        "Type=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"ReceiveUser\" type=\"System.String\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Recei" +
        "veUser\" mappingColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"Color\" type=\"System.String\" isIn" +
        "herited=\"false\" sqlDefaultValue=\"N\'yellow\'\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"Color\" mappingColumnType=\"System.String\" s" +
        "qlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"XYZ\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"XYZ\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColum" +
        "nType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"varchar(200)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class SysTaskRemind : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _SysTaskRemindEntityConfiguration;
        
        protected long _EventID;
        
        protected string _EventName;
        
        protected global::System.DateTime? _StartDate;
        
        protected global::System.DateTime? _EndDate;
        
        protected string _Details;
        
        protected string _CreateUser;
        
        protected string _ReceiveUser;
        
        protected string _Color;
        
        protected string _XYZ;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.SysTaskRemind left, global::Mesnac.Entity.SysTaskRemind right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.SysTaskRemind left, global::Mesnac.Entity.SysTaskRemind right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public long EventID {
            get {
                return this._EventID;
            }
            set {
                this.OnPropertyChanged("EventID", this._EventID, value);
                this._EventID = value;
            }
        }
        
        public string EventName {
            get {
                return this._EventName;
            }
            set {
                this.OnPropertyChanged("EventName", this._EventName, value);
                this._EventName = value;
            }
        }
        
        public global::System.DateTime? StartDate {
            get {
                return this._StartDate;
            }
            set {
                this.OnPropertyChanged("StartDate", this._StartDate, value);
                this._StartDate = value;
            }
        }
        
        public global::System.DateTime? EndDate {
            get {
                return this._EndDate;
            }
            set {
                this.OnPropertyChanged("EndDate", this._EndDate, value);
                this._EndDate = value;
            }
        }
        
        public string Details {
            get {
                return this._Details;
            }
            set {
                this.OnPropertyChanged("Details", this._Details, value);
                this._Details = value;
            }
        }
        
        public string CreateUser {
            get {
                return this._CreateUser;
            }
            set {
                this.OnPropertyChanged("CreateUser", this._CreateUser, value);
                this._CreateUser = value;
            }
        }
        
        public string ReceiveUser {
            get {
                return this._ReceiveUser;
            }
            set {
                this.OnPropertyChanged("ReceiveUser", this._ReceiveUser, value);
                this._ReceiveUser = value;
            }
        }
        
        public string Color {
            get {
                return this._Color;
            }
            set {
                this.OnPropertyChanged("Color", this._Color, value);
                this._Color = value;
            }
        }
        
        public string XYZ {
            get {
                return this._XYZ;
            }
            set {
                this.OnPropertyChanged("XYZ", this._XYZ, value);
                this._XYZ = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((SysTaskRemind._SysTaskRemindEntityConfiguration == null)) {
                SysTaskRemind._SysTaskRemindEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.SysTaskRemind");
            }
            return SysTaskRemind._SysTaskRemindEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._EventID,
                    this._EventName,
                    this._StartDate,
                    this._EndDate,
                    this._Details,
                    this._CreateUser,
                    this._ReceiveUser,
                    this._Color,
                    this._XYZ,
                    this._DeleteFlag,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._EventID = reader.GetInt64(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._EventName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._StartDate = this.GetDateTime(reader, 2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EndDate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Details = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._CreateUser = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ReceiveUser = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Color = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._XYZ = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._DeleteFlag = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Remark = reader.GetString(10);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._EventID = ((long)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._EventName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._StartDate = this.GetDateTime(row, 2);
            }
            if ((false == row.IsNull(3))) {
                this._EndDate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4))) {
                this._Details = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._CreateUser = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._ReceiveUser = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Color = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._XYZ = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._DeleteFlag = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._Remark = ((string)(row[10]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.SysTaskRemind).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.SysTaskRemind)(obj)).isAttached) 
                        && (this.EventID == ((global::Mesnac.Entity.SysTaskRemind)(obj)).EventID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _EventID = new NBear.Common.PropertyItem("EventID", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _EventName = new NBear.Common.PropertyItem("EventName", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _StartDate = new NBear.Common.PropertyItem("StartDate", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _EndDate = new NBear.Common.PropertyItem("EndDate", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _Details = new NBear.Common.PropertyItem("Details", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _CreateUser = new NBear.Common.PropertyItem("CreateUser", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _ReceiveUser = new NBear.Common.PropertyItem("ReceiveUser", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _Color = new NBear.Common.PropertyItem("Color", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _XYZ = new NBear.Common.PropertyItem("XYZ", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.SysTaskRemind");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.SysTaskRemind");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem EventID {
                get {
                    if ((aliasName == null)) {
                        return _EventID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EventID", _EventID.EntityConfiguration, _EventID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EventName {
                get {
                    if ((aliasName == null)) {
                        return _EventName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EventName", _EventName.EntityConfiguration, _EventName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartDate {
                get {
                    if ((aliasName == null)) {
                        return _StartDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartDate", _StartDate.EntityConfiguration, _StartDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EndDate {
                get {
                    if ((aliasName == null)) {
                        return _EndDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EndDate", _EndDate.EntityConfiguration, _EndDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Details {
                get {
                    if ((aliasName == null)) {
                        return _Details;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Details", _Details.EntityConfiguration, _Details.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreateUser {
                get {
                    if ((aliasName == null)) {
                        return _CreateUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreateUser", _CreateUser.EntityConfiguration, _CreateUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ReceiveUser {
                get {
                    if ((aliasName == null)) {
                        return _ReceiveUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ReceiveUser", _ReceiveUser.EntityConfiguration, _ReceiveUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Color {
                get {
                    if ((aliasName == null)) {
                        return _Color;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Color", _Color.EntityConfiguration, _Color.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem XYZ {
                get {
                    if ((aliasName == null)) {
                        return _XYZ;
                    }
                    else {
                        return new NBear.Common.PropertyItem("XYZ", _XYZ.EntityConfiguration, _XYZ.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
