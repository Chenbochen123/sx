//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PpmRubberStoreinArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubberStorein> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmRubberStorein\" isReadOnly=\"false\" isAutoPreLoad=\"false\" i" +
        "sBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubberStorein\" batchSize" +
        "=\"10\">\r\n  <Properties>\r\n    <Property name=\"BillNo\" type=\"System.String\" isInher" +
        "ited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"BillNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimar" +
        "yKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"StorageID\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"StorageID\" mappingColumnType=\"System.String\" sqlType=\"nvarcha" +
        "r(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"BillType\" " +
        "type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"BillType\" mappingColumnType=\"System.String\" s" +
        "qlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "FactoryID\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"FactoryID\" mappi" +
        "ngColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"InputPerson\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"InputPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)" +
        "\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"InputDate\" type" +
        "=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"InputDate\" mappingColumnType" +
        "=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"InaccountDuration\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"InaccountDuration\" mappingColumnType=\"System.String\" sqlType=\"nvar" +
        "char(6)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LockedFl" +
        "ag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"LockedFlag\" mappingColumnType=\"System.Str" +
        "ing\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"FiledFlag\" type=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"(0)\" " +
        "isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" is" +
        "FriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fals" +
        "e\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"FiledF" +
        "lag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"MakerPerson\" type=\"System.String\" isInhe" +
        "rited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"MakerPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkResultFlag\" type" +
        "=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"ChkResultFlag\" mappingColum" +
        "nType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"ChkPerson\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ChkPerson\" " +
        "mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"ChkDate\" type=\"System.Nullable`1[System." +
        "DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"ChkDate\" mappingColumnType=\"System.Nullable`1[System.Da" +
        "teTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" sqlDefaultValue=" +
        "\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IsFeedBack\" type=\"Sys" +
        "tem.String\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"IsFeedBack\" mappingColumnType=\"S" +
        "ystem.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </P" +
        "roperties>\r\n</EntityConfiguration>")]
    public partial class PpmRubberStorein : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PpmRubberStoreinEntityConfiguration;
        
        protected string _BillNo;
        
        protected string _StorageID;
        
        protected string _BillType;
        
        protected global::System.Int32? _FactoryID;
        
        protected string _InputPerson;
        
        protected global::System.DateTime? _InputDate;
        
        protected string _InaccountDuration;
        
        protected string _LockedFlag;
        
        protected string _FiledFlag;
        
        protected string _MakerPerson;
        
        protected string _ChkResultFlag;
        
        protected string _ChkPerson;
        
        protected global::System.DateTime? _ChkDate;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        protected string _IsFeedBack;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PpmRubberStorein left, global::Mesnac.Entity.PpmRubberStorein right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PpmRubberStorein left, global::Mesnac.Entity.PpmRubberStorein right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string BillNo {
            get {
                return this._BillNo;
            }
            set {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }
        
        public string StorageID {
            get {
                return this._StorageID;
            }
            set {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }
        
        public string BillType {
            get {
                return this._BillType;
            }
            set {
                this.OnPropertyChanged("BillType", this._BillType, value);
                this._BillType = value;
            }
        }
        
        public global::System.Int32? FactoryID {
            get {
                return this._FactoryID;
            }
            set {
                this.OnPropertyChanged("FactoryID", this._FactoryID, value);
                this._FactoryID = value;
            }
        }
        
        public string InputPerson {
            get {
                return this._InputPerson;
            }
            set {
                this.OnPropertyChanged("InputPerson", this._InputPerson, value);
                this._InputPerson = value;
            }
        }
        
        public global::System.DateTime? InputDate {
            get {
                return this._InputDate;
            }
            set {
                this.OnPropertyChanged("InputDate", this._InputDate, value);
                this._InputDate = value;
            }
        }
        
        public string InaccountDuration {
            get {
                return this._InaccountDuration;
            }
            set {
                this.OnPropertyChanged("InaccountDuration", this._InaccountDuration, value);
                this._InaccountDuration = value;
            }
        }
        
        public string LockedFlag {
            get {
                return this._LockedFlag;
            }
            set {
                this.OnPropertyChanged("LockedFlag", this._LockedFlag, value);
                this._LockedFlag = value;
            }
        }
        
        public string FiledFlag {
            get {
                return this._FiledFlag;
            }
            set {
                this.OnPropertyChanged("FiledFlag", this._FiledFlag, value);
                this._FiledFlag = value;
            }
        }
        
        public string MakerPerson {
            get {
                return this._MakerPerson;
            }
            set {
                this.OnPropertyChanged("MakerPerson", this._MakerPerson, value);
                this._MakerPerson = value;
            }
        }
        
        public string ChkResultFlag {
            get {
                return this._ChkResultFlag;
            }
            set {
                this.OnPropertyChanged("ChkResultFlag", this._ChkResultFlag, value);
                this._ChkResultFlag = value;
            }
        }
        
        public string ChkPerson {
            get {
                return this._ChkPerson;
            }
            set {
                this.OnPropertyChanged("ChkPerson", this._ChkPerson, value);
                this._ChkPerson = value;
            }
        }
        
        public global::System.DateTime? ChkDate {
            get {
                return this._ChkDate;
            }
            set {
                this.OnPropertyChanged("ChkDate", this._ChkDate, value);
                this._ChkDate = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string IsFeedBack {
            get {
                return this._IsFeedBack;
            }
            set {
                this.OnPropertyChanged("IsFeedBack", this._IsFeedBack, value);
                this._IsFeedBack = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PpmRubberStorein._PpmRubberStoreinEntityConfiguration == null)) {
                PpmRubberStorein._PpmRubberStoreinEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubberStorein");
            }
            return PpmRubberStorein._PpmRubberStoreinEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._BillNo,
                    this._StorageID,
                    this._BillType,
                    this._FactoryID,
                    this._InputPerson,
                    this._InputDate,
                    this._InaccountDuration,
                    this._LockedFlag,
                    this._FiledFlag,
                    this._MakerPerson,
                    this._ChkResultFlag,
                    this._ChkPerson,
                    this._ChkDate,
                    this._DeleteFlag,
                    this._Remark,
                    this._IsFeedBack};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._BillNo = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StorageID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._BillType = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._FactoryID = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._InputPerson = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._InputDate = this.GetDateTime(reader, 5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._InaccountDuration = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._LockedFlag = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._FiledFlag = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MakerPerson = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._ChkResultFlag = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._ChkPerson = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._ChkDate = this.GetDateTime(reader, 12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._DeleteFlag = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._Remark = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._IsFeedBack = reader.GetString(15);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._BillNo = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StorageID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._BillType = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._FactoryID = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._InputPerson = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._InputDate = this.GetDateTime(row, 5);
            }
            if ((false == row.IsNull(6))) {
                this._InaccountDuration = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._LockedFlag = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._FiledFlag = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MakerPerson = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._ChkResultFlag = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._ChkPerson = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._ChkDate = this.GetDateTime(row, 12);
            }
            if ((false == row.IsNull(13))) {
                this._DeleteFlag = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._Remark = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._IsFeedBack = ((string)(row[15]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubberStorein).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubberStorein)(obj)).isAttached) 
                        && (this.BillNo == ((global::Mesnac.Entity.PpmRubberStorein)(obj)).BillNo));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _BillType = new NBear.Common.PropertyItem("BillType", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _FactoryID = new NBear.Common.PropertyItem("FactoryID", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _InputPerson = new NBear.Common.PropertyItem("InputPerson", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _InputDate = new NBear.Common.PropertyItem("InputDate", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _InaccountDuration = new NBear.Common.PropertyItem("InaccountDuration", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _LockedFlag = new NBear.Common.PropertyItem("LockedFlag", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _FiledFlag = new NBear.Common.PropertyItem("FiledFlag", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _MakerPerson = new NBear.Common.PropertyItem("MakerPerson", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _ChkResultFlag = new NBear.Common.PropertyItem("ChkResultFlag", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _ChkPerson = new NBear.Common.PropertyItem("ChkPerson", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _ChkDate = new NBear.Common.PropertyItem("ChkDate", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PpmRubberStorein");
            
            protected NBear.Common.PropertyItem _IsFeedBack = new NBear.Common.PropertyItem("IsFeedBack", "Mesnac.Entity.PpmRubberStorein");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem BillNo {
                get {
                    if ((aliasName == null)) {
                        return _BillNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageID {
                get {
                    if ((aliasName == null)) {
                        return _StorageID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BillType {
                get {
                    if ((aliasName == null)) {
                        return _BillType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BillType", _BillType.EntityConfiguration, _BillType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FactoryID {
                get {
                    if ((aliasName == null)) {
                        return _FactoryID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FactoryID", _FactoryID.EntityConfiguration, _FactoryID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InputPerson {
                get {
                    if ((aliasName == null)) {
                        return _InputPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InputPerson", _InputPerson.EntityConfiguration, _InputPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InputDate {
                get {
                    if ((aliasName == null)) {
                        return _InputDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InputDate", _InputDate.EntityConfiguration, _InputDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InaccountDuration {
                get {
                    if ((aliasName == null)) {
                        return _InaccountDuration;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InaccountDuration", _InaccountDuration.EntityConfiguration, _InaccountDuration.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LockedFlag {
                get {
                    if ((aliasName == null)) {
                        return _LockedFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LockedFlag", _LockedFlag.EntityConfiguration, _LockedFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FiledFlag {
                get {
                    if ((aliasName == null)) {
                        return _FiledFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FiledFlag", _FiledFlag.EntityConfiguration, _FiledFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MakerPerson {
                get {
                    if ((aliasName == null)) {
                        return _MakerPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MakerPerson", _MakerPerson.EntityConfiguration, _MakerPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkResultFlag {
                get {
                    if ((aliasName == null)) {
                        return _ChkResultFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkResultFlag", _ChkResultFlag.EntityConfiguration, _ChkResultFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkPerson {
                get {
                    if ((aliasName == null)) {
                        return _ChkPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkPerson", _ChkPerson.EntityConfiguration, _ChkPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkDate {
                get {
                    if ((aliasName == null)) {
                        return _ChkDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkDate", _ChkDate.EntityConfiguration, _ChkDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsFeedBack {
                get {
                    if ((aliasName == null)) {
                        return _IsFeedBack;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsFeedBack", _IsFeedBack.EntityConfiguration, _IsFeedBack.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
