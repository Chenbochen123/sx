//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasEquipPartRelationArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasEquipPartRelation> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasEquipPartRelation\" isReadOnly=\"true\" isAutoPreLoad=\"false" +
        "\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"BasEquipPartRelation\" ba" +
        "tchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"ObjID\" mappingColumnType=\"System.String\" sqlType=\"char(6)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PartCode\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"PartCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(1" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipCode\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Equ" +
        "ipType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"EquipType\" mappingColumnType=\"System.S" +
        "tring\" sqlType=\"char(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"EquipAddress\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipAddress\" mappingCol" +
        "umnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"f" +
        "alse\" />\r\n    <Property name=\"LastModifyDate\" type=\"System.String\" isInherited=\"" +
        "false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "LastModifyDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=" +
        "\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityCo" +
        "nfiguration>")]
    public partial class BasEquipPartRelation : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasEquipPartRelationEntityConfiguration;
        
        protected string _ObjID;
        
        protected string _PartCode;
        
        protected string _EquipCode;
        
        protected string _EquipType;
        
        protected string _EquipAddress;
        
        protected string _LastModifyDate;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasEquipPartRelation left, global::Mesnac.Entity.BasEquipPartRelation right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasEquipPartRelation left, global::Mesnac.Entity.BasEquipPartRelation right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string PartCode {
            get {
                return this._PartCode;
            }
            set {
                this.OnPropertyChanged("PartCode", this._PartCode, value);
                this._PartCode = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string EquipType {
            get {
                return this._EquipType;
            }
            set {
                this.OnPropertyChanged("EquipType", this._EquipType, value);
                this._EquipType = value;
            }
        }
        
        public string EquipAddress {
            get {
                return this._EquipAddress;
            }
            set {
                this.OnPropertyChanged("EquipAddress", this._EquipAddress, value);
                this._EquipAddress = value;
            }
        }
        
        public string LastModifyDate {
            get {
                return this._LastModifyDate;
            }
            set {
                this.OnPropertyChanged("LastModifyDate", this._LastModifyDate, value);
                this._LastModifyDate = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasEquipPartRelation._BasEquipPartRelationEntityConfiguration == null)) {
                BasEquipPartRelation._BasEquipPartRelationEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasEquipPartRelation");
            }
            return BasEquipPartRelation._BasEquipPartRelationEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._PartCode,
                    this._EquipCode,
                    this._EquipType,
                    this._EquipAddress,
                    this._LastModifyDate,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PartCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EquipType = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._EquipAddress = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._LastModifyDate = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Remark = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._DeleteFlag = reader.GetString(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PartCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._EquipType = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._EquipAddress = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._LastModifyDate = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Remark = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._DeleteFlag = ((string)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasEquipPartRelation).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasEquipPartRelation)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _PartCode = new NBear.Common.PropertyItem("PartCode", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _EquipType = new NBear.Common.PropertyItem("EquipType", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _EquipAddress = new NBear.Common.PropertyItem("EquipAddress", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _LastModifyDate = new NBear.Common.PropertyItem("LastModifyDate", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasEquipPartRelation");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasEquipPartRelation");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PartCode {
                get {
                    if ((aliasName == null)) {
                        return _PartCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PartCode", _PartCode.EntityConfiguration, _PartCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipType {
                get {
                    if ((aliasName == null)) {
                        return _EquipType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipType", _EquipType.EntityConfiguration, _EquipType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipAddress {
                get {
                    if ((aliasName == null)) {
                        return _EquipAddress;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipAddress", _EquipAddress.EntityConfiguration, _EquipAddress.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastModifyDate {
                get {
                    if ((aliasName == null)) {
                        return _LastModifyDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastModifyDate", _LastModifyDate.EntityConfiguration, _LastModifyDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
