//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class SysUserActionEqualArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.SysUserActionEqual> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.SysUserActionEqual\" isReadOnly=\"false\" isAutoPreLoad=\"false\"" +
        " isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"SysUserActionEqual\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true" +
        "\" isNotNull=\"true\" />\r\n    <Property name=\"User1Code\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"User1Code\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"User2Code\" type=\"Sys" +
        "tem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"User2Code\" mappingColumnType=\"System.String\" sqlType=\"" +
        "nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Rec" +
        "ordTime\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" sqlDefaul" +
        "tValue=\"getdate()\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"RecordTime\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" " +
        "sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n<" +
        "/EntityConfiguration>")]
    public partial class SysUserActionEqual : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _SysUserActionEqualEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _User1Code;
        
        protected string _User2Code;
        
        protected global::System.DateTime? _RecordTime;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.SysUserActionEqual left, global::Mesnac.Entity.SysUserActionEqual right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.SysUserActionEqual left, global::Mesnac.Entity.SysUserActionEqual right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string User1Code {
            get {
                return this._User1Code;
            }
            set {
                this.OnPropertyChanged("User1Code", this._User1Code, value);
                this._User1Code = value;
            }
        }
        
        public string User2Code {
            get {
                return this._User2Code;
            }
            set {
                this.OnPropertyChanged("User2Code", this._User2Code, value);
                this._User2Code = value;
            }
        }
        
        public global::System.DateTime? RecordTime {
            get {
                return this._RecordTime;
            }
            set {
                this.OnPropertyChanged("RecordTime", this._RecordTime, value);
                this._RecordTime = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((SysUserActionEqual._SysUserActionEqualEntityConfiguration == null)) {
                SysUserActionEqual._SysUserActionEqualEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.SysUserActionEqual");
            }
            return SysUserActionEqual._SysUserActionEqualEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._User1Code,
                    this._User2Code,
                    this._RecordTime};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._User1Code = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._User2Code = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._RecordTime = this.GetDateTime(reader, 3);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._User1Code = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._User2Code = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._RecordTime = this.GetDateTime(row, 3);
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.SysUserActionEqual).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.SysUserActionEqual)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.SysUserActionEqual)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.SysUserActionEqual");
            
            protected NBear.Common.PropertyItem _User1Code = new NBear.Common.PropertyItem("User1Code", "Mesnac.Entity.SysUserActionEqual");
            
            protected NBear.Common.PropertyItem _User2Code = new NBear.Common.PropertyItem("User2Code", "Mesnac.Entity.SysUserActionEqual");
            
            protected NBear.Common.PropertyItem _RecordTime = new NBear.Common.PropertyItem("RecordTime", "Mesnac.Entity.SysUserActionEqual");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem User1Code {
                get {
                    if ((aliasName == null)) {
                        return _User1Code;
                    }
                    else {
                        return new NBear.Common.PropertyItem("User1Code", _User1Code.EntityConfiguration, _User1Code.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem User2Code {
                get {
                    if ((aliasName == null)) {
                        return _User2Code;
                    }
                    else {
                        return new NBear.Common.PropertyItem("User2Code", _User2Code.EntityConfiguration, _User2Code.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordTime {
                get {
                    if ((aliasName == null)) {
                        return _RecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordTime", _RecordTime.EntityConfiguration, _RecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
