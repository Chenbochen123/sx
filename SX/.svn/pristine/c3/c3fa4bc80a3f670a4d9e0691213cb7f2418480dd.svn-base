using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Mesnac.Entity;
using Ext.Net;
using Mesnac.Business.Implements;
using NBear.Common;
using System.Text.RegularExpressions;
using Mesnac.Data.Components;
using System.Data;
using System.Text;

public partial class Manager_Equipment_Lubrication_LubricationStandards : Mesnac.Web.UI.Page
{
    BasEquipManager baseEquipManager = new BasEquipManager();

    protected SysCodeManager sysCodeManager = new SysCodeManager();
    protected Pmt_equipclassManager equipClassManager = new Pmt_equipclassManager();
    protected Pmt_equipManager equipManager = new Pmt_equipManager();
    protected Eqm_lubeManager lubeTypeManager = new Eqm_lubeManager();
    protected Eqm_MpParamManager typeMainManager = new Eqm_MpParamManager();
    protected Eqm_lubeStandManager manager = new Eqm_lubeStandManager();
    protected SYS_USERManager userManager = new SYS_USERManager();
    protected JCZL_WorkShopManager workshopManager = new JCZL_WorkShopManager();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!X.IsAjaxRequest)
        {
            InitTreeDept();

            bindList();
            bindEquipClass();
            bindlubeType();
            bindEquip();

            this.winSave.Hidden = true;
            this.winCopy.Hidden = true;
        }
    }


    #region 初始化控件
    private void bindEquipClass()
    {
        cbxEquipClass.Clear();
        WhereClip where = new WhereClip();
        EntityArrayList<Pmt_equipclass> list = equipClassManager.GetListByWhereAndOrder(where, Pmt_equipclass._.Equip_class.Asc);
        foreach (Pmt_equipclass equipClass in list)
        {
            Ext.Net.ListItem item = new Ext.Net.ListItem(equipClass.Equip_classname, equipClass.Equip_class);
            cbxEquipClass.Items.Add(item);
        }
    }
    private void bindEquip()
    {
        cbxEquip.Clear();
        WhereClip where = new WhereClip();
        EntityArrayList<Pmt_equip> list = equipManager.GetListByWhereAndOrder(where, Pmt_equip._.Equip_code.Asc);
        foreach (Pmt_equip equip in list)
        {
            Ext.Net.ListItem item = new Ext.Net.ListItem(equip.Equip_name, equip.Equip_code);
            cbxEquip.Items.Add(item);
        }

        this.storeEquipCopy.DataSource = list;
        this.storeEquipCopy.DataBind();
    }
    private void bindlubeType()
    {
        cbxlubeType.Clear();
        WhereClip where = new WhereClip();
        EntityArrayList<Eqm_lube> list = lubeTypeManager.GetListByWhereAndOrder(where, Eqm_lube._.Oil_code.Asc);
        foreach (Eqm_lube lubeType in list)
        {
            Ext.Net.ListItem item = new Ext.Net.ListItem(lubeType.Oil_name, lubeType.Oil_code);
            cbxlubeType.Items.Add(item);
        }
    }
    private void changeEquipClass()
    {
        object value = cbxEquip.SelectedItem.Value;
        cbxEquip.Clear();
        EntityArrayList<Pmt_equip> list = equipManager.GetListByWhereAndOrder(Pmt_equip._.Equip_class == cbxEquipClass.SelectedItem.Value, Pmt_equip._.Equip_code.Asc);
        this.storeEquip.DataSource = list;
        this.storeEquip.DataBind();
        cbxEquip.SetValue(value);
    }
    private void changeEquip()
    {
        if(cbxEquip.SelectedItem.Value != null)
        {
            EntityArrayList<Pmt_equip> listEquip = equipManager.GetListByWhereAndOrder(Pmt_equip._.Equip_code == cbxEquip.SelectedItem.Value, Pmt_equip._.Equip_code.Asc);
            EntityArrayList<JCZL_WorkShop> listShop = workshopManager.GetListByWhereAndOrder(JCZL_WorkShop._.WorkShop_Code == listEquip[0].WorkShop_Code, JCZL_WorkShop._.WorkShop_Code.Asc);
            txtWorkShop.Text = listShop[0].WorkShop_Name;
        }

    }


    private void changeEquipCopy()
    {
        EntityArrayList<Eqm_lubeStand> list = manager.GetListByWhereAndOrder(Eqm_lubeStand._.Equip_code == cbxEquipCopy.SelectedItem.Value, Eqm_lubeStand._.Lube_name.Asc);
        this.storeEquipTypeCopy.DataSource = list;
        this.storeEquipTypeCopy.DataBind();
        this.storeEquipTypeCopyTo.DataSource = list;
        this.storeEquipTypeCopyTo.DataBind();

        if (cbxEquipCopy.SelectedItem.Value != null)
        {
            EntityArrayList<Pmt_equip> listEquip = equipManager.GetListByWhereAndOrder(Pmt_equip._.Equip_code == cbxEquipCopy.SelectedItem.Value, Pmt_equip._.Equip_code.Asc);
            EntityArrayList<Pmt_equip> listEquipCopy = equipManager.GetListByWhereAndOrder(Pmt_equip._.Equip_class == listEquip[0].Equip_class, Pmt_equip._.Equip_code.Asc);
            this.storeEquipCopyTo.DataSource = listEquipCopy;
            this.storeEquipCopyTo.DataBind();
        }

    }

    private void changeEquipTypeCopy()
    {
        cbxEquipTypeCopyTo.SetValue(this.cbxEquipTypeCopy.SelectedItem.Value);
    }


    #endregion

    #region 树
    /// <summary>
    /// 初始化机台列表树
    /// </summary>
    private void InitTreeDept()
    {
        treeEquip.GetRootNode().RemoveAll();
        treeEquip.GetRootNode().AppendChild(getTreeNodeByDelLevel());
    }

    /// <summary>
    /// 获取机台树的算法
    /// </summary>
    /// <param name="dep_num"></param>
    /// <returns></returns>
    private Node getTreeNodeByDelLevel()
    {
        Node node = new Node();
        node.NodeID = "0";
        node.Text = "机台分组";
        node.Expanded = true;
        Dictionary<string, string> depChildFristList = new Dictionary<string, string>();
        var query = baseEquipManager.GetListByWhereAndOrder(BasEquip._.EquipType < "03" && BasEquip._.DeleteFlag == 0, BasEquip._.EquipGroup.Asc).GroupBy(pet => pet.EquipGroup).Where(pet => !string.IsNullOrEmpty(pet.Key));
        foreach (var info in query)
        {
            Node childNode = new Node();
            childNode.NodeID = info.Key;
            childNode.Text = info.Key;
            childNode.Expanded = false;
            var child = baseEquipManager.GetListByWhereAndOrder(BasEquip._.EquipGroup == info.Key & BasEquip._.EquipType < "03" && BasEquip._.DeleteFlag == 0, BasEquip._.EquipCode.Asc);
            foreach (var item in child)
            {
                Node nodeLeaf = new Node();
                nodeLeaf.Text = item.EquipName;
                nodeLeaf.Qtip = item.EquipCode;
                nodeLeaf.Leaf = true;
                childNode.Children.Add(nodeLeaf);
            }
            node.Children.Add(childNode);
        }
        return node;
    }
    #endregion


    /// <summary>
    /// 相应点击机台树事件
    /// </summary>
    /// <param name="group"></param>
    [DirectMethod]
    public void LoadGridData(string group)
    {
        //判断当前机台当前时间是否设置班组信息
        //hidden_parent_num.Value = group;
        hidden_equip_code.Text = group;
        this.store.DataSource = getList(group);
        this.store.DataBind();


    }

    private DataSet getList(string equip_Code)
    {

        return GetDataByParas(equip_Code);
    }


    public System.Data.DataSet GetDataByParas(string equip_Code)
    {
        StringBuilder sb = new StringBuilder();
        #region
        sb.AppendLine(@"SELECT T.EquipClassName, T.EquipName,T.Lube_name,T.OilName,CAST(T.Mp_period AS INT) Mp_period,T.Lube_num,T.Unit_name,
						T.Lube_stand,CONVERT(VARCHAR(10),T.Mp_date,120) Mp_date,CONVERT(VARCHAR(10),T.In_date,120) In_date,
						CONVERT(VARCHAR(10),(T.In_date + T.Mp_period),120) Next_date,
                        T5.USER_NAME,T.workshop,T.lube_standId
                        FROM Eqm_lubeStand T
                        LEFT JOIN SYS_USER T5 ON T.Worker_barcode = T5.Worker_barcode");
        sb.AppendLine("WHERE 1=1");
        if (!string.IsNullOrEmpty(equip_Code))
            sb.AppendLine("AND T.Equip_code='" + equip_Code + "'");
        #endregion

        NBear.Data.CustomSqlSection css = manager.GetBySql(sb.ToString());
        return css.ToDataSet();
    }


    private void bindList()
    {
        this.store.DataSource = getList(hidden_equip_code.Text);
        this.store.DataBind();
    }

    #region 按钮事件响应
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        bindList();
    }
    protected void btnExportSubmit_Click(object sender, EventArgs e)
    {
        DataSet ds = getList(hidden_equip_code.Text);
        //huiw,2013-10-28添加，判断不为空时才导出excel
        if (ds == null || ds.Tables[0].Rows.Count == 0)
        {
            X.Msg.Alert("提示", "未查询出数据！").Show();
        }
        else
        {
            for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
            {
                bool isshow = false;
                DataColumn dc = ds.Tables[0].Columns[i];
                foreach (ColumnBase cb in this.pnlList.ColumnModel.Columns)
                {
                    if ((cb.DataIndex != null) && (cb.DataIndex.ToUpper() == dc.ColumnName.ToUpper()))
                    {
                        dc.ColumnName = cb.Text;
                        isshow = true;
                        break;
                    }
                }
                if (!isshow)
                {
                    ds.Tables[0].Columns.Remove(dc.ColumnName);
                    i--;
                }
            }
            new Mesnac.Util.Excel.ExcelDownload().ExcelFileDown(ds, "维修标准定义导出");
        }
    }
    protected void btnAdd_Click(object sender, EventArgs e)
    {
        this.hideMode.Text = "Add";

        cbxEquipClass.SetValue(null);
        cbxEquip.SetValue(null);
        txtLube_name.Text = "";
        cbxlubeType.SetValue(null);
        txtMp_period.Text = "0";
        txtLube_num.Text = "0";
        txtUnit_name.Text = "";
        txtStartDate.SetValue(DateTime.Now.Date);
        txtEndDate.SetValue(DateTime.Now.Date);
        txtMp_stand.Text = "";
        txtWorkShop.Text = "";
        this.winSave.Hidden = false;
    }
    protected void btnCopy_Click(object sender, EventArgs e)
    {
        this.winCopy.Hidden = false;
    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        if (this.hideMode.Text == "Add")//添加
        {
            Eqm_lubeStand record = new Eqm_lubeStand();
            record.Equip_class = cbxEquipClass.SelectedItem.Value.ToString();
            record.EquipClassName = cbxEquipClass.SelectedItem.Text;
            record.Equip_code = cbxEquip.SelectedItem.Value.ToString();
            record.EquipName = cbxEquip.SelectedItem.Text;
            record.Lube_name = txtLube_name.Text;
            record.Oil_code = cbxlubeType.SelectedItem.Value.ToString();
            record.OilName = cbxlubeType.SelectedItem.Text;
            record.Mp_period = Convert.ToDecimal(txtMp_period.Text);
            record.Lube_num = Convert.ToDecimal(txtLube_num.Text);
            record.Unit_name = txtUnit_name.Text;
            record.Workshop = txtWorkShop.Text;
            record.Mp_date = txtStartDate.SelectedDate.ToString("yyyy-MM-dd");
            record.In_date = txtEndDate.SelectedDate;
            record.Lube_stand = txtMp_stand.Text;
            record.Worker_barcode = this.UserID;

            if (manager.Insert(record) >= 0)
            {
                this.AppendWebLog("润滑标准定义添加", "添加机台：" + record.Equip_code);
                winSave.Hidden = true;
                bindList();
                X.Msg.Alert("提示", "添加完成！").Show();
            }
            else
            {
                X.Msg.Alert("提示", "添加失败！").Show();
            }
        }
        else//修改
        {
            Eqm_lubeStand record = manager.GetById(int.Parse(hideObjID.Text));
            if (record != null)
            {
                record.Equip_class = cbxEquipClass.SelectedItem.Value.ToString();
                record.EquipClassName = cbxEquipClass.SelectedItem.Text;
                record.Equip_code = cbxEquip.SelectedItem.Value.ToString();
                record.EquipName = cbxEquip.SelectedItem.Text;
                record.Lube_name = txtLube_name.Text;
                record.Oil_code = cbxlubeType.SelectedItem.Value.ToString();
                record.OilName = cbxlubeType.SelectedItem.Text;
                record.Mp_period = Convert.ToDecimal(txtMp_period.Text);
                record.Lube_num = Convert.ToDecimal(txtLube_num.Text);
                record.Unit_name = txtUnit_name.Text;
                record.Workshop = txtWorkShop.Text;
                record.Mp_date = txtStartDate.SelectedDate.ToString("yyyy-MM-dd");
                record.In_date = txtEndDate.SelectedDate;
                record.Lube_stand = txtMp_stand.Text;
                record.Worker_barcode = this.UserID;

                if (manager.Update(record) >= 0)
                {
                    this.AppendWebLog("润滑标准定义修改", "修改机台：" + record.Equip_code);
                    winSave.Hidden = true;
                    bindList();
                    X.Msg.Alert("提示", "修改完成！").Show();
                }
                else
                {
                    X.Msg.Alert("提示", "修改失败！").Show();
                }
            }
        }
    }

    protected void btnSaveCopy_Click(object sender, EventArgs e)
    {

        EntityArrayList<Eqm_lubeStand> list = manager.GetListByWhereAndOrder(Eqm_lubeStand._.Equip_code == cbxEquipCopy.SelectedItem.Value && Eqm_lubeStand._.Lube_name == cbxEquipTypeCopy.SelectedItem.Value, Eqm_lubeStand._.Lube_name.Asc);
        foreach (Eqm_lubeStand record in list)
        {
            Eqm_lubeStand recordCopy = new Eqm_lubeStand();
            recordCopy.Equip_class = record.Equip_class;
            recordCopy.EquipClassName = record.EquipClassName;
            recordCopy.Equip_code = cbxEquipCopyTo.SelectedItem.Value.ToString();
            recordCopy.EquipName = cbxEquipCopyTo.SelectedItem.Text;
            recordCopy.Lube_name = record.Lube_name;
            recordCopy.Oil_code = record.Oil_code;
            recordCopy.OilName = record.OilName;
            recordCopy.Mp_period = record.Mp_period;
            recordCopy.Lube_num = record.Lube_num;
            recordCopy.Unit_name = record.Unit_name;
            recordCopy.Workshop = record.Workshop;
            recordCopy.Mp_date = record.Mp_date;
            recordCopy.In_date = record.In_date;
            recordCopy.Lube_stand = record.Lube_stand;
            recordCopy.Worker_barcode = this.UserID;

            if (manager.Insert(recordCopy) >= 0)
            {
                this.AppendWebLog("维修标准定义复制", "添加机台：" + recordCopy.Equip_code);
            }
            else
            {
                X.Msg.Alert("提示", "复制失败！").Show();
                return;
            }

        }
        winCopy.Hidden = true;
        bindList();
        X.Msg.Alert("提示", "复制完成！").Show();
        
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        winSave.Hidden = true;
    }
    protected void btnCancelCopy_Click(object sender, EventArgs e)
    {
        winCopy.Hidden = true;
    }
    #endregion

    #region 下拉列表事件响应
    protected void cbxEquipClass_SelectChanged(object sender, EventArgs e)
    {
        changeEquipClass();
    }
    protected void cbxEquip_SelectChanged(object sender, EventArgs e)
    {
        changeEquip();
    }
    protected void cbxEquipCopy_SelectChanged(object sender, EventArgs e)
    {
        changeEquipCopy();
    }
    protected void cbxEquipTypeCopy_SelectChanged(object sender, EventArgs e)
    {
        changeEquipTypeCopy();
    }
    #endregion

    #region 信息列表事件响应
    [DirectMethod]
    public void pnlList_Edit(string ObjID)
    {
        Eqm_lubeStand record = manager.GetById(int.Parse(ObjID));


        if (record != null)
        {
            cbxEquipClass.SetValue(record.Equip_class);
            cbxEquip.SetValue(record.Equip_code);
            txtLube_name.Text = record.Lube_name;
            cbxlubeType.SetValue(record.Oil_code);
            txtMp_period.Text = record.Mp_period.ToString();
            txtLube_num.Text = record.Lube_num.ToString();
            txtUnit_name.Text = record.Unit_name;
            txtWorkShop.Text = record.Workshop;
            txtStartDate.SelectedDate = Convert.ToDateTime(record.Mp_date);
            txtEndDate.SelectedDate = Convert.ToDateTime(record.In_date);
            txtMp_stand.Text = record.Lube_stand;
            hideObjID.Text = ObjID;
            this.hideMode.Text = "Edit";

            this.winSave.Hidden = false;
        }
        else
        {
            bindList();
            X.Msg.Alert("提示", "此条记录已经不存在！").Show();
        }
    }
    [DirectMethod]
    public void pnlList_Delete(string ObjID)
    {
        Eqm_lubeStand record = manager.GetById(int.Parse(ObjID));
        manager.Delete(int.Parse(ObjID));
        this.AppendWebLog("润滑标准删除", "修改机台：" + record.Equip_code);

        bindList();
        X.Msg.Alert("提示", "删除完成！").Show();
    }

    #endregion
}