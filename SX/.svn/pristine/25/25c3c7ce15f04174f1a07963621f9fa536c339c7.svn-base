//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PpmRubConsumeArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubConsume>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
    "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
    "name=\"Mesnac.Entity.PpmRubConsume\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBa" +
    "tchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubConsume\" batchSize=\"10\">" +
    "\r\n  <Properties>\r\n    <Property name=\"Id\" type=\"System.Int32\" isInherited=\"false" +
    "\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
    "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
    "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Id\" m" +
    "appingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"tru" +
    "e\" />\r\n    <Property name=\"Plandate\" type=\"System.Nullable`1[System.DateTime]\" i" +
    "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
    " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
    "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
    "mappingName=\"Plandate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sq" +
    "lType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
    "Costcode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
    "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
    "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
    "\" isSerializationIgnore=\"false\" mappingName=\"Costcode\" mappingColumnType=\"System" +
    ".String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
    "Property name=\"Matercode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
    "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
    "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
    "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Matercode\" mappingC" +
    "olumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=" +
    "\"false\" />\r\n    <Property name=\"Equipcode\" type=\"System.String\" isInherited=\"fal" +
    "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
    "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
    "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Eq" +
    "uipcode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"" +
    "false\" isNotNull=\"false\" />\r\n    <Property name=\"Shiftid\" type=\"System.Nullable`" +
    "1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
    "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
    "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
    "ionIgnore=\"false\" mappingName=\"Shiftid\" mappingColumnType=\"System.Nullable`1[Sys" +
    "tem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
    "ty name=\"ShiftClassId\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false" +
    "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
    "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
    "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Shif" +
    "tClassId\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPr" +
    "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"consumeqty\" type=\"Sys" +
    "tem.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
    "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
    "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
    "e\" isSerializationIgnore=\"false\" mappingName=\"consumeqty\" mappingColumnType=\"Sys" +
    "tem.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull" +
    "=\"false\" />\r\n    <Property name=\"Balanceqty\" type=\"System.Nullable`1[System.Deci" +
    "mal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=" +
    "\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fa" +
    "lse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"" +
    "false\" mappingName=\"Balanceqty\" mappingColumnType=\"System.Nullable`1[System.Deci" +
    "mal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
    " name=\"Consqty\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isR" +
    "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFri" +
    "endKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" " +
    "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Consqty\" " +
    "mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimar" +
    "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Surplus\" type=\"System.Nul" +
    "lable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
    "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
    "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
    "rializationIgnore=\"false\" mappingName=\"Surplus\" mappingColumnType=\"System.Nullab" +
    "le`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
    ">\r\n    <Property name=\"HandFlag\" type=\"System.String\" isInherited=\"false\" isRead" +
    "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
    "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
    "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"HandFlag\" ma" +
    "ppingColumnType=\"System.String\" sqlType=\"nvarchar(2)\" isPrimaryKey=\"false\" isNot" +
    "Null=\"false\" />\r\n    <Property name=\"RecordDate\" type=\"System.Nullable`1[System." +
    "DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
    "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
    "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
    "ore=\"false\" mappingName=\"RecordDate\" mappingColumnType=\"System.Nullable`1[System" +
    ".DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
    "roperty name=\"Deleteflag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
    "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
    "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
    "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Deleteflag\" mapping" +
    "ColumnType=\"System.String\" sqlType=\"nvarchar(1)\" isPrimaryKey=\"false\" isNotNull=" +
    "\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PpmRubConsume : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PpmRubConsumeEntityConfiguration;

        protected int _Id;

        protected global::System.DateTime? _Plandate;

        protected string _Costcode;

        protected string _Matercode;

        protected string _Equipcode;

        protected global::System.Int32? _Shiftid;

        protected global::System.Int32? _ShiftClassId;

        protected global::System.Decimal? _consumeqty;

        protected global::System.Decimal? _Balanceqty;

        protected global::System.Decimal? _Consqty;

        protected global::System.Decimal? _Surplus;

        protected string _HandFlag;

        protected global::System.DateTime? _RecordDate;

        protected string _Deleteflag;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PpmRubConsume left, global::Mesnac.Entity.PpmRubConsume right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PpmRubConsume left, global::Mesnac.Entity.PpmRubConsume right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                this.OnPropertyChanged("Id", this._Id, value);
                this._Id = value;
            }
        }

        public global::System.DateTime? Plandate
        {
            get
            {
                return this._Plandate;
            }
            set
            {
                this.OnPropertyChanged("Plandate", this._Plandate, value);
                this._Plandate = value;
            }
        }

        public string Costcode
        {
            get
            {
                return this._Costcode;
            }
            set
            {
                this.OnPropertyChanged("Costcode", this._Costcode, value);
                this._Costcode = value;
            }
        }

        public string Matercode
        {
            get
            {
                return this._Matercode;
            }
            set
            {
                this.OnPropertyChanged("Matercode", this._Matercode, value);
                this._Matercode = value;
            }
        }

        public string Equipcode
        {
            get
            {
                return this._Equipcode;
            }
            set
            {
                this.OnPropertyChanged("Equipcode", this._Equipcode, value);
                this._Equipcode = value;
            }
        }

        public global::System.Int32? Shiftid
        {
            get
            {
                return this._Shiftid;
            }
            set
            {
                this.OnPropertyChanged("Shiftid", this._Shiftid, value);
                this._Shiftid = value;
            }
        }

        public global::System.Int32? ShiftClassId
        {
            get
            {
                return this._ShiftClassId;
            }
            set
            {
                this.OnPropertyChanged("ShiftClassId", this._ShiftClassId, value);
                this._ShiftClassId = value;
            }
        }

        public global::System.Decimal? consumeqty
        {
            get
            {
                return this._consumeqty;
            }
            set
            {
                this.OnPropertyChanged("consumeqty", this._consumeqty, value);
                this._consumeqty = value;
            }
        }

        public global::System.Decimal? Balanceqty
        {
            get
            {
                return this._Balanceqty;
            }
            set
            {
                this.OnPropertyChanged("Balanceqty", this._Balanceqty, value);
                this._Balanceqty = value;
            }
        }

        public global::System.Decimal? Consqty
        {
            get
            {
                return this._Consqty;
            }
            set
            {
                this.OnPropertyChanged("Consqty", this._Consqty, value);
                this._Consqty = value;
            }
        }

        public global::System.Decimal? Surplus
        {
            get
            {
                return this._Surplus;
            }
            set
            {
                this.OnPropertyChanged("Surplus", this._Surplus, value);
                this._Surplus = value;
            }
        }

        public string HandFlag
        {
            get
            {
                return this._HandFlag;
            }
            set
            {
                this.OnPropertyChanged("HandFlag", this._HandFlag, value);
                this._HandFlag = value;
            }
        }

        public global::System.DateTime? RecordDate
        {
            get
            {
                return this._RecordDate;
            }
            set
            {
                this.OnPropertyChanged("RecordDate", this._RecordDate, value);
                this._RecordDate = value;
            }
        }

        public string Deleteflag
        {
            get
            {
                return this._Deleteflag;
            }
            set
            {
                this.OnPropertyChanged("Deleteflag", this._Deleteflag, value);
                this._Deleteflag = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PpmRubConsume._PpmRubConsumeEntityConfiguration == null))
            {
                PpmRubConsume._PpmRubConsumeEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubConsume");
            }
            return PpmRubConsume._PpmRubConsumeEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                        this._Id,
                        this._Plandate,
                        this._Costcode,
                        this._Matercode,
                        this._Equipcode,
                        this._Shiftid,
                        this._ShiftClassId,
                        this._consumeqty,
                        this._Balanceqty,
                        this._Consqty,
                        this._Surplus,
                        this._HandFlag,
                        this._RecordDate,
                        this._Deleteflag};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._Id = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._Plandate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._Costcode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._Matercode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._Equipcode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._Shiftid = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._ShiftClassId = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._consumeqty = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._Balanceqty = reader.GetDecimal(8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._Consqty = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._Surplus = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._HandFlag = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12)))
            {
                this._RecordDate = this.GetDateTime(reader, 12);
            }
            if ((false == reader.IsDBNull(13)))
            {
                this._Deleteflag = reader.GetString(13);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._Id = ((int)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._Plandate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2)))
            {
                this._Costcode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._Matercode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._Equipcode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._Shiftid = ((System.Nullable<int>)(row[5]));
            }
            if ((false == row.IsNull(6)))
            {
                this._ShiftClassId = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7)))
            {
                this._consumeqty = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8)))
            {
                this._Balanceqty = ((System.Nullable<decimal>)(row[8]));
            }
            if ((false == row.IsNull(9)))
            {
                this._Consqty = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10)))
            {
                this._Surplus = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._HandFlag = ((string)(row[11]));
            }
            if ((false == row.IsNull(12)))
            {
                this._RecordDate = this.GetDateTime(row, 12);
            }
            if ((false == row.IsNull(13)))
            {
                this._Deleteflag = ((string)(row[13]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubConsume).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubConsume)(obj)).isAttached)
                        && (this.Id == ((global::Mesnac.Entity.PpmRubConsume)(obj)).Id));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _Id = new NBear.Common.PropertyItem("Id", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Plandate = new NBear.Common.PropertyItem("Plandate", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Costcode = new NBear.Common.PropertyItem("Costcode", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Matercode = new NBear.Common.PropertyItem("Matercode", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Equipcode = new NBear.Common.PropertyItem("Equipcode", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Shiftid = new NBear.Common.PropertyItem("Shiftid", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _ShiftClassId = new NBear.Common.PropertyItem("ShiftClassId", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _consumeqty = new NBear.Common.PropertyItem("consumeqty", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Balanceqty = new NBear.Common.PropertyItem("Balanceqty", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Consqty = new NBear.Common.PropertyItem("Consqty", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Surplus = new NBear.Common.PropertyItem("Surplus", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _HandFlag = new NBear.Common.PropertyItem("HandFlag", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _RecordDate = new NBear.Common.PropertyItem("RecordDate", "Mesnac.Entity.PpmRubConsume");

            protected NBear.Common.PropertyItem _Deleteflag = new NBear.Common.PropertyItem("Deleteflag", "Mesnac.Entity.PpmRubConsume");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem Id
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Id;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Id", _Id.EntityConfiguration, _Id.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Plandate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Plandate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Plandate", _Plandate.EntityConfiguration, _Plandate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Costcode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Costcode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Costcode", _Costcode.EntityConfiguration, _Costcode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Matercode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Matercode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Matercode", _Matercode.EntityConfiguration, _Matercode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Equipcode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Equipcode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Equipcode", _Equipcode.EntityConfiguration, _Equipcode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Shiftid
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Shiftid;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Shiftid", _Shiftid.EntityConfiguration, _Shiftid.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ShiftClassId
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ShiftClassId;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ShiftClassId", _ShiftClassId.EntityConfiguration, _ShiftClassId.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem consumeqty
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _consumeqty;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("consumeqty", _consumeqty.EntityConfiguration, _consumeqty.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Balanceqty
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Balanceqty;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Balanceqty", _Balanceqty.EntityConfiguration, _Balanceqty.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Consqty
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Consqty;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Consqty", _Consqty.EntityConfiguration, _Consqty.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Surplus
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Surplus;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Surplus", _Surplus.EntityConfiguration, _Surplus.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem HandFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _HandFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("HandFlag", _HandFlag.EntityConfiguration, _HandFlag.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem RecordDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _RecordDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("RecordDate", _RecordDate.EntityConfiguration, _RecordDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Deleteflag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Deleteflag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Deleteflag", _Deleteflag.EntityConfiguration, _Deleteflag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
