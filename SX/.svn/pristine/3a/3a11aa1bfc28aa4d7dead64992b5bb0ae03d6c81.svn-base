//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptClassArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptClass> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PptClass\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUp" +
        "date=\"false\" isRelation=\"false\" mappingName=\"PptClass\" batchSize=\"10\">\r\n  <Prope" +
        "rties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ObjID\" mapp" +
        "ingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" " +
        "/>\r\n    <Property name=\"ClassName\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ClassName\"" +
        " mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"UseFlag\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"UseFlag\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PptClass : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptClassEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _ClassName;
        
        protected string _UseFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptClass left, global::Mesnac.Entity.PptClass right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptClass left, global::Mesnac.Entity.PptClass right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string ClassName {
            get {
                return this._ClassName;
            }
            set {
                this.OnPropertyChanged("ClassName", this._ClassName, value);
                this._ClassName = value;
            }
        }
        
        public string UseFlag {
            get {
                return this._UseFlag;
            }
            set {
                this.OnPropertyChanged("UseFlag", this._UseFlag, value);
                this._UseFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptClass._PptClassEntityConfiguration == null)) {
                PptClass._PptClassEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptClass");
            }
            return PptClass._PptClassEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._ClassName,
                    this._UseFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._ClassName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._UseFlag = reader.GetString(2);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._ClassName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._UseFlag = ((string)(row[2]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptClass).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PptClass)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PptClass)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PptClass");
            
            protected NBear.Common.PropertyItem _ClassName = new NBear.Common.PropertyItem("ClassName", "Mesnac.Entity.PptClass");
            
            protected NBear.Common.PropertyItem _UseFlag = new NBear.Common.PropertyItem("UseFlag", "Mesnac.Entity.PptClass");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ClassName {
                get {
                    if ((aliasName == null)) {
                        return _ClassName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ClassName", _ClassName.EntityConfiguration, _ClassName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UseFlag {
                get {
                    if ((aliasName == null)) {
                        return _UseFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UseFlag", _UseFlag.EntityConfiguration, _UseFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }


    [System.SerializableAttribute()]
    public partial class BasEquipMonitorArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasEquipMonitor>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.BasEquipMonitor\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"BasEquipMonitor\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited" +
        "=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNo" +
        "tNull=\"true\" />\r\n    <Property name=\"EquipCode\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"EquipCode\" mappingColumnType=\"System.String\" sqlType=\"char(5)\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipName\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"EquipName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipIP\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"EquipIP\" mappingColumnType=\"System.String\" sqlType" +
        "=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"E" +
        "quipPort\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipPort\" mappin" +
        "gColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasEquipMonitor : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _BasEquipMonitorEntityConfiguration;

        protected int _ObjID;

        protected string _EquipCode;

        protected string _EquipName;

        protected string _EquipIP;

        protected global::System.Int32? _EquipPort;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.BasEquipMonitor left, global::Mesnac.Entity.BasEquipMonitor right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.BasEquipMonitor left, global::Mesnac.Entity.BasEquipMonitor right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public int ObjID
        {
            get
            {
                return this._ObjID;
            }
            set
            {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }

        public string EquipCode
        {
            get
            {
                return this._EquipCode;
            }
            set
            {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }

        public string EquipName
        {
            get
            {
                return this._EquipName;
            }
            set
            {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }

        public string EquipIP
        {
            get
            {
                return this._EquipIP;
            }
            set
            {
                this.OnPropertyChanged("EquipIP", this._EquipIP, value);
                this._EquipIP = value;
            }
        }

        public global::System.Int32? EquipPort
        {
            get
            {
                return this._EquipPort;
            }
            set
            {
                this.OnPropertyChanged("EquipPort", this._EquipPort, value);
                this._EquipPort = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((BasEquipMonitor._BasEquipMonitorEntityConfiguration == null))
            {
                BasEquipMonitor._BasEquipMonitorEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasEquipMonitor");
            }
            return BasEquipMonitor._BasEquipMonitorEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._ObjID,
                    this._EquipCode,
                    this._EquipName,
                    this._EquipIP,
                    this._EquipPort};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._EquipCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._EquipName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._EquipIP = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._EquipPort = reader.GetInt32(4);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._EquipCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2)))
            {
                this._EquipName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._EquipIP = ((string)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._EquipPort = ((System.Nullable<int>)(row[4]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasEquipMonitor).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasEquipMonitor)(obj)).isAttached)
                        && base.Equals(obj));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasEquipMonitor");

            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.BasEquipMonitor");

            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.BasEquipMonitor");

            protected NBear.Common.PropertyItem _EquipIP = new NBear.Common.PropertyItem("EquipIP", "Mesnac.Entity.BasEquipMonitor");

            protected NBear.Common.PropertyItem _EquipPort = new NBear.Common.PropertyItem("EquipPort", "Mesnac.Entity.BasEquipMonitor");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem ObjID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ObjID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem EquipCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _EquipCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem EquipName
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _EquipName;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem EquipIP
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _EquipIP;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("EquipIP", _EquipIP.EntityConfiguration, _EquipIP.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem EquipPort
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _EquipPort;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("EquipPort", _EquipPort.EntityConfiguration, _EquipPort.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
