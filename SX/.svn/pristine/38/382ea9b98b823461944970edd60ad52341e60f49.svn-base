//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PmtRecipeMixingLogArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PmtRecipeMixingLog> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PmtRecipeMixingLog\" isReadOnly=\"false\" isAutoPreLoad=\"false\"" +
        " isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PmtRecipeMixingLog\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true" +
        "\" isNotNull=\"true\" />\r\n    <Property name=\"LogObjID\" type=\"System.Int32\" isInher" +
        "ited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"LogObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeObjID\" type=\"System.Int32\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"RecipeObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeEquipCode\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"RecipeEquipCode\" mappingColumnType=\"System.String\" " +
        "sqlType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"RecipeMaterialCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecipeMaterialCode\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"RecipeVersionID\" type=\"System.Int32\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"RecipeVersionID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=" +
        "\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingStep\" type=\"System.Int32" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"MixingStep\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"TermCode\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"TermCode\" mappingColumnType=\"System.String\" sqlType=\"char" +
        "(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingTime\" " +
        "type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingTime\" mappingColumnTy" +
        "pe=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"MixingTemp\" type=\"System.Nullable`1[System.Dec" +
        "imal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"MixingTemp\" mappingColumnType=\"System.Nullable`1[System.Dec" +
        "imal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"MixingEnergy\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"fals" +
        "e\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mix" +
        "ingEnergy\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decima" +
        "l\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingPower\" t" +
        "ype=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingPower\" mappingColumn" +
        "Type=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"MixingPress\" type=\"System.Nullable`1[S" +
        "ystem.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"MixingPress\" mappingColumnType=\"System.Nullable`1[" +
        "System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "  <Property name=\"MixingSpeed\" type=\"System.Nullable`1[System.Int32]\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"MixingSpeed\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActionCode\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"ActionCode\" mappingColumnType=\"System.String\" s" +
        "qlType=\"char(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "LogRecordTime\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" sql" +
        "DefaultValue=\"getdate()\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"LogRecordTime\" mappingColumnType=\"System.Nullable`1[System.Da" +
        "teTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Prope" +
        "rties>\r\n</EntityConfiguration>")]
    public partial class PmtRecipeMixingLog : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PmtRecipeMixingLogEntityConfiguration;
        
        protected int _ObjID;
        
        protected int _LogObjID;
        
        protected int _RecipeObjID;
        
        protected string _RecipeEquipCode;
        
        protected string _RecipeMaterialCode;
        
        protected int _RecipeVersionID;
        
        protected int _MixingStep;
        
        protected string _TermCode;
        
        protected global::System.Int32? _MixingTime;
        
        protected global::System.Decimal? _MixingTemp;
        
        protected global::System.Decimal? _MixingEnergy;
        
        protected global::System.Decimal? _MixingPower;
        
        protected global::System.Decimal? _MixingPress;
        
        protected global::System.Int32? _MixingSpeed;
        
        protected string _ActionCode;
        
        protected global::System.DateTime? _LogRecordTime;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PmtRecipeMixingLog left, global::Mesnac.Entity.PmtRecipeMixingLog right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PmtRecipeMixingLog left, global::Mesnac.Entity.PmtRecipeMixingLog right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public int LogObjID {
            get {
                return this._LogObjID;
            }
            set {
                this.OnPropertyChanged("LogObjID", this._LogObjID, value);
                this._LogObjID = value;
            }
        }
        
        public int RecipeObjID {
            get {
                return this._RecipeObjID;
            }
            set {
                this.OnPropertyChanged("RecipeObjID", this._RecipeObjID, value);
                this._RecipeObjID = value;
            }
        }
        
        public string RecipeEquipCode {
            get {
                return this._RecipeEquipCode;
            }
            set {
                this.OnPropertyChanged("RecipeEquipCode", this._RecipeEquipCode, value);
                this._RecipeEquipCode = value;
            }
        }
        
        public string RecipeMaterialCode {
            get {
                return this._RecipeMaterialCode;
            }
            set {
                this.OnPropertyChanged("RecipeMaterialCode", this._RecipeMaterialCode, value);
                this._RecipeMaterialCode = value;
            }
        }
        
        public int RecipeVersionID {
            get {
                return this._RecipeVersionID;
            }
            set {
                this.OnPropertyChanged("RecipeVersionID", this._RecipeVersionID, value);
                this._RecipeVersionID = value;
            }
        }
        
        public int MixingStep {
            get {
                return this._MixingStep;
            }
            set {
                this.OnPropertyChanged("MixingStep", this._MixingStep, value);
                this._MixingStep = value;
            }
        }
        
        public string TermCode {
            get {
                return this._TermCode;
            }
            set {
                this.OnPropertyChanged("TermCode", this._TermCode, value);
                this._TermCode = value;
            }
        }
        
        public global::System.Int32? MixingTime {
            get {
                return this._MixingTime;
            }
            set {
                this.OnPropertyChanged("MixingTime", this._MixingTime, value);
                this._MixingTime = value;
            }
        }
        
        public global::System.Decimal? MixingTemp {
            get {
                return this._MixingTemp;
            }
            set {
                this.OnPropertyChanged("MixingTemp", this._MixingTemp, value);
                this._MixingTemp = value;
            }
        }
        
        public global::System.Decimal? MixingEnergy {
            get {
                return this._MixingEnergy;
            }
            set {
                this.OnPropertyChanged("MixingEnergy", this._MixingEnergy, value);
                this._MixingEnergy = value;
            }
        }
        
        public global::System.Decimal? MixingPower {
            get {
                return this._MixingPower;
            }
            set {
                this.OnPropertyChanged("MixingPower", this._MixingPower, value);
                this._MixingPower = value;
            }
        }
        
        public global::System.Decimal? MixingPress {
            get {
                return this._MixingPress;
            }
            set {
                this.OnPropertyChanged("MixingPress", this._MixingPress, value);
                this._MixingPress = value;
            }
        }
        
        public global::System.Int32? MixingSpeed {
            get {
                return this._MixingSpeed;
            }
            set {
                this.OnPropertyChanged("MixingSpeed", this._MixingSpeed, value);
                this._MixingSpeed = value;
            }
        }
        
        public string ActionCode {
            get {
                return this._ActionCode;
            }
            set {
                this.OnPropertyChanged("ActionCode", this._ActionCode, value);
                this._ActionCode = value;
            }
        }
        
        public global::System.DateTime? LogRecordTime {
            get {
                return this._LogRecordTime;
            }
            set {
                this.OnPropertyChanged("LogRecordTime", this._LogRecordTime, value);
                this._LogRecordTime = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PmtRecipeMixingLog._PmtRecipeMixingLogEntityConfiguration == null)) {
                PmtRecipeMixingLog._PmtRecipeMixingLogEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PmtRecipeMixingLog");
            }
            return PmtRecipeMixingLog._PmtRecipeMixingLogEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._LogObjID,
                    this._RecipeObjID,
                    this._RecipeEquipCode,
                    this._RecipeMaterialCode,
                    this._RecipeVersionID,
                    this._MixingStep,
                    this._TermCode,
                    this._MixingTime,
                    this._MixingTemp,
                    this._MixingEnergy,
                    this._MixingPower,
                    this._MixingPress,
                    this._MixingSpeed,
                    this._ActionCode,
                    this._LogRecordTime};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._LogObjID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._RecipeObjID = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._RecipeEquipCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._RecipeMaterialCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._RecipeVersionID = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MixingStep = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._TermCode = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixingTime = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MixingTemp = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._MixingEnergy = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixingPower = reader.GetDecimal(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._MixingPress = reader.GetDecimal(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._MixingSpeed = reader.GetInt32(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._ActionCode = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._LogRecordTime = this.GetDateTime(reader, 15);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._LogObjID = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._RecipeObjID = ((int)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._RecipeEquipCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._RecipeMaterialCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._RecipeVersionID = ((int)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MixingStep = ((int)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._TermCode = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixingTime = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MixingTemp = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._MixingEnergy = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixingPower = ((System.Nullable<decimal>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._MixingPress = ((System.Nullable<decimal>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._MixingSpeed = ((System.Nullable<int>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._ActionCode = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._LogRecordTime = this.GetDateTime(row, 15);
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PmtRecipeMixingLog).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PmtRecipeMixingLog)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PmtRecipeMixingLog)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _LogObjID = new NBear.Common.PropertyItem("LogObjID", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _RecipeObjID = new NBear.Common.PropertyItem("RecipeObjID", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _RecipeEquipCode = new NBear.Common.PropertyItem("RecipeEquipCode", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _RecipeMaterialCode = new NBear.Common.PropertyItem("RecipeMaterialCode", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _RecipeVersionID = new NBear.Common.PropertyItem("RecipeVersionID", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingStep = new NBear.Common.PropertyItem("MixingStep", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _TermCode = new NBear.Common.PropertyItem("TermCode", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingTime = new NBear.Common.PropertyItem("MixingTime", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingTemp = new NBear.Common.PropertyItem("MixingTemp", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingEnergy = new NBear.Common.PropertyItem("MixingEnergy", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingPower = new NBear.Common.PropertyItem("MixingPower", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingPress = new NBear.Common.PropertyItem("MixingPress", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _MixingSpeed = new NBear.Common.PropertyItem("MixingSpeed", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _ActionCode = new NBear.Common.PropertyItem("ActionCode", "Mesnac.Entity.PmtRecipeMixingLog");
            
            protected NBear.Common.PropertyItem _LogRecordTime = new NBear.Common.PropertyItem("LogRecordTime", "Mesnac.Entity.PmtRecipeMixingLog");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LogObjID {
                get {
                    if ((aliasName == null)) {
                        return _LogObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LogObjID", _LogObjID.EntityConfiguration, _LogObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeObjID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeObjID", _RecipeObjID.EntityConfiguration, _RecipeObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeEquipCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeEquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeEquipCode", _RecipeEquipCode.EntityConfiguration, _RecipeEquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeMaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeMaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeMaterialCode", _RecipeMaterialCode.EntityConfiguration, _RecipeMaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeVersionID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeVersionID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeVersionID", _RecipeVersionID.EntityConfiguration, _RecipeVersionID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingStep {
                get {
                    if ((aliasName == null)) {
                        return _MixingStep;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingStep", _MixingStep.EntityConfiguration, _MixingStep.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TermCode {
                get {
                    if ((aliasName == null)) {
                        return _TermCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TermCode", _TermCode.EntityConfiguration, _TermCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTime {
                get {
                    if ((aliasName == null)) {
                        return _MixingTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTime", _MixingTime.EntityConfiguration, _MixingTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTemp {
                get {
                    if ((aliasName == null)) {
                        return _MixingTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTemp", _MixingTemp.EntityConfiguration, _MixingTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingEnergy {
                get {
                    if ((aliasName == null)) {
                        return _MixingEnergy;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingEnergy", _MixingEnergy.EntityConfiguration, _MixingEnergy.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPower {
                get {
                    if ((aliasName == null)) {
                        return _MixingPower;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPower", _MixingPower.EntityConfiguration, _MixingPower.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPress {
                get {
                    if ((aliasName == null)) {
                        return _MixingPress;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPress", _MixingPress.EntityConfiguration, _MixingPress.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingSpeed {
                get {
                    if ((aliasName == null)) {
                        return _MixingSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingSpeed", _MixingSpeed.EntityConfiguration, _MixingSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActionCode {
                get {
                    if ((aliasName == null)) {
                        return _ActionCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActionCode", _ActionCode.EntityConfiguration, _ActionCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LogRecordTime {
                get {
                    if ((aliasName == null)) {
                        return _LogRecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LogRecordTime", _LogRecordTime.EntityConfiguration, _LogRecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
