//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcSpecMappingArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcSpecMapping> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmcSpecMapping\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcSpecMapping\" batchSize=\"10" +
        "\">\r\n  <Properties>\r\n    <Property name=\"MappingId\" type=\"System.Int32\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"MappingId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tru" +
        "e\" isNotNull=\"true\" />\r\n    <Property name=\"SpecId\" type=\"System.Int32\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"SpecId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"MaterialCode\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"MaterialCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(1" +
        "3)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SpecName\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"SpecName\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.S" +
        "tring\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pr" +
        "operty name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fa" +
        "lse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fal" +
        "se\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProp" +
        "ertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingC" +
        "olumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class QmcSpecMapping : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcSpecMappingEntityConfiguration;
        
        protected int _MappingId;
        
        protected int _SpecId;
        
        protected string _MaterialCode;
        
        protected string _SpecName;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcSpecMapping left, global::Mesnac.Entity.QmcSpecMapping right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcSpecMapping left, global::Mesnac.Entity.QmcSpecMapping right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int MappingId {
            get {
                return this._MappingId;
            }
            set {
                this.OnPropertyChanged("MappingId", this._MappingId, value);
                this._MappingId = value;
            }
        }
        
        public int SpecId {
            get {
                return this._SpecId;
            }
            set {
                this.OnPropertyChanged("SpecId", this._SpecId, value);
                this._SpecId = value;
            }
        }
        
        public string MaterialCode {
            get {
                return this._MaterialCode;
            }
            set {
                this.OnPropertyChanged("MaterialCode", this._MaterialCode, value);
                this._MaterialCode = value;
            }
        }
        
        public string SpecName {
            get {
                return this._SpecName;
            }
            set {
                this.OnPropertyChanged("SpecName", this._SpecName, value);
                this._SpecName = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcSpecMapping._QmcSpecMappingEntityConfiguration == null)) {
                QmcSpecMapping._QmcSpecMappingEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcSpecMapping");
            }
            return QmcSpecMapping._QmcSpecMappingEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._MappingId,
                    this._SpecId,
                    this._MaterialCode,
                    this._SpecName,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._MappingId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._SpecId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._MaterialCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._SpecName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Remark = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._DeleteFlag = reader.GetString(5);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._MappingId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._SpecId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._MaterialCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._SpecName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._Remark = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._DeleteFlag = ((string)(row[5]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcSpecMapping).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcSpecMapping)(obj)).isAttached) 
                        && (this.MappingId == ((global::Mesnac.Entity.QmcSpecMapping)(obj)).MappingId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _MappingId = new NBear.Common.PropertyItem("MappingId", "Mesnac.Entity.QmcSpecMapping");
            
            protected NBear.Common.PropertyItem _SpecId = new NBear.Common.PropertyItem("SpecId", "Mesnac.Entity.QmcSpecMapping");
            
            protected NBear.Common.PropertyItem _MaterialCode = new NBear.Common.PropertyItem("MaterialCode", "Mesnac.Entity.QmcSpecMapping");
            
            protected NBear.Common.PropertyItem _SpecName = new NBear.Common.PropertyItem("SpecName", "Mesnac.Entity.QmcSpecMapping");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcSpecMapping");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcSpecMapping");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem MappingId {
                get {
                    if ((aliasName == null)) {
                        return _MappingId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MappingId", _MappingId.EntityConfiguration, _MappingId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpecId {
                get {
                    if ((aliasName == null)) {
                        return _SpecId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpecId", _SpecId.EntityConfiguration, _SpecId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialCode", _MaterialCode.EntityConfiguration, _MaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpecName {
                get {
                    if ((aliasName == null)) {
                        return _SpecName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpecName", _SpecName.EntityConfiguration, _SpecName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
