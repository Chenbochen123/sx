//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptCurveDataArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptCurveData> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PptCurveData\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatc" +
        "hUpdate=\"false\" isRelation=\"false\" mappingName=\"PptCurveData\" batchSize=\"10\">\r\n " +
        " <Properties>\r\n    <Property name=\"Barcode\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ba" +
        "rcode\" mappingColumnType=\"System.String\" sqlType=\"char(18)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"CurveData\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"CurveData\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PlanDate\" type=\"System.Strin" +
        "g\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"PlanDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PlanID\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"PlanID\" mappingColumnType=\"System.String\" sqlType=\"char(" +
        "12)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SerialID\" ty" +
        "pe=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCom" +
        "poundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazy" +
        "Load=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"" +
        "false\" isSerializationIgnore=\"false\" mappingName=\"SerialID\" mappingColumnType=\"S" +
        "ystem.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"StartDateTime\" type=\"System.Nullable`1[System.DateT" +
        "ime]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"StartDateTime\" mappingColumnType=\"System.Nullable`1[System.Da" +
        "teTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"MixingTime\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingTime\" mappingColu" +
        "mnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"SecondSpan\" type=\"System.Int32\" isInherited=\"false\" isRead" +
        "Only=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SecondSpan\" m" +
        "appingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"MixingTemp\" type=\"System.String\" isInherited=\"false" +
        "\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mixin" +
        "gTemp\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"MixingPower\" type=\"System.String\" isInhe" +
        "rited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"MixingPower\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingEnergy\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"MixingEnergy\" mappingColumnType=\"System.String\" sqlType=\"nt" +
        "ext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingPress\"" +
        " type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"MixingPress\" mappingColumnType=\"System.String" +
        "\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"MixingSpeed\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"MixingSpeed\" mappingColumnType=\"" +
        "System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"IfSubed\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IfSubed\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"MixingPosition\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingPosit" +
        "ion\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"BDSaveTime\" type=\"System.Nullable`1[System" +
        ".DateTime]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"BDSaveTime\" mappingColumnType=\"System.Nullable`1[System" +
        ".DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"Mixing_MixT\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"" +
        "true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mixing_MixT\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"Mixing_RotorT\" type=\"System.String\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mixi" +
        "ng_RotorT\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"Mixing_DumpT\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"Mixing_DumpT\" mappingColumnType=\"System.String\" sqlType=\"ntext\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mixing_Blend\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"Mixing_Blend\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mixing" +
        "_Blend2\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"Mixing_Blend2\" mappingColumnType=\"Sys" +
        "tem.String\" sqlType=\"ntext\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Prope" +
        "rties>\r\n</EntityConfiguration>")]
    public partial class PptCurveData : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptCurveDataEntityConfiguration;
        
        protected string _Barcode;
        
        protected string _CurveData;
        
        protected string _PlanDate;
        
        protected string _PlanID;
        
        protected global::System.Int32? _SerialID;
        
        protected global::System.DateTime? _StartDateTime;
        
        protected string _MixingTime;
        
        protected int _SecondSpan;
        
        protected string _MixingTemp;
        
        protected string _MixingPower;
        
        protected string _MixingEnergy;
        
        protected string _MixingPress;
        
        protected string _MixingSpeed;
        
        protected string _IfSubed;
        
        protected string _MixingPosition;
        
        protected global::System.DateTime? _BDSaveTime;
        
        protected string _Mixing_MixT;
        
        protected string _Mixing_RotorT;
        
        protected string _Mixing_DumpT;
        
        protected string _Mixing_Blend;
        
        protected string _Mixing_Blend2;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptCurveData left, global::Mesnac.Entity.PptCurveData right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptCurveData left, global::Mesnac.Entity.PptCurveData right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Barcode {
            get {
                return this._Barcode;
            }
            set {
                this.OnPropertyChanged("Barcode", this._Barcode, value);
                this._Barcode = value;
            }
        }
        
        public string CurveData {
            get {
                return this._CurveData;
            }
            set {
                this.OnPropertyChanged("CurveData", this._CurveData, value);
                this._CurveData = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public string PlanID {
            get {
                return this._PlanID;
            }
            set {
                this.OnPropertyChanged("PlanID", this._PlanID, value);
                this._PlanID = value;
            }
        }
        
        public global::System.Int32? SerialID {
            get {
                return this._SerialID;
            }
            set {
                this.OnPropertyChanged("SerialID", this._SerialID, value);
                this._SerialID = value;
            }
        }
        
        public global::System.DateTime? StartDateTime {
            get {
                return this._StartDateTime;
            }
            set {
                this.OnPropertyChanged("StartDateTime", this._StartDateTime, value);
                this._StartDateTime = value;
            }
        }
        
        public string MixingTime {
            get {
                return this._MixingTime;
            }
            set {
                this.OnPropertyChanged("MixingTime", this._MixingTime, value);
                this._MixingTime = value;
            }
        }
        
        public int SecondSpan {
            get {
                return this._SecondSpan;
            }
            set {
                this.OnPropertyChanged("SecondSpan", this._SecondSpan, value);
                this._SecondSpan = value;
            }
        }
        
        public string MixingTemp {
            get {
                return this._MixingTemp;
            }
            set {
                this.OnPropertyChanged("MixingTemp", this._MixingTemp, value);
                this._MixingTemp = value;
            }
        }
        
        public string MixingPower {
            get {
                return this._MixingPower;
            }
            set {
                this.OnPropertyChanged("MixingPower", this._MixingPower, value);
                this._MixingPower = value;
            }
        }
        
        public string MixingEnergy {
            get {
                return this._MixingEnergy;
            }
            set {
                this.OnPropertyChanged("MixingEnergy", this._MixingEnergy, value);
                this._MixingEnergy = value;
            }
        }
        
        public string MixingPress {
            get {
                return this._MixingPress;
            }
            set {
                this.OnPropertyChanged("MixingPress", this._MixingPress, value);
                this._MixingPress = value;
            }
        }
        
        public string MixingSpeed {
            get {
                return this._MixingSpeed;
            }
            set {
                this.OnPropertyChanged("MixingSpeed", this._MixingSpeed, value);
                this._MixingSpeed = value;
            }
        }
        
        public string IfSubed {
            get {
                return this._IfSubed;
            }
            set {
                this.OnPropertyChanged("IfSubed", this._IfSubed, value);
                this._IfSubed = value;
            }
        }
        
        public string MixingPosition {
            get {
                return this._MixingPosition;
            }
            set {
                this.OnPropertyChanged("MixingPosition", this._MixingPosition, value);
                this._MixingPosition = value;
            }
        }
        
        public global::System.DateTime? BDSaveTime {
            get {
                return this._BDSaveTime;
            }
            set {
                this.OnPropertyChanged("BDSaveTime", this._BDSaveTime, value);
                this._BDSaveTime = value;
            }
        }
        
        public string Mixing_MixT {
            get {
                return this._Mixing_MixT;
            }
            set {
                this.OnPropertyChanged("Mixing_MixT", this._Mixing_MixT, value);
                this._Mixing_MixT = value;
            }
        }
        
        public string Mixing_RotorT {
            get {
                return this._Mixing_RotorT;
            }
            set {
                this.OnPropertyChanged("Mixing_RotorT", this._Mixing_RotorT, value);
                this._Mixing_RotorT = value;
            }
        }
        
        public string Mixing_DumpT {
            get {
                return this._Mixing_DumpT;
            }
            set {
                this.OnPropertyChanged("Mixing_DumpT", this._Mixing_DumpT, value);
                this._Mixing_DumpT = value;
            }
        }
        
        public string Mixing_Blend {
            get {
                return this._Mixing_Blend;
            }
            set {
                this.OnPropertyChanged("Mixing_Blend", this._Mixing_Blend, value);
                this._Mixing_Blend = value;
            }
        }
        
        public string Mixing_Blend2 {
            get {
                return this._Mixing_Blend2;
            }
            set {
                this.OnPropertyChanged("Mixing_Blend2", this._Mixing_Blend2, value);
                this._Mixing_Blend2 = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptCurveData._PptCurveDataEntityConfiguration == null)) {
                PptCurveData._PptCurveDataEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptCurveData");
            }
            return PptCurveData._PptCurveDataEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Barcode,
                    this._CurveData,
                    this._PlanDate,
                    this._PlanID,
                    this._SerialID,
                    this._StartDateTime,
                    this._MixingTime,
                    this._SecondSpan,
                    this._MixingTemp,
                    this._MixingPower,
                    this._MixingEnergy,
                    this._MixingPress,
                    this._MixingSpeed,
                    this._IfSubed,
                    this._MixingPosition,
                    this._BDSaveTime,
                    this._Mixing_MixT,
                    this._Mixing_RotorT,
                    this._Mixing_DumpT,
                    this._Mixing_Blend,
                    this._Mixing_Blend2};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Barcode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._CurveData = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._PlanDate = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._PlanID = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._SerialID = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._StartDateTime = this.GetDateTime(reader, 5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MixingTime = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._SecondSpan = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixingTemp = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MixingPower = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._MixingEnergy = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixingPress = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._MixingSpeed = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._IfSubed = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._MixingPosition = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._BDSaveTime = this.GetDateTime(reader, 15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._Mixing_MixT = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._Mixing_RotorT = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._Mixing_DumpT = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._Mixing_Blend = reader.GetString(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._Mixing_Blend2 = reader.GetString(20);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Barcode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._CurveData = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._PlanDate = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._PlanID = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._SerialID = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._StartDateTime = this.GetDateTime(row, 5);
            }
            if ((false == row.IsNull(6))) {
                this._MixingTime = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._SecondSpan = ((int)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixingTemp = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MixingPower = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._MixingEnergy = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixingPress = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._MixingSpeed = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._IfSubed = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._MixingPosition = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._BDSaveTime = this.GetDateTime(row, 15);
            }
            if ((false == row.IsNull(16))) {
                this._Mixing_MixT = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._Mixing_RotorT = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._Mixing_DumpT = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._Mixing_Blend = ((string)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._Mixing_Blend2 = ((string)(row[20]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptCurveData).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PptCurveData)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Barcode = new NBear.Common.PropertyItem("Barcode", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _CurveData = new NBear.Common.PropertyItem("CurveData", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _PlanID = new NBear.Common.PropertyItem("PlanID", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _SerialID = new NBear.Common.PropertyItem("SerialID", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _StartDateTime = new NBear.Common.PropertyItem("StartDateTime", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingTime = new NBear.Common.PropertyItem("MixingTime", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _SecondSpan = new NBear.Common.PropertyItem("SecondSpan", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingTemp = new NBear.Common.PropertyItem("MixingTemp", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingPower = new NBear.Common.PropertyItem("MixingPower", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingEnergy = new NBear.Common.PropertyItem("MixingEnergy", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingPress = new NBear.Common.PropertyItem("MixingPress", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingSpeed = new NBear.Common.PropertyItem("MixingSpeed", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _IfSubed = new NBear.Common.PropertyItem("IfSubed", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _MixingPosition = new NBear.Common.PropertyItem("MixingPosition", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _BDSaveTime = new NBear.Common.PropertyItem("BDSaveTime", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _Mixing_MixT = new NBear.Common.PropertyItem("Mixing_MixT", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _Mixing_RotorT = new NBear.Common.PropertyItem("Mixing_RotorT", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _Mixing_DumpT = new NBear.Common.PropertyItem("Mixing_DumpT", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _Mixing_Blend = new NBear.Common.PropertyItem("Mixing_Blend", "Mesnac.Entity.PptCurveData");
            
            protected NBear.Common.PropertyItem _Mixing_Blend2 = new NBear.Common.PropertyItem("Mixing_Blend2", "Mesnac.Entity.PptCurveData");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Barcode {
                get {
                    if ((aliasName == null)) {
                        return _Barcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Barcode", _Barcode.EntityConfiguration, _Barcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CurveData {
                get {
                    if ((aliasName == null)) {
                        return _CurveData;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CurveData", _CurveData.EntityConfiguration, _CurveData.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanID {
                get {
                    if ((aliasName == null)) {
                        return _PlanID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanID", _PlanID.EntityConfiguration, _PlanID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SerialID {
                get {
                    if ((aliasName == null)) {
                        return _SerialID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SerialID", _SerialID.EntityConfiguration, _SerialID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartDateTime {
                get {
                    if ((aliasName == null)) {
                        return _StartDateTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartDateTime", _StartDateTime.EntityConfiguration, _StartDateTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTime {
                get {
                    if ((aliasName == null)) {
                        return _MixingTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTime", _MixingTime.EntityConfiguration, _MixingTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SecondSpan {
                get {
                    if ((aliasName == null)) {
                        return _SecondSpan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SecondSpan", _SecondSpan.EntityConfiguration, _SecondSpan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTemp {
                get {
                    if ((aliasName == null)) {
                        return _MixingTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTemp", _MixingTemp.EntityConfiguration, _MixingTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPower {
                get {
                    if ((aliasName == null)) {
                        return _MixingPower;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPower", _MixingPower.EntityConfiguration, _MixingPower.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingEnergy {
                get {
                    if ((aliasName == null)) {
                        return _MixingEnergy;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingEnergy", _MixingEnergy.EntityConfiguration, _MixingEnergy.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPress {
                get {
                    if ((aliasName == null)) {
                        return _MixingPress;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPress", _MixingPress.EntityConfiguration, _MixingPress.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingSpeed {
                get {
                    if ((aliasName == null)) {
                        return _MixingSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingSpeed", _MixingSpeed.EntityConfiguration, _MixingSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IfSubed {
                get {
                    if ((aliasName == null)) {
                        return _IfSubed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IfSubed", _IfSubed.EntityConfiguration, _IfSubed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPosition {
                get {
                    if ((aliasName == null)) {
                        return _MixingPosition;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPosition", _MixingPosition.EntityConfiguration, _MixingPosition.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BDSaveTime {
                get {
                    if ((aliasName == null)) {
                        return _BDSaveTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BDSaveTime", _BDSaveTime.EntityConfiguration, _BDSaveTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mixing_MixT {
                get {
                    if ((aliasName == null)) {
                        return _Mixing_MixT;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mixing_MixT", _Mixing_MixT.EntityConfiguration, _Mixing_MixT.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mixing_RotorT {
                get {
                    if ((aliasName == null)) {
                        return _Mixing_RotorT;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mixing_RotorT", _Mixing_RotorT.EntityConfiguration, _Mixing_RotorT.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mixing_DumpT {
                get {
                    if ((aliasName == null)) {
                        return _Mixing_DumpT;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mixing_DumpT", _Mixing_DumpT.EntityConfiguration, _Mixing_DumpT.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mixing_Blend {
                get {
                    if ((aliasName == null)) {
                        return _Mixing_Blend;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mixing_Blend", _Mixing_Blend.EntityConfiguration, _Mixing_Blend.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mixing_Blend2 {
                get {
                    if ((aliasName == null)) {
                        return _Mixing_Blend2;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mixing_Blend2", _Mixing_Blend2.EntityConfiguration, _Mixing_Blend2.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
