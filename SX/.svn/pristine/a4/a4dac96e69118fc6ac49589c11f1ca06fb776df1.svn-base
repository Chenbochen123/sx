using System;
using System.Data;
using System.Xml;
using System.Xml.Xsl;
using Ext.Net;
using Mesnac.Business.Implements;
using Mesnac.Data.Interface;
using Mesnac.Data.Implements;
using Mesnac.Entity;
using NBear.Common;
using System.Collections.Generic;
using System.Text;
using Mesnac.Entity;


public partial class Manager_Equipment_SparePart_MeasurePlan : Mesnac.Web.UI.Page
{
    protected Eqm_MeasureManager measureManager = new Eqm_MeasureManager();
    protected Eqm_MeasPlanManager measPlanManager = new Eqm_MeasPlanManager();
    protected SYS_USERManager userManager = new SYS_USERManager();
    protected void Page_Load(object sender, EventArgs e)
    {
        if ( !X.IsAjaxRequest&&!Page.IsPostBack )
        {
            PageInit();
        }
    }

    #region 初始化下拉列表
    private void PageInit()
    {

        bindList();
        this.winSave.Hidden = true;
        this.winDone.Hidden = true;
        bindMaintainers();
    }


    private DataSet getList(string cboPlan,string txtJLName)
    {


        return GetDataByParas(cboPlan,txtJLName);
       // return GetDataByParas(cboPlan.Value.ToString);
    }

    public System.Data.DataSet GetDataByParas(string cboPlan,string txtJLName)
    {
        StringBuilder sb = new StringBuilder();
        #region
        sb.AppendLine(@"select t.Mp_planid,t.JL_code,t1.JL_IDNO,t1.WorkShop,t.Mp_result,t1.JL_name,t1.Fac_name,t1.JL_Grade,t1.JL_spec,t1.JL_Precis,t1.JL_type,
t1.Pos_code,t1.Check_media,t1.check_stand,t1.Mem_note,t1.LastCheckDate,case when t.Plan_state=1 then '下达' when t.Plan_state=2 then '完成' when t.Plan_state=3 then '取消' end Plan_state,
t.JL_RealDate,t.JL_planDate,t.JL_Realday,t.JL_planday
from eqm_MeasPlan  t
left join Eqm_Measure t1 on t.JL_code=t1.JL_code");
        sb.AppendLine("WHERE 1=1");
        if (!string.IsNullOrEmpty(cboPlan))
        {
            sb.AppendLine("AND Plan_state='" + cboPlan + "'");
        }
        if (!string.IsNullOrEmpty(txtJLName))
        {
            sb.AppendLine("AND JL_name='" + txtJLName + "'");
        }
        if (DateBeginTime.SelectedDate != DateTime.MinValue)
        {
            sb.AppendLine("AND JL_PlanDate>='" + DateBeginTime.SelectedDate + "'");
        }
        if (DateEndTime.SelectedDate != DateTime.MinValue)
        {
            sb.AppendLine("AND JL_PlanDate<='" + DateEndTime.SelectedDate + "'");
        }
        #endregion

        NBear.Data.CustomSqlSection css = measPlanManager.GetBySql(sb.ToString());
        return css.ToDataSet();
    }
    private void bindList()
    {
        string plan = "";
        string Name = "";
        if (cboPlan.SelectedItem.Value != null)
        {
            plan = cboPlan.SelectedItem.Value.ToString();
        }
        if (!string.IsNullOrEmpty(txtJLName.Text))
        {
            Name = txtJLName.Text.ToString();
        }
        this.store.DataSource = getList(plan,Name);
        this.store.DataBind();
    }
    #endregion



    #region 按钮事件响应
    protected void btnSearch_Click( object sender , EventArgs e )
    {
        bindList();
    }
    protected void btnExportSubmit_Click(object sender, EventArgs e)
    {
        string plan = "";
        string Name = "";
        if (cboPlan.SelectedItem.Value != null)
        {
            plan = cboPlan.SelectedItem.Value.ToString();
        }
        if (!string.IsNullOrEmpty(txtJLName.Text))
        {
            Name = txtJLName.Text.ToString();
        }
        DataSet ds = getList(plan,Name);
        //huiw,2013-10-28添加，判断不为空时才导出excel
        if (ds == null || ds.Tables[0].Rows.Count == 0)
        {
            X.Msg.Alert("提示", "未查询出数据！").Show();
        }
        else
        {
            for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
            {
                bool isshow = false;
                DataColumn dc = ds.Tables[0].Columns[i];
                foreach (ColumnBase cb in this.pnlList.ColumnModel.Columns)
                {
                    if ((cb.DataIndex != null) && (cb.DataIndex.ToUpper() == dc.ColumnName.ToUpper()))
                    {
                        dc.ColumnName = cb.Text;
                        isshow = true;
                        break;
                    }
                }
                if (!isshow)
                {
                    ds.Tables[0].Columns.Remove(dc.ColumnName);
                    i--;
                }
            }
            new Mesnac.Util.Excel.ExcelDownload().ExcelFileDown(ds, "计量校准计划");
        }
    }
    protected void btnAdd_Click(object sender, EventArgs e)
    {
        this.hideMode.Text = "Add";

        //ComboBox1.SetValue(null);
        //ComboBox2.SetValue(null);
        txtJL_code.Text = "";
        txtJL_planDate.Text = "";
        txtJL_planday.Text = "";
        txtPlan_state.SetValue(null);
       // cbohandle_name.Text = "";
        cbohandle_name.SetValue(null);
        cbohandle_name1.SetValue(null);
        txtJL_RealDay.Text = "";
        txtJL_RealDate.Text = "";
        txtMp_result.Text = "";
       
        this.winSave.Hidden = false;
    }

    private void bindMaintainers()
    {
        WhereClip where = new WhereClip();
        EntityArrayList<SYS_USER> list = userManager.GetListByWhere(where);
        foreach (SYS_USER user in list)
        {
            Ext.Net.ListItem item = new Ext.Net.ListItem(user.Real_name, user.USER_ID);
            cbohandle_name.Items.Add(item);
            cbohandle_name1.Items.Add(item);
        }
    }

    //添加计划确定
    protected void btnSave_Click(object sender, EventArgs e)
    {
        if (this.hideMode.Text == "Add")//添加
        {
            Eqm_MeasPlan record = new Eqm_MeasPlan();
            EntityArrayList<Eqm_Measure> listAdd = measureManager.GetListByWhere(Eqm_Measure._.JL_code == txtJL_code.Text);
            if (listAdd.Count > 0)
            {
                record.Mp_planid = GetMaxPlanID();
                record.JL_code = Convert.ToInt32(txtJL_code.Text);
                record.JL_planDate = txtJL_planDate.SelectedDate.ToShortDateString();
                if (txtJL_planday.Text == "")
                {
                    record.JL_PlanDay = 0;
                }
                record.JL_PlanDay = Convert.ToDecimal(txtJL_planday.Text);
                record.Plan_state = txtPlan_state.SelectedItem.Value.ToString();
                record.Handle_name = cbohandle_name.Text;
                if (txtJL_RealDay.Text != "")
                {
                    record.JL_RealDay = Convert.ToInt32(txtJL_RealDay.Text);
                }
                else { record.JL_RealDay = 0; }
                record.JL_RealDate = txtJL_RealDate.SelectedDate.ToShortDateString();
                record.Mp_result = txtMp_result.Text;
                if (cbohandle_name.SelectedItem.Value != null)
                {
                    record.Handle_name = cbohandle_name.SelectedItem.Value.ToString();
                }
                else
                {
                    record.Handle_name = null;
                }

            }
            else { X.Msg.Alert("提示", "代码不存在，请重新输入！").Show(); return; }

            if (measPlanManager.Insert(record) >= 0)
            {
                this.AppendWebLog("计量校准计划添加", "添加计划号：" + record.Mp_planid);
                winSave.Hidden = true;
                bindList();
                X.Msg.Alert("提示", "添加完成！").Show();
            }
            else
            {
                X.Msg.Alert("提示", "添加失败！").Show();
            }
        }
        else//修改
        {
            Eqm_MeasPlan record = measPlanManager.GetById(Convert.ToInt64(hideObjID.Text));

            if (record != null)
            {
                record.JL_code = Convert.ToInt32(txtJL_code.Text);
                record.JL_planDate = txtJL_planDate.SelectedDate.ToShortDateString();
                record.JL_PlanDay = Convert.ToDecimal(txtJL_planday.Text);
                record.Plan_state = txtPlan_state.SelectedItem.Value.ToString();
                record.Handle_name = cbohandle_name.Text;
                if (txtJL_RealDay.Text != "")
                {
                    record.JL_RealDay = Convert.ToDecimal(txtJL_RealDay.Text);
                }
                else { record.JL_RealDay = 0; }
                record.JL_RealDate = txtJL_RealDate.SelectedDate.ToShortDateString();
                record.Mp_result = txtMp_result.Text;

                if (cbohandle_name.SelectedItem.Value != null)
                {
                    record.Handle_name = cbohandle_name.SelectedItem.Value.ToString();
                }
                else
                {
                    record.Handle_name = null;
                }

                if (measPlanManager.Update(record) >= 0)
                {
                    this.AppendWebLog("计量校准计划修改", "修改计划号：" + record.Mp_planid);
                    winSave.Hidden = true;
                    bindList();
                    X.Msg.Alert("提示", "修改完成！").Show();
                }
                else
                {
                    X.Msg.Alert("提示", "修改失败！").Show();
                }
            }
        }
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        winSave.Hidden = true;
    }
    #endregion

    #region 信息列表事件响应
    [DirectMethod]
    public void pnlList_Edit(string ObjID)
    {
        EntityArrayList<Eqm_MeasPlan> list = measPlanManager.GetListByWhere(Eqm_MeasPlan._.Mp_planid == ObjID);
        if(list.Count>0)
        {
            Eqm_MeasPlan record = list[0];

            if (record != null)
            {
                if (record.Plan_state == "2")
                { X.Msg.Alert("提示", "该计划已完成，不允许修改！").Show(); return; }
                if (record.Plan_state == "3")
                { X.Msg.Alert("提示", "该计划已取消，不允许修改！").Show(); return; }
                txtJL_code.Text = record.JL_code.ToString();
                txtJL_planDate.Text = record.JL_planDate;
                txtJL_planday.Text = record.JL_PlanDay.ToString();
                txtPlan_state.SetValue(record.Plan_state);
                //   cbohandle_name.SetValue(record.Handle_name);
                txtJL_RealDay.Text = record.JL_RealDay.ToString();
                txtJL_RealDate.Text = record.JL_RealDate;
                txtMp_result.Text = record.Mp_result;
                cbohandle_name.SetValue(record.Handle_name);

                hideObjID.Text = ObjID;
                this.hideMode.Text = "Edit";

                this.winSave.Hidden = false;
            }
            else
            {
                bindList();
                X.Msg.Alert("提示", "此条记录已经不存在！").Show();
            }
        }
    }

    //自动生成计划号
    protected string GetMaxPlanID()
    {
        string planID = "";
        EntityArrayList<Eqm_MeasPlan> list = measPlanManager.GetAllListOrder(Eqm_MeasPlan._.Mp_planid.Desc);
        if (list.Count > 0)
        {
            planID = list[0].Mp_planid;
            if (planID.Substring(0, 8) == DateTime.Now.Date.ToString("yyyyMMdd"))
            {
                planID = planID.Substring(0, 8) + (Convert.ToInt32(planID.Substring(8, 4)) + 1).ToString().PadLeft(4, '0');
            }
            else
            {
                planID = DateTime.Now.Date.ToString("yyyyMMdd") + "0001";
            }
        }
        return planID;
    }

    //计划删除
    [DirectMethod]
    public void pnlList_Delete(string ObjID)
    {
        Eqm_MeasPlan record = measPlanManager.GetById(Convert.ToInt64(ObjID));
        if (record.Plan_state == "2")
        { X.Msg.Alert("提示", "该计划已完成，不允许删除！").Show(); return; }
        measPlanManager.Delete(Convert.ToInt64(ObjID));
      

        this.AppendWebLog("计量校准计划删除", "修改计划号：" + record.Mp_planid);
        bindList();
        X.Msg.Alert("提示", "删除完成！").Show();
    }

  

    //计划完成
    protected void btnCompletePlan_Click(object sender, EventArgs e)
    {

        if (rowSelectMuti.SelectedRows.Count == 0)
        {
            X.Msg.Alert("提示", "您没有选择任何行,请选择").Show();
            return;
        }
        string objid = string.Empty;
        foreach (SelectedRow row in this.rowSelectMuti.SelectedRows)
        {
            objid = row.RecordID;
            EntityArrayList<Eqm_MeasPlan> listEdit = measPlanManager.GetListByWhere(Eqm_MeasPlan._.Mp_planid == row.RecordID);
        //    Eqm_MeasPlan record = new Eqm_MeasPlan();
             Eqm_MeasPlan record = listEdit[0];
             if (listEdit.Count == 0)
             {
                 X.Msg.Alert("提示", "无此计划号，完成失败！").Show();
                 return;
             }
             if (record.Plan_state == "2")
            { X.Msg.Alert("提示", "该计划已完成，不允许重复操作！").Show(); return; }
             if (record.Plan_state == "3")
            { X.Msg.Alert("提示", "该计划已取消，不允许完成！").Show(); return; }

            cbohandle_name1.SetValue(record.Handle_name);
            txtJL_RealDay1.Text = record.JL_RealDay.ToString();
            txtJL_RealDate1.SelectedDate = Convert.ToDateTime(record.JL_RealDate);
            if (record.Mp_result != null)
            {
                txtMp_result1.Text = record.Mp_result.ToString();
            }
            else { txtMp_result1.Text = ""; }
            //if (record.Handle_name != null)
            //{
            //    cbohandle_name1.SetValue(record.Handle_name);
            //}
            //else
            //{
            //    record.Handle_name = null;
            //}

            HiddenSaveObjid.Text = objid;

            this.winDone.Hidden = false;
        }
        }

    protected void btnSave_Click1(object sender, EventArgs e)
    {
        EntityArrayList<Eqm_MeasPlan> listEdit = measPlanManager.GetListByWhere(Eqm_MeasPlan._.Mp_planid == HiddenSaveObjid.Text);
        if (listEdit.Count == 0)
        {
            X.Msg.Alert("提示", "无此完成此计划，完成失败！").Show();
            return;
        }
        Eqm_MeasPlan record = listEdit[0];
        if (record != null)
        {
            record.JL_RealDay = Convert.ToDecimal(txtJL_RealDay1.Text);
            record.JL_RealDate = txtJL_RealDate1.SelectedDate.ToShortDateString();
            record.Handle_name = cbohandle_name1.SelectedItem.Value.ToString();
            record.Mp_result = txtMp_result1.Text;
            record.Plan_state = "2";

            if (measPlanManager.Update(record) >= 0)
            {
                this.AppendWebLog("计划完成", "完成计划号：" + record.Mp_planid);
                this.winDone.Hidden = true;
                bindList();
                X.Msg.Alert("提示", "完成成功！").Show();
            }
            else
            {
                X.Msg.Alert("提示", "完成失败！").Show();
            }
        }
    }


    /// <summary>
    /// 取消计划
    /// </summary>
    /// <returns></returns>
    [Ext.Net.DirectMethod()]
     public string btnCancel_Click()
    {
        if (rowSelectMuti.SelectedRows.Count == 0)
        {
            return "您没有选择任何行,请选择";
        }
        string objid = string.Empty;
        foreach (SelectedRow row in this.rowSelectMuti.SelectedRows)
        {
            objid = row.RecordID;
            EntityArrayList<Eqm_MeasPlan> listEdit = measPlanManager.GetListByWhere(Eqm_MeasPlan._.Mp_planid == row.RecordID);
            if (listEdit.Count == 0)
            {
                return "无此计划号，修改失败！";
            }
            Eqm_MeasPlan record = listEdit[0];
            if (record.Plan_state == "2")
            { X.Msg.Alert("提示", "该计划已完成，不允许取消！").Show(); }
            else if (record.Plan_state == "3")
            { X.Msg.Alert("提示", "该计划已取消，不允许重复操作！").Show(); }
            else
            {
                record.Plan_state = "3";

                if (measPlanManager.Update(record) >= 0)
                {
                    this.AppendWebLog("计划号已取消", "取消计划号：" + record.Mp_planid);
                    bindList();
                    return "取消成功！";
                }
                else
                {
                    return "取消失败！";
                }
            }
            
        }
        return "true";
    }

    #endregion


    [Ext.Net.DirectMethod()]
    public void btnCancel_Click1(object sender, EventArgs e)
    {
        this.winDone.Close();
    }
}