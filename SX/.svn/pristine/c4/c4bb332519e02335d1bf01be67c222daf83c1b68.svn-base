//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Ppt_EquipState2ArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Ppt_EquipState2> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Ppt_EquipState2\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Ppt_EquipState2\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"Equip_Code\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"Equip_Code\" mappingColumnType=\"System.String\" sqlType=\"char(5)\" isPrima" +
        "ryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"State\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"State\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"State2\" type=\"System.N" +
        "ullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"State2\" mappingColumnType=\"System.Nullabl" +
        "e`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </" +
        "Properties>\r\n</EntityConfiguration>")]
    public partial class Ppt_EquipState2 : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Ppt_EquipState2EntityConfiguration;
        
        protected string _Equip_Code;
        
        protected string _State;
        
        protected global::System.Int32? _State2;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Ppt_EquipState2 left, global::Mesnac.Entity.Ppt_EquipState2 right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Ppt_EquipState2 left, global::Mesnac.Entity.Ppt_EquipState2 right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Equip_Code {
            get {
                return this._Equip_Code;
            }
            set {
                this.OnPropertyChanged("Equip_Code", this._Equip_Code, value);
                this._Equip_Code = value;
            }
        }
        
        public string State {
            get {
                return this._State;
            }
            set {
                this.OnPropertyChanged("State", this._State, value);
                this._State = value;
            }
        }
        
        public global::System.Int32? State2 {
            get {
                return this._State2;
            }
            set {
                this.OnPropertyChanged("State2", this._State2, value);
                this._State2 = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Ppt_EquipState2._Ppt_EquipState2EntityConfiguration == null)) {
                Ppt_EquipState2._Ppt_EquipState2EntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Ppt_EquipState2");
            }
            return Ppt_EquipState2._Ppt_EquipState2EntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Equip_Code,
                    this._State,
                    this._State2};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Equip_Code = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._State = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._State2 = reader.GetInt32(2);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Equip_Code = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._State = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._State2 = ((System.Nullable<int>)(row[2]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Ppt_EquipState2).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Ppt_EquipState2)(obj)).isAttached) 
                        && (this.Equip_Code == ((global::Mesnac.Entity.Ppt_EquipState2)(obj)).Equip_Code));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Equip_Code = new NBear.Common.PropertyItem("Equip_Code", "Mesnac.Entity.Ppt_EquipState2");
            
            protected NBear.Common.PropertyItem _State = new NBear.Common.PropertyItem("State", "Mesnac.Entity.Ppt_EquipState2");
            
            protected NBear.Common.PropertyItem _State2 = new NBear.Common.PropertyItem("State2", "Mesnac.Entity.Ppt_EquipState2");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Equip_Code {
                get {
                    if ((aliasName == null)) {
                        return _Equip_Code;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Equip_Code", _Equip_Code.EntityConfiguration, _Equip_Code.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem State {
                get {
                    if ((aliasName == null)) {
                        return _State;
                    }
                    else {
                        return new NBear.Common.PropertyItem("State", _State.EntityConfiguration, _State.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem State2 {
                get {
                    if ((aliasName == null)) {
                        return _State2;
                    }
                    else {
                        return new NBear.Common.PropertyItem("State2", _State2.EntityConfiguration, _State2.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
