//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasStorageArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasStorage> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasStorage\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatchU" +
        "pdate=\"false\" isRelation=\"false\" mappingName=\"BasStorage\" batchSize=\"10\">\r\n  <Pr" +
        "operties>\r\n    <Property name=\"ObjID\" type=\"System.Nullable`1[System.Int32]\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StorageID\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"StorageID\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"StorageName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"StorageName\" mappingColumnType=" +
        "\"System.String\" sqlType=\"nvarchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"UsedFlag\" type=\"System.String\" isInherited=\"false\" isReadO" +
        "nly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"UsedFlag\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"StorageLevel\" type=\"System.Nullable`1[System.Int3" +
        "2]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"StorageLevel\" mappingColumnType=\"System.Nullable`1[System.Int32" +
        "]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "StorageHigherLevel\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StorageHigherLevel\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"LastStorageFlag\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"LastStorageFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"UsedDuration\" type=\"Syste" +
        "m.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"UsedDuration\" mappingColumnType=\"System.String\" sqlType=\"" +
        "varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Using" +
        "Duration\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"UsingDuration\" mappingColumnType=\"Sy" +
        "stem.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"DurationBeginDate\" type=\"System.Nullable`1[System.Int32]\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"DurationBeginDate\" mappingColumnType=\"System.Nullable`1[System.Int32]\" s" +
        "qlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Dura" +
        "tionEndDate\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOn" +
        "ly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey" +
        "=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInde" +
        "xPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DurationEndDate" +
        "\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ERPCode\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"ERPCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CreatePerson\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"CreatePerson\" mappingColumnType=\"System.String\" sql" +
        "Type=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"CreateDate\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"true\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"CreateDate\" mappingColumnType=\"" +
        "System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"ModifyPerson\" type=\"System.String\" isInherited=\"false\" isRead" +
        "Only=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ModifyPerson\"" +
        " mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"ModifyDate\" type=\"System.DateTime\" isInhe" +
        "rited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"ModifyDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ResponsiblePerson\" type" +
        "=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"ResponsiblePerson\" mappingColumnType=\"System.Strin" +
        "g\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"SeqIdx\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isRead" +
        "Only=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SeqIdx\" mappi" +
        "ngColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"CancelFlag\" type=\"System.String\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"CancelFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"Syste" +
        "m.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"ch" +
        "ar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"nvarchar(60)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "IsVirtual\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"IsVirtual\" mappingColumnType=\"Syste" +
        "m.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"StorageType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"tru" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StorageType\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"LockFlag\" type=\"System.String\" isInherited=\"false\" isR" +
        "eadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"LockFlag\" " +
        "mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"WorkShopCode\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"WorkShopCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasStorage : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasStorageEntityConfiguration;
        
        protected global::System.Int32? _ObjID;
        
        protected string _StorageID;
        
        protected string _StorageName;
        
        protected string _UsedFlag;
        
        protected global::System.Int32? _StorageLevel;
        
        protected string _StorageHigherLevel;
        
        protected string _LastStorageFlag;
        
        protected string _UsedDuration;
        
        protected string _UsingDuration;
        
        protected global::System.Int32? _DurationBeginDate;
        
        protected global::System.Int32? _DurationEndDate;
        
        protected string _ERPCode;
        
        protected string _CreatePerson;
        
        protected global::System.DateTime _CreateDate;
        
        protected string _ModifyPerson;
        
        protected global::System.DateTime _ModifyDate;
        
        protected string _ResponsiblePerson;
        
        protected global::System.Int32? _SeqIdx;
        
        protected string _CancelFlag;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        protected string _IsVirtual;
        
        protected string _StorageType;
        
        protected string _LockFlag;
        
        protected string _WorkShopCode;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasStorage left, global::Mesnac.Entity.BasStorage right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasStorage left, global::Mesnac.Entity.BasStorage right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string StorageID {
            get {
                return this._StorageID;
            }
            set {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }
        
        public string StorageName {
            get {
                return this._StorageName;
            }
            set {
                this.OnPropertyChanged("StorageName", this._StorageName, value);
                this._StorageName = value;
            }
        }
        
        public string UsedFlag {
            get {
                return this._UsedFlag;
            }
            set {
                this.OnPropertyChanged("UsedFlag", this._UsedFlag, value);
                this._UsedFlag = value;
            }
        }
        
        public global::System.Int32? StorageLevel {
            get {
                return this._StorageLevel;
            }
            set {
                this.OnPropertyChanged("StorageLevel", this._StorageLevel, value);
                this._StorageLevel = value;
            }
        }
        
        public string StorageHigherLevel {
            get {
                return this._StorageHigherLevel;
            }
            set {
                this.OnPropertyChanged("StorageHigherLevel", this._StorageHigherLevel, value);
                this._StorageHigherLevel = value;
            }
        }
        
        public string LastStorageFlag {
            get {
                return this._LastStorageFlag;
            }
            set {
                this.OnPropertyChanged("LastStorageFlag", this._LastStorageFlag, value);
                this._LastStorageFlag = value;
            }
        }
        
        public string UsedDuration {
            get {
                return this._UsedDuration;
            }
            set {
                this.OnPropertyChanged("UsedDuration", this._UsedDuration, value);
                this._UsedDuration = value;
            }
        }
        
        public string UsingDuration {
            get {
                return this._UsingDuration;
            }
            set {
                this.OnPropertyChanged("UsingDuration", this._UsingDuration, value);
                this._UsingDuration = value;
            }
        }
        
        public global::System.Int32? DurationBeginDate {
            get {
                return this._DurationBeginDate;
            }
            set {
                this.OnPropertyChanged("DurationBeginDate", this._DurationBeginDate, value);
                this._DurationBeginDate = value;
            }
        }
        
        public global::System.Int32? DurationEndDate {
            get {
                return this._DurationEndDate;
            }
            set {
                this.OnPropertyChanged("DurationEndDate", this._DurationEndDate, value);
                this._DurationEndDate = value;
            }
        }
        
        public string ERPCode {
            get {
                return this._ERPCode;
            }
            set {
                this.OnPropertyChanged("ERPCode", this._ERPCode, value);
                this._ERPCode = value;
            }
        }
        
        public string CreatePerson {
            get {
                return this._CreatePerson;
            }
            set {
                this.OnPropertyChanged("CreatePerson", this._CreatePerson, value);
                this._CreatePerson = value;
            }
        }
        
        public global::System.DateTime CreateDate {
            get {
                return this._CreateDate;
            }
            set {
                this.OnPropertyChanged("CreateDate", this._CreateDate, value);
                this._CreateDate = value;
            }
        }
        
        public string ModifyPerson {
            get {
                return this._ModifyPerson;
            }
            set {
                this.OnPropertyChanged("ModifyPerson", this._ModifyPerson, value);
                this._ModifyPerson = value;
            }
        }
        
        public global::System.DateTime ModifyDate {
            get {
                return this._ModifyDate;
            }
            set {
                this.OnPropertyChanged("ModifyDate", this._ModifyDate, value);
                this._ModifyDate = value;
            }
        }
        
        public string ResponsiblePerson {
            get {
                return this._ResponsiblePerson;
            }
            set {
                this.OnPropertyChanged("ResponsiblePerson", this._ResponsiblePerson, value);
                this._ResponsiblePerson = value;
            }
        }
        
        public global::System.Int32? SeqIdx {
            get {
                return this._SeqIdx;
            }
            set {
                this.OnPropertyChanged("SeqIdx", this._SeqIdx, value);
                this._SeqIdx = value;
            }
        }
        
        public string CancelFlag {
            get {
                return this._CancelFlag;
            }
            set {
                this.OnPropertyChanged("CancelFlag", this._CancelFlag, value);
                this._CancelFlag = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string IsVirtual {
            get {
                return this._IsVirtual;
            }
            set {
                this.OnPropertyChanged("IsVirtual", this._IsVirtual, value);
                this._IsVirtual = value;
            }
        }
        
        public string StorageType {
            get {
                return this._StorageType;
            }
            set {
                this.OnPropertyChanged("StorageType", this._StorageType, value);
                this._StorageType = value;
            }
        }
        
        public string LockFlag {
            get {
                return this._LockFlag;
            }
            set {
                this.OnPropertyChanged("LockFlag", this._LockFlag, value);
                this._LockFlag = value;
            }
        }
        
        public string WorkShopCode {
            get {
                return this._WorkShopCode;
            }
            set {
                this.OnPropertyChanged("WorkShopCode", this._WorkShopCode, value);
                this._WorkShopCode = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasStorage._BasStorageEntityConfiguration == null)) {
                BasStorage._BasStorageEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasStorage");
            }
            return BasStorage._BasStorageEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._StorageID,
                    this._StorageName,
                    this._UsedFlag,
                    this._StorageLevel,
                    this._StorageHigherLevel,
                    this._LastStorageFlag,
                    this._UsedDuration,
                    this._UsingDuration,
                    this._DurationBeginDate,
                    this._DurationEndDate,
                    this._ERPCode,
                    this._CreatePerson,
                    this._CreateDate,
                    this._ModifyPerson,
                    this._ModifyDate,
                    this._ResponsiblePerson,
                    this._SeqIdx,
                    this._CancelFlag,
                    this._DeleteFlag,
                    this._Remark,
                    this._IsVirtual,
                    this._StorageType,
                    this._LockFlag,
                    this._WorkShopCode};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StorageID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._StorageName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._UsedFlag = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._StorageLevel = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._StorageHigherLevel = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._LastStorageFlag = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._UsedDuration = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._UsingDuration = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._DurationBeginDate = reader.GetInt32(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._DurationEndDate = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._ERPCode = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._CreatePerson = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._CreateDate = this.GetDateTime(reader, 13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._ModifyPerson = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._ModifyDate = this.GetDateTime(reader, 15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._ResponsiblePerson = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._SeqIdx = reader.GetInt32(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._CancelFlag = reader.GetString(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._DeleteFlag = reader.GetString(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._Remark = reader.GetString(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._IsVirtual = reader.GetString(21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._StorageType = reader.GetString(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._LockFlag = reader.GetString(23);
            }
            if ((false == reader.IsDBNull(24))) {
                this._WorkShopCode = reader.GetString(24);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StorageID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._StorageName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._UsedFlag = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._StorageLevel = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._StorageHigherLevel = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._LastStorageFlag = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._UsedDuration = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._UsingDuration = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._DurationBeginDate = ((System.Nullable<int>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._DurationEndDate = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._ERPCode = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._CreatePerson = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._CreateDate = this.GetDateTime(row, 13);
            }
            if ((false == row.IsNull(14))) {
                this._ModifyPerson = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._ModifyDate = this.GetDateTime(row, 15);
            }
            if ((false == row.IsNull(16))) {
                this._ResponsiblePerson = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._SeqIdx = ((System.Nullable<int>)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._CancelFlag = ((string)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._DeleteFlag = ((string)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._Remark = ((string)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._IsVirtual = ((string)(row[21]));
            }
            if ((false == row.IsNull(22))) {
                this._StorageType = ((string)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._LockFlag = ((string)(row[23]));
            }
            if ((false == row.IsNull(24))) {
                this._WorkShopCode = ((string)(row[24]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasStorage).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasStorage)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _StorageName = new NBear.Common.PropertyItem("StorageName", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _UsedFlag = new NBear.Common.PropertyItem("UsedFlag", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _StorageLevel = new NBear.Common.PropertyItem("StorageLevel", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _StorageHigherLevel = new NBear.Common.PropertyItem("StorageHigherLevel", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _LastStorageFlag = new NBear.Common.PropertyItem("LastStorageFlag", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _UsedDuration = new NBear.Common.PropertyItem("UsedDuration", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _UsingDuration = new NBear.Common.PropertyItem("UsingDuration", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _DurationBeginDate = new NBear.Common.PropertyItem("DurationBeginDate", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _DurationEndDate = new NBear.Common.PropertyItem("DurationEndDate", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _ERPCode = new NBear.Common.PropertyItem("ERPCode", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _CreatePerson = new NBear.Common.PropertyItem("CreatePerson", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _CreateDate = new NBear.Common.PropertyItem("CreateDate", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _ModifyPerson = new NBear.Common.PropertyItem("ModifyPerson", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _ModifyDate = new NBear.Common.PropertyItem("ModifyDate", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _ResponsiblePerson = new NBear.Common.PropertyItem("ResponsiblePerson", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _SeqIdx = new NBear.Common.PropertyItem("SeqIdx", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _CancelFlag = new NBear.Common.PropertyItem("CancelFlag", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _IsVirtual = new NBear.Common.PropertyItem("IsVirtual", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _StorageType = new NBear.Common.PropertyItem("StorageType", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _LockFlag = new NBear.Common.PropertyItem("LockFlag", "Mesnac.Entity.BasStorage");
            
            protected NBear.Common.PropertyItem _WorkShopCode = new NBear.Common.PropertyItem("WorkShopCode", "Mesnac.Entity.BasStorage");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageID {
                get {
                    if ((aliasName == null)) {
                        return _StorageID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageName {
                get {
                    if ((aliasName == null)) {
                        return _StorageName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageName", _StorageName.EntityConfiguration, _StorageName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UsedFlag {
                get {
                    if ((aliasName == null)) {
                        return _UsedFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UsedFlag", _UsedFlag.EntityConfiguration, _UsedFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageLevel {
                get {
                    if ((aliasName == null)) {
                        return _StorageLevel;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageLevel", _StorageLevel.EntityConfiguration, _StorageLevel.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageHigherLevel {
                get {
                    if ((aliasName == null)) {
                        return _StorageHigherLevel;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageHigherLevel", _StorageHigherLevel.EntityConfiguration, _StorageHigherLevel.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastStorageFlag {
                get {
                    if ((aliasName == null)) {
                        return _LastStorageFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastStorageFlag", _LastStorageFlag.EntityConfiguration, _LastStorageFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UsedDuration {
                get {
                    if ((aliasName == null)) {
                        return _UsedDuration;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UsedDuration", _UsedDuration.EntityConfiguration, _UsedDuration.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UsingDuration {
                get {
                    if ((aliasName == null)) {
                        return _UsingDuration;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UsingDuration", _UsingDuration.EntityConfiguration, _UsingDuration.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DurationBeginDate {
                get {
                    if ((aliasName == null)) {
                        return _DurationBeginDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DurationBeginDate", _DurationBeginDate.EntityConfiguration, _DurationBeginDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DurationEndDate {
                get {
                    if ((aliasName == null)) {
                        return _DurationEndDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DurationEndDate", _DurationEndDate.EntityConfiguration, _DurationEndDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ERPCode {
                get {
                    if ((aliasName == null)) {
                        return _ERPCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ERPCode", _ERPCode.EntityConfiguration, _ERPCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreatePerson {
                get {
                    if ((aliasName == null)) {
                        return _CreatePerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreatePerson", _CreatePerson.EntityConfiguration, _CreatePerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreateDate {
                get {
                    if ((aliasName == null)) {
                        return _CreateDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreateDate", _CreateDate.EntityConfiguration, _CreateDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ModifyPerson {
                get {
                    if ((aliasName == null)) {
                        return _ModifyPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ModifyPerson", _ModifyPerson.EntityConfiguration, _ModifyPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ModifyDate {
                get {
                    if ((aliasName == null)) {
                        return _ModifyDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ModifyDate", _ModifyDate.EntityConfiguration, _ModifyDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ResponsiblePerson {
                get {
                    if ((aliasName == null)) {
                        return _ResponsiblePerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ResponsiblePerson", _ResponsiblePerson.EntityConfiguration, _ResponsiblePerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SeqIdx {
                get {
                    if ((aliasName == null)) {
                        return _SeqIdx;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SeqIdx", _SeqIdx.EntityConfiguration, _SeqIdx.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CancelFlag {
                get {
                    if ((aliasName == null)) {
                        return _CancelFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CancelFlag", _CancelFlag.EntityConfiguration, _CancelFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsVirtual {
                get {
                    if ((aliasName == null)) {
                        return _IsVirtual;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsVirtual", _IsVirtual.EntityConfiguration, _IsVirtual.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageType {
                get {
                    if ((aliasName == null)) {
                        return _StorageType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageType", _StorageType.EntityConfiguration, _StorageType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LockFlag {
                get {
                    if ((aliasName == null)) {
                        return _LockFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LockFlag", _LockFlag.EntityConfiguration, _LockFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkShopCode {
                get {
                    if ((aliasName == null)) {
                        return _WorkShopCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkShopCode", _WorkShopCode.EntityConfiguration, _WorkShopCode.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
