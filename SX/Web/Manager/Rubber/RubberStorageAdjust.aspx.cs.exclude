using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;

using Ext.Net;
using NBear.Common;
using Mesnac.Business.Implements;
using Mesnac.Entity;
using Mesnac.Data.Components;
using Mesnac.Business.Interface;
using Mesnac.Data.Implements;

public partial class Manager_Rubber_RubberStorageAdjust : Mesnac.Web.UI.Page
{
    private PpmRubberChkManager manager = new PpmRubberChkManager();
    private BasFactoryInfoManager facManager = new BasFactoryInfoManager();
    private BasMaterialManager materManager = new BasMaterialManager();
    private PpmRubberChkDetailManager detailManager = new PpmRubberChkDetailManager();
    private BasUserManager userManager = new BasUserManager();

    protected PpmStorageManager storageManager = new PpmStorageManager();
    protected PpmStorageDetailManager storageDetailManager = new PpmStorageDetailManager();
    protected PpmRubberStoreoutManager storeoutManager = new PpmRubberStoreoutManager();
    protected PpmRubberStoreoutDetailManager storeoutDetailManager = new PpmRubberStoreoutDetailManager();
    protected PpmRubberAdjustManager adjustManager = new PpmRubberAdjustManager();
    protected PpmRubberAdjustDetailManager adjustDetailManager = new PpmRubberAdjustDetailManager();

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!X.IsAjaxRequest && !IsPostBack)
        {
            if (!string.IsNullOrEmpty(Request.QueryString["BillNO"]))
            {
                string billNo = Request.QueryString["BillNO"].ToString();
                string barcode = Request.QueryString["Barcode"].ToString();
                string orderID = Request.QueryString["OrderID"].ToString();

                txtBillNo.Text = billNo;
                this.storeDetail.DataSource = adjustDetailManager.GetByOtherBillNo(billNo, barcode, orderID);
                this.storeDetail.DataBind();
            }
            else
            {
                txtBeginTime.Text = DateTime.Now.ToString("yyyy-MM-dd");
                txtEndTime.Text = DateTime.Now.ToString("yyyy-MM-dd");
                cbxChkResultFlag.SelectedItem.Value = "all";
            }
        }
    }

    #region 分页相关方法
    private PageResult<PpmRubberAdjust> GetPageResultData(PageResult<PpmRubberAdjust> pageParams)
    {
        PpmRubberAdjustManager.QueryParams queryParams = new PpmRubberAdjustManager.QueryParams();
        queryParams.pageParams = pageParams;
        queryParams.billNo = txtBillNo.Text;
        queryParams.beginDate = Convert.ToDateTime(txtBeginTime.Text);
        queryParams.endDate = Convert.ToDateTime(txtEndTime.Value);

        if (cbxChkResultFlag.SelectedItem.Value != "all")
            queryParams.chkResultFlag = cbxChkResultFlag.SelectedItem.Value;

        return adjustManager.GetTablePageDataBySql(queryParams);
    }

    [DirectMethod]
    public object GridPanelBindData(string action, Dictionary<string, object> extraParams)
    {
        StoreRequestParameters prms = new StoreRequestParameters(extraParams);
        PageResult<PpmRubberAdjust> pageParams = new PageResult<PpmRubberAdjust>();
        pageParams.PageIndex = prms.Page;
        pageParams.PageSize = prms.Limit;
        pageParams.Orderfld = "AdjustDate DESC";

        PageResult<PpmRubberAdjust> lst = GetPageResultData(pageParams);
        DataTable data = lst.DataSet.Tables[0];

        int total = lst.RecordCount;
        return new { data, total };
    }

    protected void RowSelect(object sender, StoreReadDataEventArgs e)
    {
        string billNo = e.Parameters["BillNo"];

        this.storeDetail.DataSource = adjustDetailManager.GetByBillNo(billNo);
        this.storeDetail.DataBind();
    }
    #endregion

    #region 增删改查按钮激发的事件
    [Ext.Net.DirectMethod()]
    public string btnBatchLocked_Click()
    {
        string strBillNo = string.Empty;
        string billNo = string.Empty;
        EntityArrayList<PpmRubberAdjust> adjust = null;
        try
        {
            foreach (SelectedRow row in this.rowSelectMuti.SelectedRows)
            {
                strBillNo += "'" + row.RecordID + "', ";
                billNo = row.RecordID;

                adjust = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == row.RecordID);
                if (adjust[0].ChkResultFlag == "1")
                    return "false";
                else
                {
                    adjust[0].ChkResultFlag = "1";
                    adjust[0].ChkPerson = this.UserID;
                    adjust[0].ChkDate = DateTime.Now;
                    adjustManager.Update(adjust[0]);
                }
            }

            //修改库存量并插入明细数据，首先判断库存数量是否满足出库的数量和重量要求
            string storageID = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == billNo)[0].SourceStorage;
            string targetStorageID = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == billNo)[0].TargetStorage;
            EntityArrayList<PpmRubberAdjustDetail> details = adjustDetailManager.GetListByWhere(PpmRubberAdjustDetail._.BillNo == billNo);

            for (int i = 0; i < details.Count; i++)
            {
                PpmStorage storage = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == storageID && PpmStorage._.StoragePlaceID == details[i].SourceStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode)[0];
                if (storage.Num < details[i].AdjustNum || storage.RealWeight < details[i].AdjustWeight)
                {
                    return "false1";
                }
            }
            for (int i = 0; i < details.Count; i++)
            {
                PpmStorage storage = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == storageID && PpmStorage._.StoragePlaceID == details[i].SourceStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode)[0];

                if (storage.Num == details[i].AdjustNum)
                    storage.RealWeight = 0;
                else
                    storage.RealWeight = storage.RealWeight - storage.PieceWeight * details[i].AdjustNum;
                storage.Num = storage.Num - details[i].AdjustNum;
                if (storage.Num != 0)
                    storage.PieceWeight = Convert.ToDecimal(String.Format("{0:N3}", storage.RealWeight / storage.Num));
                else
                    storage.PieceWeight = 0;
                storageManager.Update(storage);

                EntityArrayList<PpmStorage> storageTarget = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == targetStorageID && PpmStorage._.StoragePlaceID == details[i].TargetStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode);
                if (storageTarget.Count > 0)
                {
                    storageTarget[0].Num = storageTarget[0].Num + details[i].AdjustNum;
                    if (storage.Num == details[i].AdjustNum)
                        storageTarget[0].RealWeight = storageTarget[0].RealWeight + storage.RealWeight;
                    else
                        storageTarget[0].RealWeight = storage.RealWeight + storage.PieceWeight * details[i].AdjustNum;
                    if (storageTarget[0].Num != 0)
                        storageTarget[0].PieceWeight = Convert.ToDecimal(String.Format("{0:N3}", storageTarget[0].RealWeight / storageTarget[0].Num));
                    else
                        storageTarget[0].PieceWeight = 0;
                    storageManager.Update(storageTarget[0]);
                }
                else
                {
                    PpmStorage store = new PpmStorage();
                    store.Barcode = details[i].Barcode;
                    store.StorageID = targetStorageID;
                    store.StoragePlaceID = details[i].TargetStoragePlace;
                    store.ProductNo = details[i].ProductNo;
                    store.MaterCode = details[i].MaterCode;
                    store.ProcDate = details[i].ProcDate;
                    store.Num = details[i].AdjustNum;
                    store.PieceWeight = details[i].PieceWeight;
                    store.RealWeight = details[i].AdjustWeight;
                    store.RecordDate = DateTime.Now;
                    //store.Remark = this.userManager.UserID + "调拨入库";

                    storageManager.Insert(store);
                }

                PpmStorageDetail detail = new PpmStorageDetail();
                detail.Barcode = storage.Barcode;
                detail.OrderID = storageDetailManager.GetOrderID(detail.Barcode) + 1;
                detail.StorageID = storage.StorageID;
                detail.StoragePlaceID = storage.StoragePlaceID;
                detail.StoreInOut = "O";
                detail.RecordDate = DateTime.Now;
                detail.Num = details[i].AdjustNum;
                detail.PieceWeight = details[i].PieceWeight;
                if (storage.Num == details[i].AdjustNum)
                    detail.Weight = storage.RealWeight;
                else
                    detail.Weight = storage.PieceWeight * details[i].AdjustNum;
                detail.InaccountDuration = string.Format("{0:yyyyMM}", adjust[0].AdjustDate);
                detail.InaccountDate = adjust[0].AdjustDate;
                detail.BillType = "1003";
                detail.SourceBillNo = details[i].BillNo;
                detail.SourceOrderID = details[i].OrderID;
                //detail.Remark = this.userManager.UserID + "调拨明细出库";

                storageDetailManager.Insert(detail);

                PpmStorageDetail detailIn = new PpmStorageDetail();
                detailIn.Barcode = storage.Barcode;
                detailIn.OrderID = storageDetailManager.GetOrderID(detail.Barcode) + 1;
                detailIn.StorageID = targetStorageID;
                detailIn.StoragePlaceID = details[i].TargetStoragePlace;
                detailIn.StoreInOut = "I";
                detailIn.RecordDate = DateTime.Now;
                detailIn.Num = details[i].AdjustNum;
                detailIn.PieceWeight = details[i].PieceWeight;
                if (storage.Num == details[i].AdjustNum)
                    detailIn.Weight = storage.RealWeight;
                else
                    detailIn.Weight = storage.PieceWeight * details[i].AdjustNum;
                detailIn.InaccountDuration = string.Format("{0:yyyyMM}", adjust[0].AdjustDate);
                detailIn.InaccountDate = adjust[0].AdjustDate;
                detailIn.BillType = "1003";
                detailIn.SourceBillNo = details[i].BillNo;
                detailIn.SourceOrderID = details[i].OrderID;
                //detailIn.Remark = this.userManager.UserID + "调拨明细入库";

                storageDetailManager.Insert(detailIn);
            }

            pageToolBar.DoRefresh();
            return "调拨成功！";
        }
        catch
        {
            return "调拨失败！";
        }
    }

    [Ext.Net.DirectMethod()]
    public string btnCancelLocked_Click()
    {
        string strBillNo = string.Empty;
        string billNo = string.Empty;
        EntityArrayList<PpmRubberAdjust> adjust = null;
        try
        {
            foreach (SelectedRow row in this.rowSelectMuti.SelectedRows)
            {
                strBillNo += "'" + row.RecordID + "', ";
                billNo = row.RecordID;

                adjust = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == row.RecordID);
                if (adjust[0].ChkResultFlag == "0")
                    return "false";
                else
                {
                    adjust[0].ChkResultFlag = "0";
                    adjust[0].ChkPerson = this.UserID;
                    //adjust[0].ChkDate = DateTime.MinValue;
                    adjustManager.Update(adjust[0]);
                }
            }

            //修改库存量并插入明细数据，首先判断库存数量是否满足出库的数量和重量要求
            string storageID = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == billNo)[0].SourceStorage;
            string targetStorageID = adjustManager.GetListByWhere(PpmRubberAdjust._.BillNo == billNo)[0].TargetStorage;
            EntityArrayList<PpmRubberAdjustDetail> details = adjustDetailManager.GetListByWhere(PpmRubberAdjustDetail._.BillNo == billNo);

            for (int i = 0; i < details.Count; i++)
            {
                PpmStorage storage = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == targetStorageID && PpmStorage._.StoragePlaceID == details[i].TargetStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode)[0];
                if (storage.Num < details[i].AdjustNum || storage.RealWeight < details[i].AdjustWeight)
                {
                    return "false1";
                }
            }
            for (int i = 0; i < details.Count; i++)
            {
                PpmStorage storage = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == storageID && PpmStorage._.StoragePlaceID == details[i].SourceStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode)[0];

                storage.RealWeight = storage.RealWeight + details[i].AdjustWeight;
                storage.Num = storage.Num + details[i].AdjustNum;
                if (storage.Num != 0)
                    storage.PieceWeight = Convert.ToDecimal(String.Format("{0:N3}", storage.RealWeight / storage.Num));
                else
                    storage.PieceWeight = 0;
                storageManager.Update(storage);

                EntityArrayList<PpmStorage> storageTarget = storageManager.GetListByWhere(PpmStorage._.Barcode == details[i].Barcode && PpmStorage._.StorageID == targetStorageID && PpmStorage._.StoragePlaceID == details[i].TargetStoragePlace && PpmStorage._.MaterCode == details[i].MaterCode);
                if (storageTarget.Count > 0)
                {
                    storageTarget[0].Num = storageTarget[0].Num - details[i].AdjustNum;
                    storageTarget[0].RealWeight = storageTarget[0].RealWeight - details[i].AdjustWeight;
                    if (storageTarget[0].Num != 0)
                        storageTarget[0].PieceWeight = Convert.ToDecimal(String.Format("{0:N3}", storageTarget[0].RealWeight / storageTarget[0].Num));
                    else
                        storageTarget[0].PieceWeight = 0;
                    storageManager.Update(storageTarget[0]);
                }

                PpmStorageDetail detail = storageDetailManager.GetListByWhere(PpmStorageDetail._.Barcode == storage.Barcode && PpmStorageDetail._.StorageID == storage.StorageID && PpmStorageDetail._.StoragePlaceID == storage.StoragePlaceID && PpmStorageDetail._.SourceBillNo == details[i].BillNo && PpmStorageDetail._.SourceOrderID == details[i].OrderID)[0];
                storageDetailManager.Delete(detail);

                PpmStorageDetail detailIn = storageDetailManager.GetListByWhere(PpmStorageDetail._.Barcode == storage.Barcode && PpmStorageDetail._.StorageID == targetStorageID && PpmStorageDetail._.StoragePlaceID == details[i].TargetStoragePlace && PpmStorageDetail._.SourceBillNo == details[i].BillNo && PpmStorageDetail._.SourceOrderID == details[i].OrderID)[0];
                storageDetailManager.Delete(detailIn);
            }

            pageToolBar.DoRefresh();
            return "撤销成功！";
        }
        catch (Exception ex)
        {
            return "撤销失败！";
        }
    }

    [Ext.Net.DirectMethod()]
    public string commandcolumn_direct_delete(string billNo)
    {
        try
        {
            PpmRubberAdjust store = adjustManager.GetById(billNo);
            store.DeleteFlag = "1";

            adjustManager.Update(store);
            pageToolBar.DoRefresh();
        }
        catch (Exception e)
        {
            return "删除失败：" + e;
        }
        return "删除成功";
    }

    [Ext.Net.DirectMethod()]
    public string commandcolumn_direct_filed(string billNo)
    {
        //try
        //{
        //    //判断是否可以归档，根据是该数据所对应的明细数据全部全部处理完毕，SendChkFlag标志为1
        //    EntityArrayList<PpmRubberChkDetail> list = detailManager.GetListByWhere(PpmRubberChkDetail._.BillNo == billNo && PpmRubberChkDetail._.SendChkFlag == null && PpmRubberChkDetail._.DeleteFlag == "0");
        //    if (list.Count > 0)
        //    {
        //        return "不能归档：该送检单没有处理完毕，请首先处理该数据对应的明细数据！";
        //    }

        //    PpmRubberChk store = manager.GetById(billNo);
        //    store.FiledFlag = "1";

        //    manager.Update(store);
        //    pageToolBar.DoRefresh();
        //}
        //catch (Exception e)
        //{
        //    return "操作失败：" + e;
        //}
        return "未处理";
    }

    #endregion

    #region 校验方法
    protected void CheckField(object sender, RemoteValidationEventArgs e)
    {
        TextField field = (TextField)sender;

        if (field.Text != "")
        {
            e.Success = true;
        }
        else
        {
            e.Success = false;
            e.ErrorMessage = "此属性必须填写！";
        }
    }

    protected void CheckCombo(object sender, RemoteValidationEventArgs e)
    {
        ComboBox combo = (ComboBox)sender;

        if (combo.SelectedItem.Value != "")
        {
            e.Success = true;
        }
        else
        {
            e.Success = false;
            e.ErrorMessage = "此属性必须选择！";
        }
    }
    #endregion
}