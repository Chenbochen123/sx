//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PmtNonAuditMaterialArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PmtNonAuditMaterial> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PmtNonAuditMaterial\" isReadOnly=\"false\" isAutoPreLoad=\"false" +
        "\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PmtNonAuditMaterial\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjId\" type=\"System.Int32\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tr" +
        "ue\" isNotNull=\"true\" />\r\n    <Property name=\"MaterialName\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"MaterialName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(" +
        "200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MaterialCod" +
        "e\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"MaterialCode\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" map" +
        "pingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PmtNonAuditMaterial : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PmtNonAuditMaterialEntityConfiguration;
        
        protected int _ObjId;
        
        protected string _MaterialName;
        
        protected string _MaterialCode;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PmtNonAuditMaterial left, global::Mesnac.Entity.PmtNonAuditMaterial right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PmtNonAuditMaterial left, global::Mesnac.Entity.PmtNonAuditMaterial right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjId {
            get {
                return this._ObjId;
            }
            set {
                this.OnPropertyChanged("ObjId", this._ObjId, value);
                this._ObjId = value;
            }
        }
        
        public string MaterialName {
            get {
                return this._MaterialName;
            }
            set {
                this.OnPropertyChanged("MaterialName", this._MaterialName, value);
                this._MaterialName = value;
            }
        }
        
        public string MaterialCode {
            get {
                return this._MaterialCode;
            }
            set {
                this.OnPropertyChanged("MaterialCode", this._MaterialCode, value);
                this._MaterialCode = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PmtNonAuditMaterial._PmtNonAuditMaterialEntityConfiguration == null)) {
                PmtNonAuditMaterial._PmtNonAuditMaterialEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PmtNonAuditMaterial");
            }
            return PmtNonAuditMaterial._PmtNonAuditMaterialEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjId,
                    this._MaterialName,
                    this._MaterialCode,
                    this._DeleteFlag,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._MaterialName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._MaterialCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._DeleteFlag = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Remark = reader.GetString(4);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._MaterialName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._MaterialCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._DeleteFlag = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._Remark = ((string)(row[4]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PmtNonAuditMaterial).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PmtNonAuditMaterial)(obj)).isAttached) 
                        && (this.ObjId == ((global::Mesnac.Entity.PmtNonAuditMaterial)(obj)).ObjId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjId = new NBear.Common.PropertyItem("ObjId", "Mesnac.Entity.PmtNonAuditMaterial");
            
            protected NBear.Common.PropertyItem _MaterialName = new NBear.Common.PropertyItem("MaterialName", "Mesnac.Entity.PmtNonAuditMaterial");
            
            protected NBear.Common.PropertyItem _MaterialCode = new NBear.Common.PropertyItem("MaterialCode", "Mesnac.Entity.PmtNonAuditMaterial");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PmtNonAuditMaterial");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PmtNonAuditMaterial");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjId {
                get {
                    if ((aliasName == null)) {
                        return _ObjId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjId", _ObjId.EntityConfiguration, _ObjId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialName {
                get {
                    if ((aliasName == null)) {
                        return _MaterialName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialName", _MaterialName.EntityConfiguration, _MaterialName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialCode", _MaterialCode.EntityConfiguration, _MaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
