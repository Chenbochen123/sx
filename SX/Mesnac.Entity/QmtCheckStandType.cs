//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmtCheckStandTypeArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmtCheckStandType> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmtCheckStandType\" isReadOnly=\"false\" isAutoPreLoad=\"false\" " +
        "isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmtCheckStandType\" batchSi" +
        "ze=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInher" +
        "ited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\"" +
        " isNotNull=\"true\" />\r\n    <Property name=\"StandTypeName\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"StandTypeName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(3" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" " +
        "sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"WorkShopId\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"WorkShopId\" ma" +
        "ppingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"CheckTypeCode\" type=\"System.Nulla" +
        "ble`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"CheckTypeCode\" mappingColumnType=\"System.Null" +
        "able`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"CheckTypeName\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CheckTypeNa" +
        "me\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class QmtCheckStandType : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmtCheckStandTypeEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _StandTypeName;
        
        protected string _DeleteFlag;
        
        protected global::System.Int32? _WorkShopId;
        
        protected global::System.Int32? _CheckTypeCode;
        
        protected string _CheckTypeName;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmtCheckStandType left, global::Mesnac.Entity.QmtCheckStandType right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmtCheckStandType left, global::Mesnac.Entity.QmtCheckStandType right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string StandTypeName {
            get {
                return this._StandTypeName;
            }
            set {
                this.OnPropertyChanged("StandTypeName", this._StandTypeName, value);
                this._StandTypeName = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public global::System.Int32? WorkShopId {
            get {
                return this._WorkShopId;
            }
            set {
                this.OnPropertyChanged("WorkShopId", this._WorkShopId, value);
                this._WorkShopId = value;
            }
        }
        
        public global::System.Int32? CheckTypeCode {
            get {
                return this._CheckTypeCode;
            }
            set {
                this.OnPropertyChanged("CheckTypeCode", this._CheckTypeCode, value);
                this._CheckTypeCode = value;
            }
        }
        
        public string CheckTypeName {
            get {
                return this._CheckTypeName;
            }
            set {
                this.OnPropertyChanged("CheckTypeName", this._CheckTypeName, value);
                this._CheckTypeName = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmtCheckStandType._QmtCheckStandTypeEntityConfiguration == null)) {
                QmtCheckStandType._QmtCheckStandTypeEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmtCheckStandType");
            }
            return QmtCheckStandType._QmtCheckStandTypeEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._StandTypeName,
                    this._DeleteFlag,
                    this._WorkShopId,
                    this._CheckTypeCode,
                    this._CheckTypeName};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StandTypeName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._DeleteFlag = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._WorkShopId = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._CheckTypeCode = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._CheckTypeName = reader.GetString(5);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StandTypeName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._DeleteFlag = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._WorkShopId = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._CheckTypeCode = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._CheckTypeName = ((string)(row[5]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmtCheckStandType).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmtCheckStandType)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.QmtCheckStandType)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.QmtCheckStandType");
            
            protected NBear.Common.PropertyItem _StandTypeName = new NBear.Common.PropertyItem("StandTypeName", "Mesnac.Entity.QmtCheckStandType");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmtCheckStandType");
            
            protected NBear.Common.PropertyItem _WorkShopId = new NBear.Common.PropertyItem("WorkShopId", "Mesnac.Entity.QmtCheckStandType");
            
            protected NBear.Common.PropertyItem _CheckTypeCode = new NBear.Common.PropertyItem("CheckTypeCode", "Mesnac.Entity.QmtCheckStandType");
            
            protected NBear.Common.PropertyItem _CheckTypeName = new NBear.Common.PropertyItem("CheckTypeName", "Mesnac.Entity.QmtCheckStandType");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandTypeName {
                get {
                    if ((aliasName == null)) {
                        return _StandTypeName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandTypeName", _StandTypeName.EntityConfiguration, _StandTypeName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkShopId {
                get {
                    if ((aliasName == null)) {
                        return _WorkShopId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkShopId", _WorkShopId.EntityConfiguration, _WorkShopId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckTypeCode {
                get {
                    if ((aliasName == null)) {
                        return _CheckTypeCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckTypeCode", _CheckTypeCode.EntityConfiguration, _CheckTypeCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckTypeName {
                get {
                    if ((aliasName == null)) {
                        return _CheckTypeName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckTypeName", _CheckTypeName.EntityConfiguration, _CheckTypeName.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
