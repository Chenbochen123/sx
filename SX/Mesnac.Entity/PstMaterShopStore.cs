//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PstMaterShopStoreArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PstMaterShopStore>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PstMaterShopStore\" isReadOnly=\"false\" isAutoPreLoad=\"false\" " +
        "isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PstMaterShopStore\" batchSi" +
        "ze=\"10\">\r\n  <Properties>\r\n    <Property name=\"FID\" type=\"System.Int64\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"FID\" mappingColumnType=\"System.Int64\" sqlType=\"bigint\" isPrimaryKey=\"true\" " +
        "isNotNull=\"true\" />\r\n    <Property name=\"PlanDate\" type=\"System.DateTime\" isInhe" +
        "rited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"PlanDate\" mappingColumnType=\"System.DateTime\" sqlType=\"datetime\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"WorkShopCode\" type=\"Syst" +
        "em.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"WorkShopCode\" mappingColumnType=\"Syst" +
        "em.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"ShiftID\" type=\"System.String\" isInherited=\"false\" isRe" +
        "adOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftID\" m" +
        "appingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"MaterCode\" type=\"System.String\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "MaterCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(13)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastWeight\" type=\"System.Null" +
        "able`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"LastWeight\" mappingColumnType=\"System.Null" +
        "able`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"InWeight\" type=\"System.Nullable`1[System.Decimal]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"InWeight\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlTyp" +
        "e=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"JieBa" +
        "oWeight\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"JieBaoWeight\" ma" +
        "ppingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"OutWeight\" type=\"System.Nul" +
        "lable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"OutWeight\" mappingColumnType=\"System.Null" +
        "able`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"StoreWeight\" type=\"System.Nullable`1[System.Decimal]\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"StoreWeight\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" " +
        "sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"CheckWeight\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CheckWeight" +
        "\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DiffWeight\" type=\"Syste" +
        "m.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"DiffWeight\" mappingColumnType=\"Syste" +
        "m.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"AuditFlag\" type=\"System.Nullable`1[System.Int32]\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"AuditFlag\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sq" +
        "lType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</Entity" +
        "Configuration>")]
    public partial class PstMaterShopStore : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PstMaterShopStoreEntityConfiguration;

        protected long _FID;

        protected global::System.DateTime _PlanDate;

        protected global::System.Int32? _WorkShopCode;

        protected string _ShiftID;

        protected string _MaterCode;

        protected global::System.Decimal? _LastWeight;

        protected global::System.Decimal? _InWeight;

        protected global::System.Decimal? _JieBaoWeight;

        protected global::System.Decimal? _OutWeight;

        protected global::System.Decimal? _StoreWeight;

        protected global::System.Decimal? _CheckWeight;

        protected global::System.Decimal? _DiffWeight;

        protected global::System.Int32? _AuditFlag;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PstMaterShopStore left, global::Mesnac.Entity.PstMaterShopStore right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PstMaterShopStore left, global::Mesnac.Entity.PstMaterShopStore right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public long FID
        {
            get
            {
                return this._FID;
            }
            set
            {
                this.OnPropertyChanged("FID", this._FID, value);
                this._FID = value;
            }
        }

        public global::System.DateTime PlanDate
        {
            get
            {
                return this._PlanDate;
            }
            set
            {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }

        public global::System.Int32? WorkShopCode
        {
            get
            {
                return this._WorkShopCode;
            }
            set
            {
                this.OnPropertyChanged("WorkShopCode", this._WorkShopCode, value);
                this._WorkShopCode = value;
            }
        }

        public string ShiftID
        {
            get
            {
                return this._ShiftID;
            }
            set
            {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }

        public string MaterCode
        {
            get
            {
                return this._MaterCode;
            }
            set
            {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }

        public global::System.Decimal? LastWeight
        {
            get
            {
                return this._LastWeight;
            }
            set
            {
                this.OnPropertyChanged("LastWeight", this._LastWeight, value);
                this._LastWeight = value;
            }
        }

        public global::System.Decimal? InWeight
        {
            get
            {
                return this._InWeight;
            }
            set
            {
                this.OnPropertyChanged("InWeight", this._InWeight, value);
                this._InWeight = value;
            }
        }

        public global::System.Decimal? JieBaoWeight
        {
            get
            {
                return this._JieBaoWeight;
            }
            set
            {
                this.OnPropertyChanged("JieBaoWeight", this._JieBaoWeight, value);
                this._JieBaoWeight = value;
            }
        }

        public global::System.Decimal? OutWeight
        {
            get
            {
                return this._OutWeight;
            }
            set
            {
                this.OnPropertyChanged("OutWeight", this._OutWeight, value);
                this._OutWeight = value;
            }
        }

        public global::System.Decimal? StoreWeight
        {
            get
            {
                return this._StoreWeight;
            }
            set
            {
                this.OnPropertyChanged("StoreWeight", this._StoreWeight, value);
                this._StoreWeight = value;
            }
        }

        public global::System.Decimal? CheckWeight
        {
            get
            {
                return this._CheckWeight;
            }
            set
            {
                this.OnPropertyChanged("CheckWeight", this._CheckWeight, value);
                this._CheckWeight = value;
            }
        }

        public global::System.Decimal? DiffWeight
        {
            get
            {
                return this._DiffWeight;
            }
            set
            {
                this.OnPropertyChanged("DiffWeight", this._DiffWeight, value);
                this._DiffWeight = value;
            }
        }

        public global::System.Int32? AuditFlag
        {
            get
            {
                return this._AuditFlag;
            }
            set
            {
                this.OnPropertyChanged("AuditFlag", this._AuditFlag, value);
                this._AuditFlag = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PstMaterShopStore._PstMaterShopStoreEntityConfiguration == null))
            {
                PstMaterShopStore._PstMaterShopStoreEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PstMaterShopStore");
            }
            return PstMaterShopStore._PstMaterShopStoreEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._FID,
                    this._PlanDate,
                    this._WorkShopCode,
                    this._ShiftID,
                    this._MaterCode,
                    this._LastWeight,
                    this._InWeight,
                    this._JieBaoWeight,
                    this._OutWeight,
                    this._StoreWeight,
                    this._CheckWeight,
                    this._DiffWeight,
                    this._AuditFlag};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._FID = reader.GetInt64(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._PlanDate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._WorkShopCode = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._ShiftID = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._MaterCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._LastWeight = reader.GetDecimal(5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._InWeight = reader.GetDecimal(6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._JieBaoWeight = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._OutWeight = reader.GetDecimal(8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._StoreWeight = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._CheckWeight = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._DiffWeight = reader.GetDecimal(11);
            }
            if ((false == reader.IsDBNull(12)))
            {
                this._AuditFlag = reader.GetInt32(12);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._FID = ((long)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._PlanDate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2)))
            {
                this._WorkShopCode = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._ShiftID = ((string)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._MaterCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._LastWeight = ((System.Nullable<decimal>)(row[5]));
            }
            if ((false == row.IsNull(6)))
            {
                this._InWeight = ((System.Nullable<decimal>)(row[6]));
            }
            if ((false == row.IsNull(7)))
            {
                this._JieBaoWeight = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8)))
            {
                this._OutWeight = ((System.Nullable<decimal>)(row[8]));
            }
            if ((false == row.IsNull(9)))
            {
                this._StoreWeight = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10)))
            {
                this._CheckWeight = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._DiffWeight = ((System.Nullable<decimal>)(row[11]));
            }
            if ((false == row.IsNull(12)))
            {
                this._AuditFlag = ((System.Nullable<int>)(row[12]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PstMaterShopStore).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PstMaterShopStore)(obj)).isAttached)
                        && (this.FID == ((global::Mesnac.Entity.PstMaterShopStore)(obj)).FID));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _FID = new NBear.Common.PropertyItem("FID", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _WorkShopCode = new NBear.Common.PropertyItem("WorkShopCode", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _LastWeight = new NBear.Common.PropertyItem("LastWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _InWeight = new NBear.Common.PropertyItem("InWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _JieBaoWeight = new NBear.Common.PropertyItem("JieBaoWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _OutWeight = new NBear.Common.PropertyItem("OutWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _StoreWeight = new NBear.Common.PropertyItem("StoreWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _CheckWeight = new NBear.Common.PropertyItem("CheckWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _DiffWeight = new NBear.Common.PropertyItem("DiffWeight", "Mesnac.Entity.PstMaterShopStore");

            protected NBear.Common.PropertyItem _AuditFlag = new NBear.Common.PropertyItem("AuditFlag", "Mesnac.Entity.PstMaterShopStore");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem FID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _FID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("FID", _FID.EntityConfiguration, _FID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem PlanDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _PlanDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem WorkShopCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _WorkShopCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("WorkShopCode", _WorkShopCode.EntityConfiguration, _WorkShopCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ShiftID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ShiftID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem MaterCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _MaterCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem LastWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _LastWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("LastWeight", _LastWeight.EntityConfiguration, _LastWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InWeight", _InWeight.EntityConfiguration, _InWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem JieBaoWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _JieBaoWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("JieBaoWeight", _JieBaoWeight.EntityConfiguration, _JieBaoWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem OutWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _OutWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("OutWeight", _OutWeight.EntityConfiguration, _OutWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem StoreWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _StoreWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("StoreWeight", _StoreWeight.EntityConfiguration, _StoreWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CheckWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CheckWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CheckWeight", _CheckWeight.EntityConfiguration, _CheckWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem DiffWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _DiffWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("DiffWeight", _DiffWeight.EntityConfiguration, _DiffWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem AuditFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _AuditFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("AuditFlag", _AuditFlag.EntityConfiguration, _AuditFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
