//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptPlanMgrArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptPlanMgr> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PptPlanMgr\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatch" +
        "Update=\"false\" isRelation=\"false\" mappingName=\"PptPlanMgr\" batchSize=\"10\">\r\n  <P" +
        "roperties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=\"false\" i" +
        "sReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ObjID\" m" +
        "appingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"tru" +
        "e\" />\r\n    <Property name=\"PlanDate\" type=\"System.Nullable`1[System.DateTime]\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"PlanDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sq" +
        "lType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "EquipCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"EquipCode\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"ERPCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ERPCode\" mappingColumnTy" +
        "pe=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"MaterialCode\" type=\"System.String\" isInherited=\"false\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Materia" +
        "lCode\" mappingColumnType=\"System.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"MaterialName\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"MaterialName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(60" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeVersionI" +
        "D\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecipeVersionID\" mapping" +
        "ColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"RecipeName\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"RecipeName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(60)\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecommendTotalCount" +
        "\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0" +
        ")\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Rec" +
        "ommendTotalCount\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"i" +
        "nt\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PlanTotalCoun" +
        "t\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(" +
        "0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Pl" +
        "anTotalCount\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActualOnePlan\" ty" +
        "pe=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ActualO" +
        "nePlan\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActualOneProNum\" type=\"" +
        "System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ActualOnePr" +
        "oNum\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActualOnePlanID\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"ActualOnePlanID\" mappingColumnType=\"System.String\" sq" +
        "lType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"ActualOneRemark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ActualOneRemark\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"ActualTwoPlan\" type=\"System.Nullable`1[System" +
        ".Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"ActualTwoPlan\" mappingColumnType=\"S" +
        "ystem.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"ActualTwoProNum\" type=\"System.Nullable`1[System.Int" +
        "32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit" +
        "=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fal" +
        "se\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"ActualTwoProNum\" mappingColumnType=\"Sys" +
        "tem.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"ActualTwoPlanID\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"A" +
        "ctualTwoPlanID\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActualTwoRemark\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"ActualTwoRemark\" mappingColumnType=\"System.String\" " +
        "sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"ActualThreePlan\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"fals" +
        "e\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"ActualThreePlan\" mappingColumnType=\"System.Nullable`1[System." +
        "Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"ActualThreeProNum\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"fals" +
        "e\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"ActualThreeProNum\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"ActualThreePlanID\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ActualThreePlanID\" " +
        "mappingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"ActualThreeRemark\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"ActualThreeRemark\" mappingColumnType=\"System.String\" sqlType=\"nva" +
        "rchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefOn" +
        "ePlan\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValu" +
        "e=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"RefOnePlan\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefOneProNum\" typ" +
        "e=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RefOnePr" +
        "oNum\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefOneRemark\" type=\"Syste" +
        "m.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"RefOneRemark\" mappingColumnType=\"System.String\" sqlType=" +
        "\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"R" +
        "efTwoPlan\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefault" +
        "Value=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"RefTwoPlan\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"i" +
        "nt\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefTwoProNum\"" +
        " type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)" +
        "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RefT" +
        "woProNum\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefTwoRemark\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"RefTwoRemark\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"RefThreePlan\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlD" +
        "efaultValue=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"RefThreePlan\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sq" +
        "lType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefTh" +
        "reeProNum\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefault" +
        "Value=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"RefThreeProNum\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTyp" +
        "e=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RefThreeR" +
        "emark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"RefThreeRemark\" mappingColumnType=\"Sys" +
        "tem.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"ExecSheet\" type=\"System.String\" isInherited=\"false\" isReadOnl" +
        "y=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey" +
        "=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInde" +
        "xPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ExecSheet\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"ExecSheetDate\" type=\"System.Nullable`1[Syst" +
        "em.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"ExecSheetDate\" mappingColumnType=\"System.Nullable`1[" +
        "System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n" +
        "    <Property name=\"Auditor\" type=\"System.String\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Auditor\" mapping" +
        "ColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"AuditDate\" type=\"System.Nullable`1[System.Date" +
        "Time]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"AuditDate\" mappingColumnType=\"System.Nullable`1[System.Date" +
        "Time]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"AuditFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"AuditFlag\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"CreatePlanFlag\" type=\"System.String\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CreatePl" +
        "anFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.St" +
        "ring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=" +
        "\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fa" +
        "lse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"" +
        "false\" mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(" +
        "200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"AddFlag\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"AddFlag\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</Enti" +
        "tyConfiguration>")]
    public partial class PptPlanMgr : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptPlanMgrEntityConfiguration;
        
        protected int _ObjID;
        
        protected global::System.DateTime? _PlanDate;
        
        protected string _EquipCode;
        
        protected string _ERPCode;
        
        protected string _MaterialCode;
        
        protected string _MaterialName;
        
        protected global::System.Int32? _RecipeVersionID;
        
        protected string _RecipeName;
        
        protected global::System.Int32? _RecommendTotalCount;
        
        protected global::System.Int32? _PlanTotalCount;
        
        protected global::System.Int32? _ActualOnePlan;
        
        protected global::System.Int32? _ActualOneProNum;
        
        protected string _ActualOnePlanID;
        
        protected string _ActualOneRemark;
        
        protected global::System.Int32? _ActualTwoPlan;
        
        protected global::System.Int32? _ActualTwoProNum;
        
        protected string _ActualTwoPlanID;
        
        protected string _ActualTwoRemark;
        
        protected global::System.Int32? _ActualThreePlan;
        
        protected global::System.Int32? _ActualThreeProNum;
        
        protected string _ActualThreePlanID;
        
        protected string _ActualThreeRemark;
        
        protected global::System.Int32? _RefOnePlan;
        
        protected global::System.Int32? _RefOneProNum;
        
        protected string _RefOneRemark;
        
        protected global::System.Int32? _RefTwoPlan;
        
        protected global::System.Int32? _RefTwoProNum;
        
        protected string _RefTwoRemark;
        
        protected global::System.Int32? _RefThreePlan;
        
        protected global::System.Int32? _RefThreeProNum;
        
        protected string _RefThreeRemark;
        
        protected string _ExecSheet;
        
        protected global::System.DateTime? _ExecSheetDate;
        
        protected string _Auditor;
        
        protected global::System.DateTime? _AuditDate;
        
        protected string _AuditFlag;
        
        protected string _CreatePlanFlag;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        protected string _AddFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptPlanMgr left, global::Mesnac.Entity.PptPlanMgr right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptPlanMgr left, global::Mesnac.Entity.PptPlanMgr right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.DateTime? PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string ERPCode {
            get {
                return this._ERPCode;
            }
            set {
                this.OnPropertyChanged("ERPCode", this._ERPCode, value);
                this._ERPCode = value;
            }
        }
        
        public string MaterialCode {
            get {
                return this._MaterialCode;
            }
            set {
                this.OnPropertyChanged("MaterialCode", this._MaterialCode, value);
                this._MaterialCode = value;
            }
        }
        
        public string MaterialName {
            get {
                return this._MaterialName;
            }
            set {
                this.OnPropertyChanged("MaterialName", this._MaterialName, value);
                this._MaterialName = value;
            }
        }
        
        public global::System.Int32? RecipeVersionID {
            get {
                return this._RecipeVersionID;
            }
            set {
                this.OnPropertyChanged("RecipeVersionID", this._RecipeVersionID, value);
                this._RecipeVersionID = value;
            }
        }
        
        public string RecipeName {
            get {
                return this._RecipeName;
            }
            set {
                this.OnPropertyChanged("RecipeName", this._RecipeName, value);
                this._RecipeName = value;
            }
        }
        
        public global::System.Int32? RecommendTotalCount {
            get {
                return this._RecommendTotalCount;
            }
            set {
                this.OnPropertyChanged("RecommendTotalCount", this._RecommendTotalCount, value);
                this._RecommendTotalCount = value;
            }
        }
        
        public global::System.Int32? PlanTotalCount {
            get {
                return this._PlanTotalCount;
            }
            set {
                this.OnPropertyChanged("PlanTotalCount", this._PlanTotalCount, value);
                this._PlanTotalCount = value;
            }
        }
        
        public global::System.Int32? ActualOnePlan {
            get {
                return this._ActualOnePlan;
            }
            set {
                this.OnPropertyChanged("ActualOnePlan", this._ActualOnePlan, value);
                this._ActualOnePlan = value;
            }
        }
        
        public global::System.Int32? ActualOneProNum {
            get {
                return this._ActualOneProNum;
            }
            set {
                this.OnPropertyChanged("ActualOneProNum", this._ActualOneProNum, value);
                this._ActualOneProNum = value;
            }
        }
        
        public string ActualOnePlanID {
            get {
                return this._ActualOnePlanID;
            }
            set {
                this.OnPropertyChanged("ActualOnePlanID", this._ActualOnePlanID, value);
                this._ActualOnePlanID = value;
            }
        }
        
        public string ActualOneRemark {
            get {
                return this._ActualOneRemark;
            }
            set {
                this.OnPropertyChanged("ActualOneRemark", this._ActualOneRemark, value);
                this._ActualOneRemark = value;
            }
        }
        
        public global::System.Int32? ActualTwoPlan {
            get {
                return this._ActualTwoPlan;
            }
            set {
                this.OnPropertyChanged("ActualTwoPlan", this._ActualTwoPlan, value);
                this._ActualTwoPlan = value;
            }
        }
        
        public global::System.Int32? ActualTwoProNum {
            get {
                return this._ActualTwoProNum;
            }
            set {
                this.OnPropertyChanged("ActualTwoProNum", this._ActualTwoProNum, value);
                this._ActualTwoProNum = value;
            }
        }
        
        public string ActualTwoPlanID {
            get {
                return this._ActualTwoPlanID;
            }
            set {
                this.OnPropertyChanged("ActualTwoPlanID", this._ActualTwoPlanID, value);
                this._ActualTwoPlanID = value;
            }
        }
        
        public string ActualTwoRemark {
            get {
                return this._ActualTwoRemark;
            }
            set {
                this.OnPropertyChanged("ActualTwoRemark", this._ActualTwoRemark, value);
                this._ActualTwoRemark = value;
            }
        }
        
        public global::System.Int32? ActualThreePlan {
            get {
                return this._ActualThreePlan;
            }
            set {
                this.OnPropertyChanged("ActualThreePlan", this._ActualThreePlan, value);
                this._ActualThreePlan = value;
            }
        }
        
        public global::System.Int32? ActualThreeProNum {
            get {
                return this._ActualThreeProNum;
            }
            set {
                this.OnPropertyChanged("ActualThreeProNum", this._ActualThreeProNum, value);
                this._ActualThreeProNum = value;
            }
        }
        
        public string ActualThreePlanID {
            get {
                return this._ActualThreePlanID;
            }
            set {
                this.OnPropertyChanged("ActualThreePlanID", this._ActualThreePlanID, value);
                this._ActualThreePlanID = value;
            }
        }
        
        public string ActualThreeRemark {
            get {
                return this._ActualThreeRemark;
            }
            set {
                this.OnPropertyChanged("ActualThreeRemark", this._ActualThreeRemark, value);
                this._ActualThreeRemark = value;
            }
        }
        
        public global::System.Int32? RefOnePlan {
            get {
                return this._RefOnePlan;
            }
            set {
                this.OnPropertyChanged("RefOnePlan", this._RefOnePlan, value);
                this._RefOnePlan = value;
            }
        }
        
        public global::System.Int32? RefOneProNum {
            get {
                return this._RefOneProNum;
            }
            set {
                this.OnPropertyChanged("RefOneProNum", this._RefOneProNum, value);
                this._RefOneProNum = value;
            }
        }
        
        public string RefOneRemark {
            get {
                return this._RefOneRemark;
            }
            set {
                this.OnPropertyChanged("RefOneRemark", this._RefOneRemark, value);
                this._RefOneRemark = value;
            }
        }
        
        public global::System.Int32? RefTwoPlan {
            get {
                return this._RefTwoPlan;
            }
            set {
                this.OnPropertyChanged("RefTwoPlan", this._RefTwoPlan, value);
                this._RefTwoPlan = value;
            }
        }
        
        public global::System.Int32? RefTwoProNum {
            get {
                return this._RefTwoProNum;
            }
            set {
                this.OnPropertyChanged("RefTwoProNum", this._RefTwoProNum, value);
                this._RefTwoProNum = value;
            }
        }
        
        public string RefTwoRemark {
            get {
                return this._RefTwoRemark;
            }
            set {
                this.OnPropertyChanged("RefTwoRemark", this._RefTwoRemark, value);
                this._RefTwoRemark = value;
            }
        }
        
        public global::System.Int32? RefThreePlan {
            get {
                return this._RefThreePlan;
            }
            set {
                this.OnPropertyChanged("RefThreePlan", this._RefThreePlan, value);
                this._RefThreePlan = value;
            }
        }
        
        public global::System.Int32? RefThreeProNum {
            get {
                return this._RefThreeProNum;
            }
            set {
                this.OnPropertyChanged("RefThreeProNum", this._RefThreeProNum, value);
                this._RefThreeProNum = value;
            }
        }
        
        public string RefThreeRemark {
            get {
                return this._RefThreeRemark;
            }
            set {
                this.OnPropertyChanged("RefThreeRemark", this._RefThreeRemark, value);
                this._RefThreeRemark = value;
            }
        }
        
        public string ExecSheet {
            get {
                return this._ExecSheet;
            }
            set {
                this.OnPropertyChanged("ExecSheet", this._ExecSheet, value);
                this._ExecSheet = value;
            }
        }
        
        public global::System.DateTime? ExecSheetDate {
            get {
                return this._ExecSheetDate;
            }
            set {
                this.OnPropertyChanged("ExecSheetDate", this._ExecSheetDate, value);
                this._ExecSheetDate = value;
            }
        }
        
        public string Auditor {
            get {
                return this._Auditor;
            }
            set {
                this.OnPropertyChanged("Auditor", this._Auditor, value);
                this._Auditor = value;
            }
        }
        
        public global::System.DateTime? AuditDate {
            get {
                return this._AuditDate;
            }
            set {
                this.OnPropertyChanged("AuditDate", this._AuditDate, value);
                this._AuditDate = value;
            }
        }
        
        public string AuditFlag {
            get {
                return this._AuditFlag;
            }
            set {
                this.OnPropertyChanged("AuditFlag", this._AuditFlag, value);
                this._AuditFlag = value;
            }
        }
        
        public string CreatePlanFlag {
            get {
                return this._CreatePlanFlag;
            }
            set {
                this.OnPropertyChanged("CreatePlanFlag", this._CreatePlanFlag, value);
                this._CreatePlanFlag = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string AddFlag {
            get {
                return this._AddFlag;
            }
            set {
                this.OnPropertyChanged("AddFlag", this._AddFlag, value);
                this._AddFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptPlanMgr._PptPlanMgrEntityConfiguration == null)) {
                PptPlanMgr._PptPlanMgrEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptPlanMgr");
            }
            return PptPlanMgr._PptPlanMgrEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._PlanDate,
                    this._EquipCode,
                    this._ERPCode,
                    this._MaterialCode,
                    this._MaterialName,
                    this._RecipeVersionID,
                    this._RecipeName,
                    this._RecommendTotalCount,
                    this._PlanTotalCount,
                    this._ActualOnePlan,
                    this._ActualOneProNum,
                    this._ActualOnePlanID,
                    this._ActualOneRemark,
                    this._ActualTwoPlan,
                    this._ActualTwoProNum,
                    this._ActualTwoPlanID,
                    this._ActualTwoRemark,
                    this._ActualThreePlan,
                    this._ActualThreeProNum,
                    this._ActualThreePlanID,
                    this._ActualThreeRemark,
                    this._RefOnePlan,
                    this._RefOneProNum,
                    this._RefOneRemark,
                    this._RefTwoPlan,
                    this._RefTwoProNum,
                    this._RefTwoRemark,
                    this._RefThreePlan,
                    this._RefThreeProNum,
                    this._RefThreeRemark,
                    this._ExecSheet,
                    this._ExecSheetDate,
                    this._Auditor,
                    this._AuditDate,
                    this._AuditFlag,
                    this._CreatePlanFlag,
                    this._DeleteFlag,
                    this._Remark,
                    this._AddFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PlanDate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ERPCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._MaterialCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._MaterialName = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._RecipeVersionID = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._RecipeName = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._RecommendTotalCount = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._PlanTotalCount = reader.GetInt32(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._ActualOnePlan = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._ActualOneProNum = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._ActualOnePlanID = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._ActualOneRemark = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._ActualTwoPlan = reader.GetInt32(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._ActualTwoProNum = reader.GetInt32(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._ActualTwoPlanID = reader.GetString(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._ActualTwoRemark = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._ActualThreePlan = reader.GetInt32(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._ActualThreeProNum = reader.GetInt32(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._ActualThreePlanID = reader.GetString(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._ActualThreeRemark = reader.GetString(21);
            }
            if ((false == reader.IsDBNull(22))) {
                this._RefOnePlan = reader.GetInt32(22);
            }
            if ((false == reader.IsDBNull(23))) {
                this._RefOneProNum = reader.GetInt32(23);
            }
            if ((false == reader.IsDBNull(24))) {
                this._RefOneRemark = reader.GetString(24);
            }
            if ((false == reader.IsDBNull(25))) {
                this._RefTwoPlan = reader.GetInt32(25);
            }
            if ((false == reader.IsDBNull(26))) {
                this._RefTwoProNum = reader.GetInt32(26);
            }
            if ((false == reader.IsDBNull(27))) {
                this._RefTwoRemark = reader.GetString(27);
            }
            if ((false == reader.IsDBNull(28))) {
                this._RefThreePlan = reader.GetInt32(28);
            }
            if ((false == reader.IsDBNull(29))) {
                this._RefThreeProNum = reader.GetInt32(29);
            }
            if ((false == reader.IsDBNull(30))) {
                this._RefThreeRemark = reader.GetString(30);
            }
            if ((false == reader.IsDBNull(31))) {
                this._ExecSheet = reader.GetString(31);
            }
            if ((false == reader.IsDBNull(32))) {
                this._ExecSheetDate = this.GetDateTime(reader, 32);
            }
            if ((false == reader.IsDBNull(33))) {
                this._Auditor = reader.GetString(33);
            }
            if ((false == reader.IsDBNull(34))) {
                this._AuditDate = this.GetDateTime(reader, 34);
            }
            if ((false == reader.IsDBNull(35))) {
                this._AuditFlag = reader.GetString(35);
            }
            if ((false == reader.IsDBNull(36))) {
                this._CreatePlanFlag = reader.GetString(36);
            }
            if ((false == reader.IsDBNull(37))) {
                this._DeleteFlag = reader.GetString(37);
            }
            if ((false == reader.IsDBNull(38))) {
                this._Remark = reader.GetString(38);
            }
            if ((false == reader.IsDBNull(39))) {
                this._AddFlag = reader.GetString(39);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PlanDate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2))) {
                this._EquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ERPCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._MaterialCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._MaterialName = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._RecipeVersionID = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._RecipeName = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._RecommendTotalCount = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._PlanTotalCount = ((System.Nullable<int>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._ActualOnePlan = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._ActualOneProNum = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._ActualOnePlanID = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._ActualOneRemark = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._ActualTwoPlan = ((System.Nullable<int>)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._ActualTwoProNum = ((System.Nullable<int>)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._ActualTwoPlanID = ((string)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._ActualTwoRemark = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._ActualThreePlan = ((System.Nullable<int>)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._ActualThreeProNum = ((System.Nullable<int>)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._ActualThreePlanID = ((string)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._ActualThreeRemark = ((string)(row[21]));
            }
            if ((false == row.IsNull(22))) {
                this._RefOnePlan = ((System.Nullable<int>)(row[22]));
            }
            if ((false == row.IsNull(23))) {
                this._RefOneProNum = ((System.Nullable<int>)(row[23]));
            }
            if ((false == row.IsNull(24))) {
                this._RefOneRemark = ((string)(row[24]));
            }
            if ((false == row.IsNull(25))) {
                this._RefTwoPlan = ((System.Nullable<int>)(row[25]));
            }
            if ((false == row.IsNull(26))) {
                this._RefTwoProNum = ((System.Nullable<int>)(row[26]));
            }
            if ((false == row.IsNull(27))) {
                this._RefTwoRemark = ((string)(row[27]));
            }
            if ((false == row.IsNull(28))) {
                this._RefThreePlan = ((System.Nullable<int>)(row[28]));
            }
            if ((false == row.IsNull(29))) {
                this._RefThreeProNum = ((System.Nullable<int>)(row[29]));
            }
            if ((false == row.IsNull(30))) {
                this._RefThreeRemark = ((string)(row[30]));
            }
            if ((false == row.IsNull(31))) {
                this._ExecSheet = ((string)(row[31]));
            }
            if ((false == row.IsNull(32))) {
                this._ExecSheetDate = this.GetDateTime(row, 32);
            }
            if ((false == row.IsNull(33))) {
                this._Auditor = ((string)(row[33]));
            }
            if ((false == row.IsNull(34))) {
                this._AuditDate = this.GetDateTime(row, 34);
            }
            if ((false == row.IsNull(35))) {
                this._AuditFlag = ((string)(row[35]));
            }
            if ((false == row.IsNull(36))) {
                this._CreatePlanFlag = ((string)(row[36]));
            }
            if ((false == row.IsNull(37))) {
                this._DeleteFlag = ((string)(row[37]));
            }
            if ((false == row.IsNull(38))) {
                this._Remark = ((string)(row[38]));
            }
            if ((false == row.IsNull(39))) {
                this._AddFlag = ((string)(row[39]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptPlanMgr).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PptPlanMgr)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PptPlanMgr)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ERPCode = new NBear.Common.PropertyItem("ERPCode", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _MaterialCode = new NBear.Common.PropertyItem("MaterialCode", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _MaterialName = new NBear.Common.PropertyItem("MaterialName", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RecipeVersionID = new NBear.Common.PropertyItem("RecipeVersionID", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RecipeName = new NBear.Common.PropertyItem("RecipeName", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RecommendTotalCount = new NBear.Common.PropertyItem("RecommendTotalCount", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _PlanTotalCount = new NBear.Common.PropertyItem("PlanTotalCount", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualOnePlan = new NBear.Common.PropertyItem("ActualOnePlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualOneProNum = new NBear.Common.PropertyItem("ActualOneProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualOnePlanID = new NBear.Common.PropertyItem("ActualOnePlanID", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualOneRemark = new NBear.Common.PropertyItem("ActualOneRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualTwoPlan = new NBear.Common.PropertyItem("ActualTwoPlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualTwoProNum = new NBear.Common.PropertyItem("ActualTwoProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualTwoPlanID = new NBear.Common.PropertyItem("ActualTwoPlanID", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualTwoRemark = new NBear.Common.PropertyItem("ActualTwoRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualThreePlan = new NBear.Common.PropertyItem("ActualThreePlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualThreeProNum = new NBear.Common.PropertyItem("ActualThreeProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualThreePlanID = new NBear.Common.PropertyItem("ActualThreePlanID", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ActualThreeRemark = new NBear.Common.PropertyItem("ActualThreeRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefOnePlan = new NBear.Common.PropertyItem("RefOnePlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefOneProNum = new NBear.Common.PropertyItem("RefOneProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefOneRemark = new NBear.Common.PropertyItem("RefOneRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefTwoPlan = new NBear.Common.PropertyItem("RefTwoPlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefTwoProNum = new NBear.Common.PropertyItem("RefTwoProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefTwoRemark = new NBear.Common.PropertyItem("RefTwoRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefThreePlan = new NBear.Common.PropertyItem("RefThreePlan", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefThreeProNum = new NBear.Common.PropertyItem("RefThreeProNum", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _RefThreeRemark = new NBear.Common.PropertyItem("RefThreeRemark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ExecSheet = new NBear.Common.PropertyItem("ExecSheet", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _ExecSheetDate = new NBear.Common.PropertyItem("ExecSheetDate", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _Auditor = new NBear.Common.PropertyItem("Auditor", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _AuditDate = new NBear.Common.PropertyItem("AuditDate", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _AuditFlag = new NBear.Common.PropertyItem("AuditFlag", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _CreatePlanFlag = new NBear.Common.PropertyItem("CreatePlanFlag", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PptPlanMgr");
            
            protected NBear.Common.PropertyItem _AddFlag = new NBear.Common.PropertyItem("AddFlag", "Mesnac.Entity.PptPlanMgr");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ERPCode {
                get {
                    if ((aliasName == null)) {
                        return _ERPCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ERPCode", _ERPCode.EntityConfiguration, _ERPCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialCode", _MaterialCode.EntityConfiguration, _MaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialName {
                get {
                    if ((aliasName == null)) {
                        return _MaterialName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialName", _MaterialName.EntityConfiguration, _MaterialName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeVersionID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeVersionID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeVersionID", _RecipeVersionID.EntityConfiguration, _RecipeVersionID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeName {
                get {
                    if ((aliasName == null)) {
                        return _RecipeName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeName", _RecipeName.EntityConfiguration, _RecipeName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecommendTotalCount {
                get {
                    if ((aliasName == null)) {
                        return _RecommendTotalCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecommendTotalCount", _RecommendTotalCount.EntityConfiguration, _RecommendTotalCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanTotalCount {
                get {
                    if ((aliasName == null)) {
                        return _PlanTotalCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanTotalCount", _PlanTotalCount.EntityConfiguration, _PlanTotalCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualOnePlan {
                get {
                    if ((aliasName == null)) {
                        return _ActualOnePlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualOnePlan", _ActualOnePlan.EntityConfiguration, _ActualOnePlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualOneProNum {
                get {
                    if ((aliasName == null)) {
                        return _ActualOneProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualOneProNum", _ActualOneProNum.EntityConfiguration, _ActualOneProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualOnePlanID {
                get {
                    if ((aliasName == null)) {
                        return _ActualOnePlanID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualOnePlanID", _ActualOnePlanID.EntityConfiguration, _ActualOnePlanID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualOneRemark {
                get {
                    if ((aliasName == null)) {
                        return _ActualOneRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualOneRemark", _ActualOneRemark.EntityConfiguration, _ActualOneRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualTwoPlan {
                get {
                    if ((aliasName == null)) {
                        return _ActualTwoPlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualTwoPlan", _ActualTwoPlan.EntityConfiguration, _ActualTwoPlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualTwoProNum {
                get {
                    if ((aliasName == null)) {
                        return _ActualTwoProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualTwoProNum", _ActualTwoProNum.EntityConfiguration, _ActualTwoProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualTwoPlanID {
                get {
                    if ((aliasName == null)) {
                        return _ActualTwoPlanID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualTwoPlanID", _ActualTwoPlanID.EntityConfiguration, _ActualTwoPlanID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualTwoRemark {
                get {
                    if ((aliasName == null)) {
                        return _ActualTwoRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualTwoRemark", _ActualTwoRemark.EntityConfiguration, _ActualTwoRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualThreePlan {
                get {
                    if ((aliasName == null)) {
                        return _ActualThreePlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualThreePlan", _ActualThreePlan.EntityConfiguration, _ActualThreePlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualThreeProNum {
                get {
                    if ((aliasName == null)) {
                        return _ActualThreeProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualThreeProNum", _ActualThreeProNum.EntityConfiguration, _ActualThreeProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualThreePlanID {
                get {
                    if ((aliasName == null)) {
                        return _ActualThreePlanID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualThreePlanID", _ActualThreePlanID.EntityConfiguration, _ActualThreePlanID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActualThreeRemark {
                get {
                    if ((aliasName == null)) {
                        return _ActualThreeRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActualThreeRemark", _ActualThreeRemark.EntityConfiguration, _ActualThreeRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefOnePlan {
                get {
                    if ((aliasName == null)) {
                        return _RefOnePlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefOnePlan", _RefOnePlan.EntityConfiguration, _RefOnePlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefOneProNum {
                get {
                    if ((aliasName == null)) {
                        return _RefOneProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefOneProNum", _RefOneProNum.EntityConfiguration, _RefOneProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefOneRemark {
                get {
                    if ((aliasName == null)) {
                        return _RefOneRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefOneRemark", _RefOneRemark.EntityConfiguration, _RefOneRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefTwoPlan {
                get {
                    if ((aliasName == null)) {
                        return _RefTwoPlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefTwoPlan", _RefTwoPlan.EntityConfiguration, _RefTwoPlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefTwoProNum {
                get {
                    if ((aliasName == null)) {
                        return _RefTwoProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefTwoProNum", _RefTwoProNum.EntityConfiguration, _RefTwoProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefTwoRemark {
                get {
                    if ((aliasName == null)) {
                        return _RefTwoRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefTwoRemark", _RefTwoRemark.EntityConfiguration, _RefTwoRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefThreePlan {
                get {
                    if ((aliasName == null)) {
                        return _RefThreePlan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefThreePlan", _RefThreePlan.EntityConfiguration, _RefThreePlan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefThreeProNum {
                get {
                    if ((aliasName == null)) {
                        return _RefThreeProNum;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefThreeProNum", _RefThreeProNum.EntityConfiguration, _RefThreeProNum.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RefThreeRemark {
                get {
                    if ((aliasName == null)) {
                        return _RefThreeRemark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RefThreeRemark", _RefThreeRemark.EntityConfiguration, _RefThreeRemark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ExecSheet {
                get {
                    if ((aliasName == null)) {
                        return _ExecSheet;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ExecSheet", _ExecSheet.EntityConfiguration, _ExecSheet.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ExecSheetDate {
                get {
                    if ((aliasName == null)) {
                        return _ExecSheetDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ExecSheetDate", _ExecSheetDate.EntityConfiguration, _ExecSheetDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Auditor {
                get {
                    if ((aliasName == null)) {
                        return _Auditor;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Auditor", _Auditor.EntityConfiguration, _Auditor.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AuditDate {
                get {
                    if ((aliasName == null)) {
                        return _AuditDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AuditDate", _AuditDate.EntityConfiguration, _AuditDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AuditFlag {
                get {
                    if ((aliasName == null)) {
                        return _AuditFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AuditFlag", _AuditFlag.EntityConfiguration, _AuditFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CreatePlanFlag {
                get {
                    if ((aliasName == null)) {
                        return _CreatePlanFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CreatePlanFlag", _CreatePlanFlag.EntityConfiguration, _CreatePlanFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AddFlag {
                get {
                    if ((aliasName == null)) {
                        return _AddFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AddFlag", _AddFlag.EntityConfiguration, _AddFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
