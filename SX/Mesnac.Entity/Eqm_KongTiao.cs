//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_KongTiaoArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_KongTiao> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_KongTiao\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_KongTiao\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"INo\" type=\"System.Nullable`1[System.Int32]\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"INo\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"" +
        "int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipNo\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"EquipNo\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"varchar(50)\" isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Eq" +
        "uipType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"EquipType\" mappingColumnType=\"System" +
        ".String\" sqlType=\"varchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"UseDep\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"UseDep\" mappingColumnTy" +
        "pe=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"PosName\" type=\"System.String\" isInherited=\"false\" isRead" +
        "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"PosName\" map" +
        "pingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"SpecType\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"SpecType\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(80)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Num\" type=\"System.Nullable`1" +
        "[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"Num\" mappingColumnType=\"System.Nullable`1[System.I" +
        "nt32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"Profac\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"Profac\" mappingColumnType=\"System" +
        ".String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"BeginDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"BeginDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"date" +
        "time\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Lastdate\" t" +
        "ype=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Lastdate\" mappingColumnTy" +
        "pe=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"Nextdate\" type=\"System.Nullable`1[Syst" +
        "em.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"Nextdate\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"Memo\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Memo\" mappingColumnType=" +
        "\"System.String\" sqlType=\"varchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"Cycle\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"Cycle\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LastFac\" type=\"System.S" +
        "tring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"LastFac\" mappingColumnType=\"System.String\" sqlType=\"nvarcha" +
        "r(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfi" +
        "guration>")]
    public partial class Eqm_KongTiao : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_KongTiaoEntityConfiguration;
        
        protected global::System.Int32? _INo;
        
        protected string _EquipNo;
        
        protected string _EquipType;
        
        protected string _UseDep;
        
        protected string _PosName;
        
        protected string _SpecType;
        
        protected global::System.Int32? _Num;
        
        protected string _Profac;
        
        protected global::System.DateTime? _BeginDate;
        
        protected global::System.DateTime? _Lastdate;
        
        protected global::System.DateTime? _Nextdate;
        
        protected string _Memo;
        
        protected global::System.Int32? _Cycle;
        
        protected string _LastFac;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_KongTiao left, global::Mesnac.Entity.Eqm_KongTiao right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_KongTiao left, global::Mesnac.Entity.Eqm_KongTiao right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? INo {
            get {
                return this._INo;
            }
            set {
                this.OnPropertyChanged("INo", this._INo, value);
                this._INo = value;
            }
        }
        
        public string EquipNo {
            get {
                return this._EquipNo;
            }
            set {
                this.OnPropertyChanged("EquipNo", this._EquipNo, value);
                this._EquipNo = value;
            }
        }
        
        public string EquipType {
            get {
                return this._EquipType;
            }
            set {
                this.OnPropertyChanged("EquipType", this._EquipType, value);
                this._EquipType = value;
            }
        }
        
        public string UseDep {
            get {
                return this._UseDep;
            }
            set {
                this.OnPropertyChanged("UseDep", this._UseDep, value);
                this._UseDep = value;
            }
        }
        
        public string PosName {
            get {
                return this._PosName;
            }
            set {
                this.OnPropertyChanged("PosName", this._PosName, value);
                this._PosName = value;
            }
        }
        
        public string SpecType {
            get {
                return this._SpecType;
            }
            set {
                this.OnPropertyChanged("SpecType", this._SpecType, value);
                this._SpecType = value;
            }
        }
        
        public global::System.Int32? Num {
            get {
                return this._Num;
            }
            set {
                this.OnPropertyChanged("Num", this._Num, value);
                this._Num = value;
            }
        }
        
        public string Profac {
            get {
                return this._Profac;
            }
            set {
                this.OnPropertyChanged("Profac", this._Profac, value);
                this._Profac = value;
            }
        }
        
        public global::System.DateTime? BeginDate {
            get {
                return this._BeginDate;
            }
            set {
                this.OnPropertyChanged("BeginDate", this._BeginDate, value);
                this._BeginDate = value;
            }
        }
        
        public global::System.DateTime? Lastdate {
            get {
                return this._Lastdate;
            }
            set {
                this.OnPropertyChanged("Lastdate", this._Lastdate, value);
                this._Lastdate = value;
            }
        }
        
        public global::System.DateTime? Nextdate {
            get {
                return this._Nextdate;
            }
            set {
                this.OnPropertyChanged("Nextdate", this._Nextdate, value);
                this._Nextdate = value;
            }
        }
        
        public string Memo {
            get {
                return this._Memo;
            }
            set {
                this.OnPropertyChanged("Memo", this._Memo, value);
                this._Memo = value;
            }
        }
        
        public global::System.Int32? Cycle {
            get {
                return this._Cycle;
            }
            set {
                this.OnPropertyChanged("Cycle", this._Cycle, value);
                this._Cycle = value;
            }
        }
        
        public string LastFac {
            get {
                return this._LastFac;
            }
            set {
                this.OnPropertyChanged("LastFac", this._LastFac, value);
                this._LastFac = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_KongTiao._Eqm_KongTiaoEntityConfiguration == null)) {
                Eqm_KongTiao._Eqm_KongTiaoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_KongTiao");
            }
            return Eqm_KongTiao._Eqm_KongTiaoEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._INo,
                    this._EquipNo,
                    this._EquipType,
                    this._UseDep,
                    this._PosName,
                    this._SpecType,
                    this._Num,
                    this._Profac,
                    this._BeginDate,
                    this._Lastdate,
                    this._Nextdate,
                    this._Memo,
                    this._Cycle,
                    this._LastFac};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._INo = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._EquipNo = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipType = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._UseDep = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._PosName = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._SpecType = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Num = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Profac = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._BeginDate = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Lastdate = this.GetDateTime(reader, 9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Nextdate = this.GetDateTime(reader, 10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._Memo = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._Cycle = reader.GetInt32(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._LastFac = reader.GetString(13);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._INo = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._EquipNo = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipType = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._UseDep = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._PosName = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._SpecType = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Num = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Profac = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._BeginDate = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9))) {
                this._Lastdate = this.GetDateTime(row, 9);
            }
            if ((false == row.IsNull(10))) {
                this._Nextdate = this.GetDateTime(row, 10);
            }
            if ((false == row.IsNull(11))) {
                this._Memo = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._Cycle = ((System.Nullable<int>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._LastFac = ((string)(row[13]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_KongTiao).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_KongTiao)(obj)).isAttached) 
                        && (this.EquipNo == ((global::Mesnac.Entity.Eqm_KongTiao)(obj)).EquipNo));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _INo = new NBear.Common.PropertyItem("INo", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _EquipNo = new NBear.Common.PropertyItem("EquipNo", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _EquipType = new NBear.Common.PropertyItem("EquipType", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _UseDep = new NBear.Common.PropertyItem("UseDep", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _PosName = new NBear.Common.PropertyItem("PosName", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _SpecType = new NBear.Common.PropertyItem("SpecType", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Num = new NBear.Common.PropertyItem("Num", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Profac = new NBear.Common.PropertyItem("Profac", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _BeginDate = new NBear.Common.PropertyItem("BeginDate", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Lastdate = new NBear.Common.PropertyItem("Lastdate", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Nextdate = new NBear.Common.PropertyItem("Nextdate", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Memo = new NBear.Common.PropertyItem("Memo", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _Cycle = new NBear.Common.PropertyItem("Cycle", "Mesnac.Entity.Eqm_KongTiao");
            
            protected NBear.Common.PropertyItem _LastFac = new NBear.Common.PropertyItem("LastFac", "Mesnac.Entity.Eqm_KongTiao");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem INo {
                get {
                    if ((aliasName == null)) {
                        return _INo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("INo", _INo.EntityConfiguration, _INo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipNo {
                get {
                    if ((aliasName == null)) {
                        return _EquipNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipNo", _EquipNo.EntityConfiguration, _EquipNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipType {
                get {
                    if ((aliasName == null)) {
                        return _EquipType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipType", _EquipType.EntityConfiguration, _EquipType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UseDep {
                get {
                    if ((aliasName == null)) {
                        return _UseDep;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UseDep", _UseDep.EntityConfiguration, _UseDep.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PosName {
                get {
                    if ((aliasName == null)) {
                        return _PosName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PosName", _PosName.EntityConfiguration, _PosName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpecType {
                get {
                    if ((aliasName == null)) {
                        return _SpecType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpecType", _SpecType.EntityConfiguration, _SpecType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Num {
                get {
                    if ((aliasName == null)) {
                        return _Num;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Num", _Num.EntityConfiguration, _Num.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Profac {
                get {
                    if ((aliasName == null)) {
                        return _Profac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Profac", _Profac.EntityConfiguration, _Profac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem BeginDate {
                get {
                    if ((aliasName == null)) {
                        return _BeginDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BeginDate", _BeginDate.EntityConfiguration, _BeginDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Lastdate {
                get {
                    if ((aliasName == null)) {
                        return _Lastdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Lastdate", _Lastdate.EntityConfiguration, _Lastdate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Nextdate {
                get {
                    if ((aliasName == null)) {
                        return _Nextdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Nextdate", _Nextdate.EntityConfiguration, _Nextdate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Memo {
                get {
                    if ((aliasName == null)) {
                        return _Memo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Memo", _Memo.EntityConfiguration, _Memo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Cycle {
                get {
                    if ((aliasName == null)) {
                        return _Cycle;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Cycle", _Cycle.EntityConfiguration, _Cycle.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastFac {
                get {
                    if ((aliasName == null)) {
                        return _LastFac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastFac", _LastFac.EntityConfiguration, _LastFac.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
