//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_MixCleanRecordArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_MixCleanRecord> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_MixCleanRecord\" isReadOnly=\"false\" isAutoPreLoad=\"false\"" +
        " isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_MixCleanRecord\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"Serialid\" type=\"System.Int32\" is" +
        "Inherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"Serialid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey" +
        "=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Standid\" type=\"System.Nullable`" +
        "1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"Standid\" mappingColumnType=\"System.Nullable`1[Sys" +
        "tem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"Workshop\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Workshop\" mappingColumnTyp" +
        "e=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"EquipName\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipName\" " +
        "mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"PosName\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"PosName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Shiftname\" type=\"System.Stri" +
        "ng\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"Shiftname\" mappingColumnType=\"System.String\" sqlType=\"varchar(" +
        "10)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Lastdate\" ty" +
        "pe=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Lastdate\" mappingColumnTyp" +
        "e=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class Eqm_MixCleanRecord : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_MixCleanRecordEntityConfiguration;
        
        protected int _Serialid;
        
        protected global::System.Int32? _Standid;
        
        protected string _Workshop;
        
        protected string _EquipName;
        
        protected string _PosName;
        
        protected string _Shiftname;
        
        protected global::System.DateTime? _Lastdate;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_MixCleanRecord left, global::Mesnac.Entity.Eqm_MixCleanRecord right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_MixCleanRecord left, global::Mesnac.Entity.Eqm_MixCleanRecord right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public global::System.Int32? Standid {
            get {
                return this._Standid;
            }
            set {
                this.OnPropertyChanged("Standid", this._Standid, value);
                this._Standid = value;
            }
        }
        
        public string Workshop {
            get {
                return this._Workshop;
            }
            set {
                this.OnPropertyChanged("Workshop", this._Workshop, value);
                this._Workshop = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public string PosName {
            get {
                return this._PosName;
            }
            set {
                this.OnPropertyChanged("PosName", this._PosName, value);
                this._PosName = value;
            }
        }
        
        public string Shiftname {
            get {
                return this._Shiftname;
            }
            set {
                this.OnPropertyChanged("Shiftname", this._Shiftname, value);
                this._Shiftname = value;
            }
        }
        
        public global::System.DateTime? Lastdate {
            get {
                return this._Lastdate;
            }
            set {
                this.OnPropertyChanged("Lastdate", this._Lastdate, value);
                this._Lastdate = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_MixCleanRecord._Eqm_MixCleanRecordEntityConfiguration == null)) {
                Eqm_MixCleanRecord._Eqm_MixCleanRecordEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_MixCleanRecord");
            }
            return Eqm_MixCleanRecord._Eqm_MixCleanRecordEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Serialid,
                    this._Standid,
                    this._Workshop,
                    this._EquipName,
                    this._PosName,
                    this._Shiftname,
                    this._Lastdate};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Serialid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Standid = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Workshop = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EquipName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._PosName = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Shiftname = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Lastdate = this.GetDateTime(reader, 6);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Serialid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Standid = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Workshop = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._EquipName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._PosName = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Shiftname = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Lastdate = this.GetDateTime(row, 6);
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_MixCleanRecord).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_MixCleanRecord)(obj)).isAttached) 
                        && (this.Serialid == ((global::Mesnac.Entity.Eqm_MixCleanRecord)(obj)).Serialid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _Standid = new NBear.Common.PropertyItem("Standid", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _Workshop = new NBear.Common.PropertyItem("Workshop", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _PosName = new NBear.Common.PropertyItem("PosName", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _Shiftname = new NBear.Common.PropertyItem("Shiftname", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            protected NBear.Common.PropertyItem _Lastdate = new NBear.Common.PropertyItem("Lastdate", "Mesnac.Entity.Eqm_MixCleanRecord");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Standid {
                get {
                    if ((aliasName == null)) {
                        return _Standid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Standid", _Standid.EntityConfiguration, _Standid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshop {
                get {
                    if ((aliasName == null)) {
                        return _Workshop;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshop", _Workshop.EntityConfiguration, _Workshop.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PosName {
                get {
                    if ((aliasName == null)) {
                        return _PosName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PosName", _PosName.EntityConfiguration, _PosName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Shiftname {
                get {
                    if ((aliasName == null)) {
                        return _Shiftname;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Shiftname", _Shiftname.EntityConfiguration, _Shiftname.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Lastdate {
                get {
                    if ((aliasName == null)) {
                        return _Lastdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Lastdate", _Lastdate.EntityConfiguration, _Lastdate.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
