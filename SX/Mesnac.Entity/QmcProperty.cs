//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcPropertyArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcProperty> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmcProperty\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatc" +
        "hUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcProperty\" batchSize=\"10\">\r\n  " +
        "<Properties>\r\n    <Property name=\"PropertyId\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "PropertyId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" i" +
        "sNotNull=\"true\" />\r\n    <Property name=\"SeriesId\" type=\"System.Int32\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"SeriesId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"PropertyName\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"PropertyName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(5" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PropertyCode\"" +
        " type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fal" +
        "se\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" i" +
        "sRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeria" +
        "lizationIgnore=\"false\" mappingName=\"PropertyCode\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"ValueType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ValueType\" mappingColumn" +
        "Type=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"HasSelection\" type=\"System.String\" isInherited=\"false" +
        "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"HasS" +
        "election\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInhe" +
        "rited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"ch" +
        "ar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfi" +
        "guration>")]
    public partial class QmcProperty : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcPropertyEntityConfiguration;
        
        protected int _PropertyId;
        
        protected int _SeriesId;
        
        protected string _PropertyName;
        
        protected string _PropertyCode;
        
        protected string _ValueType;
        
        protected string _HasSelection;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcProperty left, global::Mesnac.Entity.QmcProperty right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcProperty left, global::Mesnac.Entity.QmcProperty right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int PropertyId {
            get {
                return this._PropertyId;
            }
            set {
                this.OnPropertyChanged("PropertyId", this._PropertyId, value);
                this._PropertyId = value;
            }
        }
        
        public int SeriesId {
            get {
                return this._SeriesId;
            }
            set {
                this.OnPropertyChanged("SeriesId", this._SeriesId, value);
                this._SeriesId = value;
            }
        }
        
        public string PropertyName {
            get {
                return this._PropertyName;
            }
            set {
                this.OnPropertyChanged("PropertyName", this._PropertyName, value);
                this._PropertyName = value;
            }
        }
        
        public string PropertyCode {
            get {
                return this._PropertyCode;
            }
            set {
                this.OnPropertyChanged("PropertyCode", this._PropertyCode, value);
                this._PropertyCode = value;
            }
        }
        
        public string ValueType {
            get {
                return this._ValueType;
            }
            set {
                this.OnPropertyChanged("ValueType", this._ValueType, value);
                this._ValueType = value;
            }
        }
        
        public string HasSelection {
            get {
                return this._HasSelection;
            }
            set {
                this.OnPropertyChanged("HasSelection", this._HasSelection, value);
                this._HasSelection = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcProperty._QmcPropertyEntityConfiguration == null)) {
                QmcProperty._QmcPropertyEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcProperty");
            }
            return QmcProperty._QmcPropertyEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._PropertyId,
                    this._SeriesId,
                    this._PropertyName,
                    this._PropertyCode,
                    this._ValueType,
                    this._HasSelection,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._PropertyId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._SeriesId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._PropertyName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._PropertyCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ValueType = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._HasSelection = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Remark = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._DeleteFlag = reader.GetString(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._PropertyId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._SeriesId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._PropertyName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._PropertyCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ValueType = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._HasSelection = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Remark = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._DeleteFlag = ((string)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcProperty).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcProperty)(obj)).isAttached) 
                        && (this.PropertyId == ((global::Mesnac.Entity.QmcProperty)(obj)).PropertyId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _PropertyId = new NBear.Common.PropertyItem("PropertyId", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _SeriesId = new NBear.Common.PropertyItem("SeriesId", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _PropertyName = new NBear.Common.PropertyItem("PropertyName", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _PropertyCode = new NBear.Common.PropertyItem("PropertyCode", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _ValueType = new NBear.Common.PropertyItem("ValueType", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _HasSelection = new NBear.Common.PropertyItem("HasSelection", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcProperty");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcProperty");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem PropertyId {
                get {
                    if ((aliasName == null)) {
                        return _PropertyId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PropertyId", _PropertyId.EntityConfiguration, _PropertyId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SeriesId {
                get {
                    if ((aliasName == null)) {
                        return _SeriesId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SeriesId", _SeriesId.EntityConfiguration, _SeriesId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PropertyName {
                get {
                    if ((aliasName == null)) {
                        return _PropertyName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PropertyName", _PropertyName.EntityConfiguration, _PropertyName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PropertyCode {
                get {
                    if ((aliasName == null)) {
                        return _PropertyCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PropertyCode", _PropertyCode.EntityConfiguration, _PropertyCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ValueType {
                get {
                    if ((aliasName == null)) {
                        return _ValueType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValueType", _ValueType.EntityConfiguration, _ValueType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HasSelection {
                get {
                    if ((aliasName == null)) {
                        return _HasSelection;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HasSelection", _HasSelection.EntityConfiguration, _HasSelection.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
