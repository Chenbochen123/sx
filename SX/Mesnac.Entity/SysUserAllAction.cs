//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class SysUserAllActionArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.SysUserAllAction> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.SysUserAllAction\" isReadOnly=\"true\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"SysUserAllAction\" batchSize=" +
        "\"10\">\r\n  <Properties>\r\n    <Property name=\"UserCode\" type=\"System.String\" isInhe" +
        "rited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"UserCode\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ActionID\" type=\"System." +
        "Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"ActionID\" mappingColumnType=\"System.Nulla" +
        "ble`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "  <Property name=\"Mode\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mode" +
        "\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class SysUserAllAction : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _SysUserAllActionEntityConfiguration;
        
        protected string _UserCode;
        
        protected global::System.Int32? _ActionID;
        
        protected global::System.Int32? _Mode;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.SysUserAllAction left, global::Mesnac.Entity.SysUserAllAction right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.SysUserAllAction left, global::Mesnac.Entity.SysUserAllAction right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string UserCode {
            get {
                return this._UserCode;
            }
            set {
                this.OnPropertyChanged("UserCode", this._UserCode, value);
                this._UserCode = value;
            }
        }
        
        public global::System.Int32? ActionID {
            get {
                return this._ActionID;
            }
            set {
                this.OnPropertyChanged("ActionID", this._ActionID, value);
                this._ActionID = value;
            }
        }
        
        public global::System.Int32? Mode {
            get {
                return this._Mode;
            }
            set {
                this.OnPropertyChanged("Mode", this._Mode, value);
                this._Mode = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((SysUserAllAction._SysUserAllActionEntityConfiguration == null)) {
                SysUserAllAction._SysUserAllActionEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.SysUserAllAction");
            }
            return SysUserAllAction._SysUserAllActionEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._UserCode,
                    this._ActionID,
                    this._Mode};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._UserCode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._ActionID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Mode = reader.GetInt32(2);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._UserCode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._ActionID = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Mode = ((System.Nullable<int>)(row[2]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.SysUserAllAction).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.SysUserAllAction)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _UserCode = new NBear.Common.PropertyItem("UserCode", "Mesnac.Entity.SysUserAllAction");
            
            protected NBear.Common.PropertyItem _ActionID = new NBear.Common.PropertyItem("ActionID", "Mesnac.Entity.SysUserAllAction");
            
            protected NBear.Common.PropertyItem _Mode = new NBear.Common.PropertyItem("Mode", "Mesnac.Entity.SysUserAllAction");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem UserCode {
                get {
                    if ((aliasName == null)) {
                        return _UserCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UserCode", _UserCode.EntityConfiguration, _UserCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActionID {
                get {
                    if ((aliasName == null)) {
                        return _ActionID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActionID", _ActionID.EntityConfiguration, _ActionID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Mode {
                get {
                    if ((aliasName == null)) {
                        return _Mode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Mode", _Mode.EntityConfiguration, _Mode.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
