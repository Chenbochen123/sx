//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_MotorPlanArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_MotorPlan> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_MotorPlan\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBa" +
        "tchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_MotorPlan\" batchSize=\"10\">" +
        "\r\n  <Properties>\r\n    <Property name=\"Serialid\" type=\"System.Int32\" isInherited=" +
        "\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"Serialid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" is" +
        "NotNull=\"true\" />\r\n    <Property name=\"INo\" type=\"System.Nullable`1[System.Int32" +
        "]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"INo\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTyp" +
        "e=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Plandate\"" +
        " type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Plandate\" mappingColumn" +
        "Type=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"Realdate\" type=\"System.Nullable`1[Sy" +
        "stem.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"Realdate\" mappingColumnType=\"System.Nullable`1[Sys" +
        "tem.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"LiCi\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Li" +
        "Ci\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Dianshu\" type=\"System" +
        ".Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"Dianshu\" mappingColumnType=\"System.Nu" +
        "llable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"CheckUser\" type=\"System.String\" isInherited=\"false\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CheckUs" +
        "er\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"OutDate\" type=\"System.Nullable`1[Syst" +
        "em.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"OutDate\" mappingColumnType=\"System.Nullable`1[System" +
        ".DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"InDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"In" +
        "Date\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CheckInfo\" type=\"" +
        "System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"CheckInfo\" mappingColumnType=\"System.String\" sqlTyp" +
        "e=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "CheckFac\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"CheckFac\" mappingColumnType=\"System" +
        ".String\" sqlType=\"nvarchar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"Memo\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Memo\" mappingColumnType=" +
        "\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"MotorType\" type=\"System.String\" isInherited=\"false\" isRead" +
        "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MotorType\" m" +
        "appingColumnType=\"System.String\" sqlType=\"nvarchar(40)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"MotorNo\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"MotorNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(40)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class Eqm_MotorPlan : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_MotorPlanEntityConfiguration;
        
        protected int _Serialid;
        
        protected global::System.Int32? _INo;
        
        protected global::System.DateTime? _Plandate;
        
        protected global::System.DateTime? _Realdate;
        
        protected global::System.Decimal? _LiCi;
        
        protected global::System.Decimal? _Dianshu;
        
        protected string _CheckUser;
        
        protected global::System.DateTime? _OutDate;
        
        protected global::System.DateTime? _InDate;
        
        protected string _CheckInfo;
        
        protected string _CheckFac;
        
        protected string _Memo;
        
        protected string _MotorType;
        
        protected string _MotorNo;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_MotorPlan left, global::Mesnac.Entity.Eqm_MotorPlan right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_MotorPlan left, global::Mesnac.Entity.Eqm_MotorPlan right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public global::System.Int32? INo {
            get {
                return this._INo;
            }
            set {
                this.OnPropertyChanged("INo", this._INo, value);
                this._INo = value;
            }
        }
        
        public global::System.DateTime? Plandate {
            get {
                return this._Plandate;
            }
            set {
                this.OnPropertyChanged("Plandate", this._Plandate, value);
                this._Plandate = value;
            }
        }
        
        public global::System.DateTime? Realdate {
            get {
                return this._Realdate;
            }
            set {
                this.OnPropertyChanged("Realdate", this._Realdate, value);
                this._Realdate = value;
            }
        }
        
        public global::System.Decimal? LiCi {
            get {
                return this._LiCi;
            }
            set {
                this.OnPropertyChanged("LiCi", this._LiCi, value);
                this._LiCi = value;
            }
        }
        
        public global::System.Decimal? Dianshu {
            get {
                return this._Dianshu;
            }
            set {
                this.OnPropertyChanged("Dianshu", this._Dianshu, value);
                this._Dianshu = value;
            }
        }
        
        public string CheckUser {
            get {
                return this._CheckUser;
            }
            set {
                this.OnPropertyChanged("CheckUser", this._CheckUser, value);
                this._CheckUser = value;
            }
        }
        
        public global::System.DateTime? OutDate {
            get {
                return this._OutDate;
            }
            set {
                this.OnPropertyChanged("OutDate", this._OutDate, value);
                this._OutDate = value;
            }
        }
        
        public global::System.DateTime? InDate {
            get {
                return this._InDate;
            }
            set {
                this.OnPropertyChanged("InDate", this._InDate, value);
                this._InDate = value;
            }
        }
        
        public string CheckInfo {
            get {
                return this._CheckInfo;
            }
            set {
                this.OnPropertyChanged("CheckInfo", this._CheckInfo, value);
                this._CheckInfo = value;
            }
        }
        
        public string CheckFac {
            get {
                return this._CheckFac;
            }
            set {
                this.OnPropertyChanged("CheckFac", this._CheckFac, value);
                this._CheckFac = value;
            }
        }
        
        public string Memo {
            get {
                return this._Memo;
            }
            set {
                this.OnPropertyChanged("Memo", this._Memo, value);
                this._Memo = value;
            }
        }
        
        public string MotorType {
            get {
                return this._MotorType;
            }
            set {
                this.OnPropertyChanged("MotorType", this._MotorType, value);
                this._MotorType = value;
            }
        }
        
        public string MotorNo {
            get {
                return this._MotorNo;
            }
            set {
                this.OnPropertyChanged("MotorNo", this._MotorNo, value);
                this._MotorNo = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_MotorPlan._Eqm_MotorPlanEntityConfiguration == null)) {
                Eqm_MotorPlan._Eqm_MotorPlanEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_MotorPlan");
            }
            return Eqm_MotorPlan._Eqm_MotorPlanEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Serialid,
                    this._INo,
                    this._Plandate,
                    this._Realdate,
                    this._LiCi,
                    this._Dianshu,
                    this._CheckUser,
                    this._OutDate,
                    this._InDate,
                    this._CheckInfo,
                    this._CheckFac,
                    this._Memo,
                    this._MotorType,
                    this._MotorNo};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Serialid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._INo = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Plandate = this.GetDateTime(reader, 2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Realdate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._LiCi = reader.GetDecimal(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._Dianshu = reader.GetDecimal(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._CheckUser = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._OutDate = this.GetDateTime(reader, 7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._InDate = this.GetDateTime(reader, 8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._CheckInfo = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._CheckFac = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._Memo = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._MotorType = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._MotorNo = reader.GetString(13);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Serialid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._INo = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Plandate = this.GetDateTime(row, 2);
            }
            if ((false == row.IsNull(3))) {
                this._Realdate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4))) {
                this._LiCi = ((System.Nullable<decimal>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._Dianshu = ((System.Nullable<decimal>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._CheckUser = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._OutDate = this.GetDateTime(row, 7);
            }
            if ((false == row.IsNull(8))) {
                this._InDate = this.GetDateTime(row, 8);
            }
            if ((false == row.IsNull(9))) {
                this._CheckInfo = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._CheckFac = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._Memo = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._MotorType = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._MotorNo = ((string)(row[13]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_MotorPlan).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_MotorPlan)(obj)).isAttached) 
                        && (this.Serialid == ((global::Mesnac.Entity.Eqm_MotorPlan)(obj)).Serialid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _INo = new NBear.Common.PropertyItem("INo", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _Plandate = new NBear.Common.PropertyItem("Plandate", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _Realdate = new NBear.Common.PropertyItem("Realdate", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _LiCi = new NBear.Common.PropertyItem("LiCi", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _Dianshu = new NBear.Common.PropertyItem("Dianshu", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _CheckUser = new NBear.Common.PropertyItem("CheckUser", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _OutDate = new NBear.Common.PropertyItem("OutDate", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _InDate = new NBear.Common.PropertyItem("InDate", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _CheckInfo = new NBear.Common.PropertyItem("CheckInfo", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _CheckFac = new NBear.Common.PropertyItem("CheckFac", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _Memo = new NBear.Common.PropertyItem("Memo", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _MotorType = new NBear.Common.PropertyItem("MotorType", "Mesnac.Entity.Eqm_MotorPlan");
            
            protected NBear.Common.PropertyItem _MotorNo = new NBear.Common.PropertyItem("MotorNo", "Mesnac.Entity.Eqm_MotorPlan");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem INo {
                get {
                    if ((aliasName == null)) {
                        return _INo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("INo", _INo.EntityConfiguration, _INo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Plandate {
                get {
                    if ((aliasName == null)) {
                        return _Plandate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plandate", _Plandate.EntityConfiguration, _Plandate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Realdate {
                get {
                    if ((aliasName == null)) {
                        return _Realdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Realdate", _Realdate.EntityConfiguration, _Realdate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LiCi {
                get {
                    if ((aliasName == null)) {
                        return _LiCi;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LiCi", _LiCi.EntityConfiguration, _LiCi.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Dianshu {
                get {
                    if ((aliasName == null)) {
                        return _Dianshu;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Dianshu", _Dianshu.EntityConfiguration, _Dianshu.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckUser {
                get {
                    if ((aliasName == null)) {
                        return _CheckUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckUser", _CheckUser.EntityConfiguration, _CheckUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OutDate {
                get {
                    if ((aliasName == null)) {
                        return _OutDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OutDate", _OutDate.EntityConfiguration, _OutDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InDate {
                get {
                    if ((aliasName == null)) {
                        return _InDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InDate", _InDate.EntityConfiguration, _InDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckInfo {
                get {
                    if ((aliasName == null)) {
                        return _CheckInfo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckInfo", _CheckInfo.EntityConfiguration, _CheckInfo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CheckFac {
                get {
                    if ((aliasName == null)) {
                        return _CheckFac;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CheckFac", _CheckFac.EntityConfiguration, _CheckFac.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Memo {
                get {
                    if ((aliasName == null)) {
                        return _Memo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Memo", _Memo.EntityConfiguration, _Memo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MotorType {
                get {
                    if ((aliasName == null)) {
                        return _MotorType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MotorType", _MotorType.EntityConfiguration, _MotorType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MotorNo {
                get {
                    if ((aliasName == null)) {
                        return _MotorNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MotorNo", _MotorNo.EntityConfiguration, _MotorNo.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
