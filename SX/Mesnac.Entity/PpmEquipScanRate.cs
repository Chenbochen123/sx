//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PpmEquipScanRateArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmEquipScanRate> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmEquipScanRate\" isReadOnly=\"false\" isAutoPreLoad=\"false\" i" +
        "sBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmEquipScanRate\" batchSize" +
        "=\"10\">\r\n  <Properties>\r\n    <Property name=\"FID\" type=\"System.Int64\" isInherited" +
        "=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"FID\" mappingColumnType=\"System.Int64\" sqlType=\"bigint\" isPrimaryKey=\"true\" isN" +
        "otNull=\"true\" />\r\n    <Property name=\"PlanDate\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"PlanDate\" mappingColumnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftID\" type=\"System.Nullab" +
        "le`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"ShiftID\" mappingColumnType=\"System.Nullable`1[" +
        "System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"EquipCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fals" +
        "e\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false" +
        "\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProper" +
        "tyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipCode\" mappingColu" +
        "mnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"HrCode\" type=\"System.String\" isInherited=\"false\" isR" +
        "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFri" +
        "endKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" " +
        "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"HrCode\" m" +
        "appingColumnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"HrName\" type=\"System.String\" isInherited=\"" +
        "false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"HrName\" mappingColumnType=\"System.String\" sqlType=\"varchar(30)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"MaterCode\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"MaterCode\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SerialCount\" typ" +
        "e=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCom" +
        "poundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazy" +
        "Load=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"" +
        "false\" isSerializationIgnore=\"false\" mappingName=\"SerialCount\" mappingColumnType" +
        "=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"TotalCount\" type=\"System.Nullable`1[System.Int32" +
        "]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"TotalCount\" mappingColumnType=\"System.Nullable`1[System.Int32]\"" +
        " sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Sc" +
        "anCount\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ScanCount\" mapping" +
        "ColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PpmEquipScanRate : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PpmEquipScanRateEntityConfiguration;
        
        protected long _FID;
        
        protected string _PlanDate;
        
        protected global::System.Int32? _ShiftID;
        
        protected string _EquipCode;
        
        protected string _HrCode;
        
        protected string _HrName;
        
        protected string _MaterCode;
        
        protected global::System.Int32? _SerialCount;
        
        protected global::System.Int32? _TotalCount;
        
        protected global::System.Int32? _ScanCount;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PpmEquipScanRate left, global::Mesnac.Entity.PpmEquipScanRate right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PpmEquipScanRate left, global::Mesnac.Entity.PpmEquipScanRate right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public long FID {
            get {
                return this._FID;
            }
            set {
                this.OnPropertyChanged("FID", this._FID, value);
                this._FID = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public global::System.Int32? ShiftID {
            get {
                return this._ShiftID;
            }
            set {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }
        
        public string EquipCode {
            get {
                return this._EquipCode;
            }
            set {
                this.OnPropertyChanged("EquipCode", this._EquipCode, value);
                this._EquipCode = value;
            }
        }
        
        public string HrCode {
            get {
                return this._HrCode;
            }
            set {
                this.OnPropertyChanged("HrCode", this._HrCode, value);
                this._HrCode = value;
            }
        }
        
        public string HrName {
            get {
                return this._HrName;
            }
            set {
                this.OnPropertyChanged("HrName", this._HrName, value);
                this._HrName = value;
            }
        }
        
        public string MaterCode {
            get {
                return this._MaterCode;
            }
            set {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }
        
        public global::System.Int32? SerialCount {
            get {
                return this._SerialCount;
            }
            set {
                this.OnPropertyChanged("SerialCount", this._SerialCount, value);
                this._SerialCount = value;
            }
        }
        
        public global::System.Int32? TotalCount {
            get {
                return this._TotalCount;
            }
            set {
                this.OnPropertyChanged("TotalCount", this._TotalCount, value);
                this._TotalCount = value;
            }
        }
        
        public global::System.Int32? ScanCount {
            get {
                return this._ScanCount;
            }
            set {
                this.OnPropertyChanged("ScanCount", this._ScanCount, value);
                this._ScanCount = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PpmEquipScanRate._PpmEquipScanRateEntityConfiguration == null)) {
                PpmEquipScanRate._PpmEquipScanRateEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmEquipScanRate");
            }
            return PpmEquipScanRate._PpmEquipScanRateEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._FID,
                    this._PlanDate,
                    this._ShiftID,
                    this._EquipCode,
                    this._HrCode,
                    this._HrName,
                    this._MaterCode,
                    this._SerialCount,
                    this._TotalCount,
                    this._ScanCount};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._FID = reader.GetInt64(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PlanDate = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._ShiftID = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._EquipCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._HrCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._HrName = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MaterCode = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._SerialCount = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._TotalCount = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._ScanCount = reader.GetInt32(9);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._FID = ((long)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PlanDate = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._ShiftID = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._EquipCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._HrCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._HrName = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MaterCode = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._SerialCount = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._TotalCount = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._ScanCount = ((System.Nullable<int>)(row[9]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmEquipScanRate).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmEquipScanRate)(obj)).isAttached) 
                        && (this.FID == ((global::Mesnac.Entity.PpmEquipScanRate)(obj)).FID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _FID = new NBear.Common.PropertyItem("FID", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _EquipCode = new NBear.Common.PropertyItem("EquipCode", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _HrCode = new NBear.Common.PropertyItem("HrCode", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _HrName = new NBear.Common.PropertyItem("HrName", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _SerialCount = new NBear.Common.PropertyItem("SerialCount", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _TotalCount = new NBear.Common.PropertyItem("TotalCount", "Mesnac.Entity.PpmEquipScanRate");
            
            protected NBear.Common.PropertyItem _ScanCount = new NBear.Common.PropertyItem("ScanCount", "Mesnac.Entity.PpmEquipScanRate");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem FID {
                get {
                    if ((aliasName == null)) {
                        return _FID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FID", _FID.EntityConfiguration, _FID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipCode {
                get {
                    if ((aliasName == null)) {
                        return _EquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipCode", _EquipCode.EntityConfiguration, _EquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HrCode {
                get {
                    if ((aliasName == null)) {
                        return _HrCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HrCode", _HrCode.EntityConfiguration, _HrCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HrName {
                get {
                    if ((aliasName == null)) {
                        return _HrName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HrName", _HrName.EntityConfiguration, _HrName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SerialCount {
                get {
                    if ((aliasName == null)) {
                        return _SerialCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SerialCount", _SerialCount.EntityConfiguration, _SerialCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TotalCount {
                get {
                    if ((aliasName == null)) {
                        return _TotalCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TotalCount", _TotalCount.EntityConfiguration, _TotalCount.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ScanCount {
                get {
                    if ((aliasName == null)) {
                        return _ScanCount;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ScanCount", _ScanCount.EntityConfiguration, _ScanCount.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
