//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcCheckItemArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcCheckItem> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmcCheckItem\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcCheckItem\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"ItemId\" type=\"System.Int32\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"It" +
        "emId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNu" +
        "ll=\"true\" />\r\n    <Property name=\"StandardId\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fal" +
        "se\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty" +
        "=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"" +
        "StandardId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"SeriesId\" type=\"System.Int32\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"SeriesId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"ItemName\" type=\"System.String\" isI" +
        "nherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"ItemName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(50)\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ItemCode\" type=\"Sys" +
        "tem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"ItemCode\" mappingColumnType=\"System.String\" sqlType=\"n" +
        "varchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Valu" +
        "eType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"ValueType\" mappingColumnType=\"System.S" +
        "tring\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pr" +
        "operty name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnTyp" +
        "e=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isR" +
        "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFri" +
        "endKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" " +
        "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFla" +
        "g\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class QmcCheckItem : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcCheckItemEntityConfiguration;
        
        protected int _ItemId;
        
        protected int _StandardId;
        
        protected int _SeriesId;
        
        protected string _ItemName;
        
        protected string _ItemCode;
        
        protected string _ValueType;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcCheckItem left, global::Mesnac.Entity.QmcCheckItem right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcCheckItem left, global::Mesnac.Entity.QmcCheckItem right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ItemId {
            get {
                return this._ItemId;
            }
            set {
                this.OnPropertyChanged("ItemId", this._ItemId, value);
                this._ItemId = value;
            }
        }
        
        public int StandardId {
            get {
                return this._StandardId;
            }
            set {
                this.OnPropertyChanged("StandardId", this._StandardId, value);
                this._StandardId = value;
            }
        }
        
        public int SeriesId {
            get {
                return this._SeriesId;
            }
            set {
                this.OnPropertyChanged("SeriesId", this._SeriesId, value);
                this._SeriesId = value;
            }
        }
        
        public string ItemName {
            get {
                return this._ItemName;
            }
            set {
                this.OnPropertyChanged("ItemName", this._ItemName, value);
                this._ItemName = value;
            }
        }
        
        public string ItemCode {
            get {
                return this._ItemCode;
            }
            set {
                this.OnPropertyChanged("ItemCode", this._ItemCode, value);
                this._ItemCode = value;
            }
        }
        
        public string ValueType {
            get {
                return this._ValueType;
            }
            set {
                this.OnPropertyChanged("ValueType", this._ValueType, value);
                this._ValueType = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcCheckItem._QmcCheckItemEntityConfiguration == null)) {
                QmcCheckItem._QmcCheckItemEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcCheckItem");
            }
            return QmcCheckItem._QmcCheckItemEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ItemId,
                    this._StandardId,
                    this._SeriesId,
                    this._ItemName,
                    this._ItemCode,
                    this._ValueType,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ItemId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StandardId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._SeriesId = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ItemName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ItemCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._ValueType = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Remark = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._DeleteFlag = reader.GetString(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ItemId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StandardId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._SeriesId = ((int)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._ItemName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ItemCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._ValueType = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Remark = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._DeleteFlag = ((string)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcCheckItem).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcCheckItem)(obj)).isAttached) 
                        && (this.ItemId == ((global::Mesnac.Entity.QmcCheckItem)(obj)).ItemId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ItemId = new NBear.Common.PropertyItem("ItemId", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _StandardId = new NBear.Common.PropertyItem("StandardId", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _SeriesId = new NBear.Common.PropertyItem("SeriesId", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _ItemName = new NBear.Common.PropertyItem("ItemName", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _ItemCode = new NBear.Common.PropertyItem("ItemCode", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _ValueType = new NBear.Common.PropertyItem("ValueType", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcCheckItem");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcCheckItem");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ItemId {
                get {
                    if ((aliasName == null)) {
                        return _ItemId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemId", _ItemId.EntityConfiguration, _ItemId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandardId {
                get {
                    if ((aliasName == null)) {
                        return _StandardId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandardId", _StandardId.EntityConfiguration, _StandardId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SeriesId {
                get {
                    if ((aliasName == null)) {
                        return _SeriesId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SeriesId", _SeriesId.EntityConfiguration, _SeriesId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemName {
                get {
                    if ((aliasName == null)) {
                        return _ItemName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemName", _ItemName.EntityConfiguration, _ItemName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ItemCode {
                get {
                    if ((aliasName == null)) {
                        return _ItemCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ItemCode", _ItemCode.EntityConfiguration, _ItemCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ValueType {
                get {
                    if ((aliasName == null)) {
                        return _ValueType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValueType", _ValueType.EntityConfiguration, _ValueType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
