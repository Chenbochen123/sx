//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasStoragePlacePropArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasStoragePlaceProp> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasStoragePlaceProp\" isReadOnly=\"false\" isAutoPreLoad=\"false" +
        "\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"BasStoragePlaceProp\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tr" +
        "ue\" isNotNull=\"true\" />\r\n    <Property name=\"StoragePlaceID\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"StoragePlaceID\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Material" +
        "Code\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit" +
        "=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fal" +
        "se\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" is" +
        "SerializationIgnore=\"false\" mappingName=\"MaterialCode\" mappingColumnType=\"System" +
        ".String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"StorageCapacity\" type=\"System.Nullable`1[System.Int32]\" isInheri" +
        "ted=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"StorageCapacity\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTy" +
        "pe=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StorageN" +
        "umber\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValu" +
        "e=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"StorageNumber\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SpecialPlace\" " +
        "type=\"System.String\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"SpecialPlace\" mappingCo" +
        "lumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false" +
        "\" />\r\n    <Property name=\"PositionType\" type=\"System.String\" isInherited=\"false\"" +
        " sqlDefaultValue=\"\'A\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"PositionType\" mappingColumnType=\"System.String\" sqlType=\"varcha" +
        "r(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"IsFull\" typ" +
        "e=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"IsFull\" " +
        "mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"MaterialName\" type=\"System.Stri" +
        "ng\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"MaterialName\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityCo" +
        "nfiguration>")]
    public partial class BasStoragePlaceProp : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasStoragePlacePropEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _StoragePlaceID;
        
        protected string _MaterialCode;
        
        protected global::System.Int32? _StorageCapacity;
        
        protected global::System.Int32? _StorageNumber;
        
        protected string _SpecialPlace;
        
        protected string _PositionType;
        
        protected global::System.Int32? _IsFull;
        
        protected string _MaterialName;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasStoragePlaceProp left, global::Mesnac.Entity.BasStoragePlaceProp right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasStoragePlaceProp left, global::Mesnac.Entity.BasStoragePlaceProp right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string StoragePlaceID {
            get {
                return this._StoragePlaceID;
            }
            set {
                this.OnPropertyChanged("StoragePlaceID", this._StoragePlaceID, value);
                this._StoragePlaceID = value;
            }
        }
        
        public string MaterialCode {
            get {
                return this._MaterialCode;
            }
            set {
                this.OnPropertyChanged("MaterialCode", this._MaterialCode, value);
                this._MaterialCode = value;
            }
        }
        
        public global::System.Int32? StorageCapacity {
            get {
                return this._StorageCapacity;
            }
            set {
                this.OnPropertyChanged("StorageCapacity", this._StorageCapacity, value);
                this._StorageCapacity = value;
            }
        }
        
        public global::System.Int32? StorageNumber {
            get {
                return this._StorageNumber;
            }
            set {
                this.OnPropertyChanged("StorageNumber", this._StorageNumber, value);
                this._StorageNumber = value;
            }
        }
        
        public string SpecialPlace {
            get {
                return this._SpecialPlace;
            }
            set {
                this.OnPropertyChanged("SpecialPlace", this._SpecialPlace, value);
                this._SpecialPlace = value;
            }
        }
        
        public string PositionType {
            get {
                return this._PositionType;
            }
            set {
                this.OnPropertyChanged("PositionType", this._PositionType, value);
                this._PositionType = value;
            }
        }
        
        public global::System.Int32? IsFull {
            get {
                return this._IsFull;
            }
            set {
                this.OnPropertyChanged("IsFull", this._IsFull, value);
                this._IsFull = value;
            }
        }
        
        public string MaterialName {
            get {
                return this._MaterialName;
            }
            set {
                this.OnPropertyChanged("MaterialName", this._MaterialName, value);
                this._MaterialName = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasStoragePlaceProp._BasStoragePlacePropEntityConfiguration == null)) {
                BasStoragePlaceProp._BasStoragePlacePropEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasStoragePlaceProp");
            }
            return BasStoragePlaceProp._BasStoragePlacePropEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._StoragePlaceID,
                    this._MaterialCode,
                    this._StorageCapacity,
                    this._StorageNumber,
                    this._SpecialPlace,
                    this._PositionType,
                    this._IsFull,
                    this._MaterialName};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StoragePlaceID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._MaterialCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._StorageCapacity = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._StorageNumber = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._SpecialPlace = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._PositionType = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._IsFull = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MaterialName = reader.GetString(8);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StoragePlaceID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._MaterialCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._StorageCapacity = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._StorageNumber = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._SpecialPlace = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._PositionType = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._IsFull = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MaterialName = ((string)(row[8]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasStoragePlaceProp).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasStoragePlaceProp)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.BasStoragePlaceProp)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _StoragePlaceID = new NBear.Common.PropertyItem("StoragePlaceID", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _MaterialCode = new NBear.Common.PropertyItem("MaterialCode", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _StorageCapacity = new NBear.Common.PropertyItem("StorageCapacity", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _StorageNumber = new NBear.Common.PropertyItem("StorageNumber", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _SpecialPlace = new NBear.Common.PropertyItem("SpecialPlace", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _PositionType = new NBear.Common.PropertyItem("PositionType", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _IsFull = new NBear.Common.PropertyItem("IsFull", "Mesnac.Entity.BasStoragePlaceProp");
            
            protected NBear.Common.PropertyItem _MaterialName = new NBear.Common.PropertyItem("MaterialName", "Mesnac.Entity.BasStoragePlaceProp");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StoragePlaceID {
                get {
                    if ((aliasName == null)) {
                        return _StoragePlaceID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StoragePlaceID", _StoragePlaceID.EntityConfiguration, _StoragePlaceID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _MaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialCode", _MaterialCode.EntityConfiguration, _MaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageCapacity {
                get {
                    if ((aliasName == null)) {
                        return _StorageCapacity;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageCapacity", _StorageCapacity.EntityConfiguration, _StorageCapacity.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageNumber {
                get {
                    if ((aliasName == null)) {
                        return _StorageNumber;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageNumber", _StorageNumber.EntityConfiguration, _StorageNumber.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpecialPlace {
                get {
                    if ((aliasName == null)) {
                        return _SpecialPlace;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpecialPlace", _SpecialPlace.EntityConfiguration, _SpecialPlace.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PositionType {
                get {
                    if ((aliasName == null)) {
                        return _PositionType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PositionType", _PositionType.EntityConfiguration, _PositionType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem IsFull {
                get {
                    if ((aliasName == null)) {
                        return _IsFull;
                    }
                    else {
                        return new NBear.Common.PropertyItem("IsFull", _IsFull.EntityConfiguration, _IsFull.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MaterialName {
                get {
                    if ((aliasName == null)) {
                        return _MaterialName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MaterialName", _MaterialName.EntityConfiguration, _MaterialName.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
