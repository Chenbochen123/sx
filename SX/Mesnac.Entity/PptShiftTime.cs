//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptShiftTimeArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptShiftTime> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PptShiftTime\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"PptShiftTime\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ObjI" +
        "D\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=" +
        "\"true\" />\r\n    <Property name=\"FacID\" type=\"System.Nullable`1[System.Int32]\" isI" +
        "nherited=\"false\" sqlDefaultValue=\"(1)\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"FacID\" mappingColumnType=\"System.Nullable`1[Sys" +
        "tem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Proper" +
        "ty name=\"ShiftDT\" type=\"System.DateTime\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftDT\" mappingColumnTyp" +
        "e=\"System.DateTime\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"ProcedureID\" type=\"System.Int32\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ProcedureID" +
        "\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"ShiftID\" type=\"System.Int32\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Shift" +
        "ID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"ShiftStart\" type=\"System.Nullable`1[System.Dat" +
        "eTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"ShiftStart\" mappingColumnType=\"System.Nullable`1[System.Da" +
        "teTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"ShiftEnd\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"fals" +
        "e\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Shi" +
        "ftEnd\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftClassID\" ty" +
        "pe=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftClassID\" mappingColumnTy" +
        "pe=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PptShiftTime : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptShiftTimeEntityConfiguration;
        
        protected int _ObjID;
        
        protected global::System.Int32? _FacID;
        
        protected global::System.DateTime _ShiftDT;
        
        protected int _ProcedureID;
        
        protected int _ShiftID;
        
        protected global::System.DateTime? _ShiftStart;
        
        protected global::System.DateTime? _ShiftEnd;
        
        protected global::System.Int32? _ShiftClassID;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptShiftTime left, global::Mesnac.Entity.PptShiftTime right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptShiftTime left, global::Mesnac.Entity.PptShiftTime right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.Int32? FacID {
            get {
                return this._FacID;
            }
            set {
                this.OnPropertyChanged("FacID", this._FacID, value);
                this._FacID = value;
            }
        }
        
        public global::System.DateTime ShiftDT {
            get {
                return this._ShiftDT;
            }
            set {
                this.OnPropertyChanged("ShiftDT", this._ShiftDT, value);
                this._ShiftDT = value;
            }
        }
        
        public int ProcedureID {
            get {
                return this._ProcedureID;
            }
            set {
                this.OnPropertyChanged("ProcedureID", this._ProcedureID, value);
                this._ProcedureID = value;
            }
        }
        
        public int ShiftID {
            get {
                return this._ShiftID;
            }
            set {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }
        
        public global::System.DateTime? ShiftStart {
            get {
                return this._ShiftStart;
            }
            set {
                this.OnPropertyChanged("ShiftStart", this._ShiftStart, value);
                this._ShiftStart = value;
            }
        }
        
        public global::System.DateTime? ShiftEnd {
            get {
                return this._ShiftEnd;
            }
            set {
                this.OnPropertyChanged("ShiftEnd", this._ShiftEnd, value);
                this._ShiftEnd = value;
            }
        }
        
        public global::System.Int32? ShiftClassID {
            get {
                return this._ShiftClassID;
            }
            set {
                this.OnPropertyChanged("ShiftClassID", this._ShiftClassID, value);
                this._ShiftClassID = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptShiftTime._PptShiftTimeEntityConfiguration == null)) {
                PptShiftTime._PptShiftTimeEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptShiftTime");
            }
            return PptShiftTime._PptShiftTimeEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._FacID,
                    this._ShiftDT,
                    this._ProcedureID,
                    this._ShiftID,
                    this._ShiftStart,
                    this._ShiftEnd,
                    this._ShiftClassID};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._FacID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._ShiftDT = this.GetDateTime(reader, 2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._ProcedureID = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._ShiftID = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._ShiftStart = this.GetDateTime(reader, 5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ShiftEnd = this.GetDateTime(reader, 6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._ShiftClassID = reader.GetInt32(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._FacID = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._ShiftDT = this.GetDateTime(row, 2);
            }
            if ((false == row.IsNull(3))) {
                this._ProcedureID = ((int)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._ShiftID = ((int)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._ShiftStart = this.GetDateTime(row, 5);
            }
            if ((false == row.IsNull(6))) {
                this._ShiftEnd = this.GetDateTime(row, 6);
            }
            if ((false == row.IsNull(7))) {
                this._ShiftClassID = ((System.Nullable<int>)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptShiftTime).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PptShiftTime)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PptShiftTime)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _FacID = new NBear.Common.PropertyItem("FacID", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ShiftDT = new NBear.Common.PropertyItem("ShiftDT", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ProcedureID = new NBear.Common.PropertyItem("ProcedureID", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ShiftStart = new NBear.Common.PropertyItem("ShiftStart", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ShiftEnd = new NBear.Common.PropertyItem("ShiftEnd", "Mesnac.Entity.PptShiftTime");
            
            protected NBear.Common.PropertyItem _ShiftClassID = new NBear.Common.PropertyItem("ShiftClassID", "Mesnac.Entity.PptShiftTime");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FacID {
                get {
                    if ((aliasName == null)) {
                        return _FacID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FacID", _FacID.EntityConfiguration, _FacID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftDT {
                get {
                    if ((aliasName == null)) {
                        return _ShiftDT;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftDT", _ShiftDT.EntityConfiguration, _ShiftDT.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProcedureID {
                get {
                    if ((aliasName == null)) {
                        return _ProcedureID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProcedureID", _ProcedureID.EntityConfiguration, _ProcedureID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftStart {
                get {
                    if ((aliasName == null)) {
                        return _ShiftStart;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftStart", _ShiftStart.EntityConfiguration, _ShiftStart.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftEnd {
                get {
                    if ((aliasName == null)) {
                        return _ShiftEnd;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftEnd", _ShiftEnd.EntityConfiguration, _ShiftEnd.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftClassID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftClassID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftClassID", _ShiftClassID.EntityConfiguration, _ShiftClassID.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
