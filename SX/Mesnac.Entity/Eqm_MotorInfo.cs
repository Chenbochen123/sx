//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_MotorInfoArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_MotorInfo> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_MotorInfo\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBa" +
        "tchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_MotorInfo\" batchSize=\"10\">" +
        "\r\n  <Properties>\r\n    <Property name=\"INo\" type=\"System.Int32\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"INo\"" +
        " mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"t" +
        "rue\" />\r\n    <Property name=\"DepName\" type=\"System.String\" isInherited=\"false\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DepName" +
        "\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"ProcessName\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ProcessName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Workshop\" type=\"S" +
        "ystem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"Workshop\" mappingColumnType=\"System.String\" sqlType=" +
        "\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Eq" +
        "uipName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"EquipName\" mappingColumnType=\"System" +
        ".String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"EquipPart\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipPart\" mappingC" +
        "olumnType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"MotorType\" type=\"System.String\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Mo" +
        "torType\" mappingColumnType=\"System.String\" sqlType=\"varchar(40)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"Power\" type=\"System.Nullable`1[S" +
        "ystem.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"Power\" mappingColumnType=\"System.Nullable`1[System" +
        ".Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"Voltage\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false" +
        "\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Volt" +
        "age\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MotorNo\" type=\"Syste" +
        "m.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"MotorNo\" mappingColumnType=\"System.String\" sqlType=\"varc" +
        "har(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Cbtype\" " +
        "type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"Cbtype\" mappingColumnType=\"System.String\" sql" +
        "Type=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"DianShu\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DianShu\" mappi" +
        "ngColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=" +
        "\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LiCi\" type=\"System.Nullable`1[" +
        "System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" i" +
        "sContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRela" +
        "tionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializat" +
        "ionIgnore=\"false\" mappingName=\"LiCi\" mappingColumnType=\"System.Nullable`1[System" +
        ".Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"Cycle\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" is" +
        "ReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Cycle\" m" +
        "appingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"Checkstand\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"Checkstand\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(4" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StartDate\" ty" +
        "pe=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StartDate\" mappingColumnTy" +
        "pe=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" " +
        "isNotNull=\"false\" />\r\n    <Property name=\"LastDate\" type=\"System.Nullable`1[Syst" +
        "em.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"LastDate\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"Memo\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Memo\" mappingColumnType=" +
        "\"System.String\" sqlType=\"nvarchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"Beiyong\" type=\"System.String\" isInherited=\"false\" isReadO" +
        "nly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendK" +
        "ey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIn" +
        "dexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Beiyong\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class Eqm_MotorInfo : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_MotorInfoEntityConfiguration;
        
        protected int _INo;
        
        protected string _DepName;
        
        protected string _ProcessName;
        
        protected string _Workshop;
        
        protected string _EquipName;
        
        protected string _EquipPart;
        
        protected string _MotorType;
        
        protected global::System.Decimal? _Power;
        
        protected global::System.Decimal? _Voltage;
        
        protected string _MotorNo;
        
        protected string _Cbtype;
        
        protected global::System.Decimal? _DianShu;
        
        protected global::System.Decimal? _LiCi;
        
        protected global::System.Int32? _Cycle;
        
        protected string _Checkstand;
        
        protected global::System.DateTime? _StartDate;
        
        protected global::System.DateTime? _LastDate;
        
        protected string _Memo;
        
        protected string _Beiyong;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_MotorInfo left, global::Mesnac.Entity.Eqm_MotorInfo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_MotorInfo left, global::Mesnac.Entity.Eqm_MotorInfo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int INo {
            get {
                return this._INo;
            }
            set {
                this.OnPropertyChanged("INo", this._INo, value);
                this._INo = value;
            }
        }
        
        public string DepName {
            get {
                return this._DepName;
            }
            set {
                this.OnPropertyChanged("DepName", this._DepName, value);
                this._DepName = value;
            }
        }
        
        public string ProcessName {
            get {
                return this._ProcessName;
            }
            set {
                this.OnPropertyChanged("ProcessName", this._ProcessName, value);
                this._ProcessName = value;
            }
        }
        
        public string Workshop {
            get {
                return this._Workshop;
            }
            set {
                this.OnPropertyChanged("Workshop", this._Workshop, value);
                this._Workshop = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public string EquipPart {
            get {
                return this._EquipPart;
            }
            set {
                this.OnPropertyChanged("EquipPart", this._EquipPart, value);
                this._EquipPart = value;
            }
        }
        
        public string MotorType {
            get {
                return this._MotorType;
            }
            set {
                this.OnPropertyChanged("MotorType", this._MotorType, value);
                this._MotorType = value;
            }
        }
        
        public global::System.Decimal? Power {
            get {
                return this._Power;
            }
            set {
                this.OnPropertyChanged("Power", this._Power, value);
                this._Power = value;
            }
        }
        
        public global::System.Decimal? Voltage {
            get {
                return this._Voltage;
            }
            set {
                this.OnPropertyChanged("Voltage", this._Voltage, value);
                this._Voltage = value;
            }
        }
        
        public string MotorNo {
            get {
                return this._MotorNo;
            }
            set {
                this.OnPropertyChanged("MotorNo", this._MotorNo, value);
                this._MotorNo = value;
            }
        }
        
        public string Cbtype {
            get {
                return this._Cbtype;
            }
            set {
                this.OnPropertyChanged("Cbtype", this._Cbtype, value);
                this._Cbtype = value;
            }
        }
        
        public global::System.Decimal? DianShu {
            get {
                return this._DianShu;
            }
            set {
                this.OnPropertyChanged("DianShu", this._DianShu, value);
                this._DianShu = value;
            }
        }
        
        public global::System.Decimal? LiCi {
            get {
                return this._LiCi;
            }
            set {
                this.OnPropertyChanged("LiCi", this._LiCi, value);
                this._LiCi = value;
            }
        }
        
        public global::System.Int32? Cycle {
            get {
                return this._Cycle;
            }
            set {
                this.OnPropertyChanged("Cycle", this._Cycle, value);
                this._Cycle = value;
            }
        }
        
        public string Checkstand {
            get {
                return this._Checkstand;
            }
            set {
                this.OnPropertyChanged("Checkstand", this._Checkstand, value);
                this._Checkstand = value;
            }
        }
        
        public global::System.DateTime? StartDate {
            get {
                return this._StartDate;
            }
            set {
                this.OnPropertyChanged("StartDate", this._StartDate, value);
                this._StartDate = value;
            }
        }
        
        public global::System.DateTime? LastDate {
            get {
                return this._LastDate;
            }
            set {
                this.OnPropertyChanged("LastDate", this._LastDate, value);
                this._LastDate = value;
            }
        }
        
        public string Memo {
            get {
                return this._Memo;
            }
            set {
                this.OnPropertyChanged("Memo", this._Memo, value);
                this._Memo = value;
            }
        }
        
        public string Beiyong {
            get {
                return this._Beiyong;
            }
            set {
                this.OnPropertyChanged("Beiyong", this._Beiyong, value);
                this._Beiyong = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_MotorInfo._Eqm_MotorInfoEntityConfiguration == null)) {
                Eqm_MotorInfo._Eqm_MotorInfoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_MotorInfo");
            }
            return Eqm_MotorInfo._Eqm_MotorInfoEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._INo,
                    this._DepName,
                    this._ProcessName,
                    this._Workshop,
                    this._EquipName,
                    this._EquipPart,
                    this._MotorType,
                    this._Power,
                    this._Voltage,
                    this._MotorNo,
                    this._Cbtype,
                    this._DianShu,
                    this._LiCi,
                    this._Cycle,
                    this._Checkstand,
                    this._StartDate,
                    this._LastDate,
                    this._Memo,
                    this._Beiyong};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._INo = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._DepName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._ProcessName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Workshop = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._EquipName = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._EquipPart = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MotorType = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Power = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._Voltage = reader.GetDecimal(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MotorNo = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Cbtype = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._DianShu = reader.GetDecimal(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._LiCi = reader.GetDecimal(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._Cycle = reader.GetInt32(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._Checkstand = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._StartDate = this.GetDateTime(reader, 15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._LastDate = this.GetDateTime(reader, 16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._Memo = reader.GetString(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._Beiyong = reader.GetString(18);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._INo = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._DepName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._ProcessName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Workshop = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._EquipName = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._EquipPart = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MotorType = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Power = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._Voltage = ((System.Nullable<decimal>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MotorNo = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._Cbtype = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._DianShu = ((System.Nullable<decimal>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._LiCi = ((System.Nullable<decimal>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._Cycle = ((System.Nullable<int>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._Checkstand = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._StartDate = this.GetDateTime(row, 15);
            }
            if ((false == row.IsNull(16))) {
                this._LastDate = this.GetDateTime(row, 16);
            }
            if ((false == row.IsNull(17))) {
                this._Memo = ((string)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._Beiyong = ((string)(row[18]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_MotorInfo).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_MotorInfo)(obj)).isAttached) 
                        && (this.INo == ((global::Mesnac.Entity.Eqm_MotorInfo)(obj)).INo));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _INo = new NBear.Common.PropertyItem("INo", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _DepName = new NBear.Common.PropertyItem("DepName", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _ProcessName = new NBear.Common.PropertyItem("ProcessName", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Workshop = new NBear.Common.PropertyItem("Workshop", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _EquipPart = new NBear.Common.PropertyItem("EquipPart", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _MotorType = new NBear.Common.PropertyItem("MotorType", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Power = new NBear.Common.PropertyItem("Power", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Voltage = new NBear.Common.PropertyItem("Voltage", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _MotorNo = new NBear.Common.PropertyItem("MotorNo", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Cbtype = new NBear.Common.PropertyItem("Cbtype", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _DianShu = new NBear.Common.PropertyItem("DianShu", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _LiCi = new NBear.Common.PropertyItem("LiCi", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Cycle = new NBear.Common.PropertyItem("Cycle", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Checkstand = new NBear.Common.PropertyItem("Checkstand", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _StartDate = new NBear.Common.PropertyItem("StartDate", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _LastDate = new NBear.Common.PropertyItem("LastDate", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Memo = new NBear.Common.PropertyItem("Memo", "Mesnac.Entity.Eqm_MotorInfo");
            
            protected NBear.Common.PropertyItem _Beiyong = new NBear.Common.PropertyItem("Beiyong", "Mesnac.Entity.Eqm_MotorInfo");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem INo {
                get {
                    if ((aliasName == null)) {
                        return _INo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("INo", _INo.EntityConfiguration, _INo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DepName {
                get {
                    if ((aliasName == null)) {
                        return _DepName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DepName", _DepName.EntityConfiguration, _DepName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProcessName {
                get {
                    if ((aliasName == null)) {
                        return _ProcessName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProcessName", _ProcessName.EntityConfiguration, _ProcessName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshop {
                get {
                    if ((aliasName == null)) {
                        return _Workshop;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshop", _Workshop.EntityConfiguration, _Workshop.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipPart {
                get {
                    if ((aliasName == null)) {
                        return _EquipPart;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipPart", _EquipPart.EntityConfiguration, _EquipPart.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MotorType {
                get {
                    if ((aliasName == null)) {
                        return _MotorType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MotorType", _MotorType.EntityConfiguration, _MotorType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Power {
                get {
                    if ((aliasName == null)) {
                        return _Power;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Power", _Power.EntityConfiguration, _Power.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Voltage {
                get {
                    if ((aliasName == null)) {
                        return _Voltage;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Voltage", _Voltage.EntityConfiguration, _Voltage.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MotorNo {
                get {
                    if ((aliasName == null)) {
                        return _MotorNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MotorNo", _MotorNo.EntityConfiguration, _MotorNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Cbtype {
                get {
                    if ((aliasName == null)) {
                        return _Cbtype;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Cbtype", _Cbtype.EntityConfiguration, _Cbtype.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DianShu {
                get {
                    if ((aliasName == null)) {
                        return _DianShu;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DianShu", _DianShu.EntityConfiguration, _DianShu.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LiCi {
                get {
                    if ((aliasName == null)) {
                        return _LiCi;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LiCi", _LiCi.EntityConfiguration, _LiCi.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Cycle {
                get {
                    if ((aliasName == null)) {
                        return _Cycle;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Cycle", _Cycle.EntityConfiguration, _Cycle.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Checkstand {
                get {
                    if ((aliasName == null)) {
                        return _Checkstand;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Checkstand", _Checkstand.EntityConfiguration, _Checkstand.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartDate {
                get {
                    if ((aliasName == null)) {
                        return _StartDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartDate", _StartDate.EntityConfiguration, _StartDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LastDate {
                get {
                    if ((aliasName == null)) {
                        return _LastDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LastDate", _LastDate.EntityConfiguration, _LastDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Memo {
                get {
                    if ((aliasName == null)) {
                        return _Memo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Memo", _Memo.EntityConfiguration, _Memo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Beiyong {
                get {
                    if ((aliasName == null)) {
                        return _Beiyong;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Beiyong", _Beiyong.EntityConfiguration, _Beiyong.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
