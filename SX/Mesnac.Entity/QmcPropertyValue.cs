//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmcPropertyValueArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmcPropertyValue> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmcPropertyValue\" isReadOnly=\"false\" isAutoPreLoad=\"false\" i" +
        "sBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmcPropertyValue\" batchSize" +
        "=\"10\">\r\n  <Properties>\r\n    <Property name=\"ValueId\" type=\"System.Int32\" isInher" +
        "ited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"ValueId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tru" +
        "e\" isNotNull=\"true\" />\r\n    <Property name=\"PropertyId\" type=\"System.Int32\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"PropertyId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"PropertyValue\" type=\"System." +
        "String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"PropertyValue\" mappingColumnType=\"System.String\" sqlType=\"" +
        "nvarchar(60)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Rem" +
        "ark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.String" +
        "\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"DeleteFlag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeleteFlag\" mappingColumn" +
        "Type=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class QmcPropertyValue : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmcPropertyValueEntityConfiguration;
        
        protected int _ValueId;
        
        protected int _PropertyId;
        
        protected string _PropertyValue;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmcPropertyValue left, global::Mesnac.Entity.QmcPropertyValue right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmcPropertyValue left, global::Mesnac.Entity.QmcPropertyValue right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ValueId {
            get {
                return this._ValueId;
            }
            set {
                this.OnPropertyChanged("ValueId", this._ValueId, value);
                this._ValueId = value;
            }
        }
        
        public int PropertyId {
            get {
                return this._PropertyId;
            }
            set {
                this.OnPropertyChanged("PropertyId", this._PropertyId, value);
                this._PropertyId = value;
            }
        }
        
        public string PropertyValue {
            get {
                return this._PropertyValue;
            }
            set {
                this.OnPropertyChanged("PropertyValue", this._PropertyValue, value);
                this._PropertyValue = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmcPropertyValue._QmcPropertyValueEntityConfiguration == null)) {
                QmcPropertyValue._QmcPropertyValueEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmcPropertyValue");
            }
            return QmcPropertyValue._QmcPropertyValueEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ValueId,
                    this._PropertyId,
                    this._PropertyValue,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ValueId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._PropertyId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._PropertyValue = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Remark = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._DeleteFlag = reader.GetString(4);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ValueId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._PropertyId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._PropertyValue = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Remark = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._DeleteFlag = ((string)(row[4]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmcPropertyValue).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmcPropertyValue)(obj)).isAttached) 
                        && (this.ValueId == ((global::Mesnac.Entity.QmcPropertyValue)(obj)).ValueId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ValueId = new NBear.Common.PropertyItem("ValueId", "Mesnac.Entity.QmcPropertyValue");
            
            protected NBear.Common.PropertyItem _PropertyId = new NBear.Common.PropertyItem("PropertyId", "Mesnac.Entity.QmcPropertyValue");
            
            protected NBear.Common.PropertyItem _PropertyValue = new NBear.Common.PropertyItem("PropertyValue", "Mesnac.Entity.QmcPropertyValue");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.QmcPropertyValue");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.QmcPropertyValue");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ValueId {
                get {
                    if ((aliasName == null)) {
                        return _ValueId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ValueId", _ValueId.EntityConfiguration, _ValueId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PropertyId {
                get {
                    if ((aliasName == null)) {
                        return _PropertyId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PropertyId", _PropertyId.EntityConfiguration, _PropertyId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PropertyValue {
                get {
                    if ((aliasName == null)) {
                        return _PropertyValue;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PropertyValue", _PropertyValue.EntityConfiguration, _PropertyValue.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
