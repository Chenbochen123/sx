//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptSetTimeArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptSetTime> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PptSetTime\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatchU" +
        "pdate=\"false\" isRelation=\"false\" mappingName=\"PptSetTime\" batchSize=\"10\">\r\n  <Pr" +
        "operties>\r\n    <Property name=\"ObjID\" type=\"System.Nullable`1[System.Int32]\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ProcedureID\" t" +
        "ype=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"ProcedureID\" mappingColumnTyp" +
        "e=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"ShiftID\" type=\"System.Nullable`1[System.Int32]\"" +
        " isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"ShiftID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTy" +
        "pe=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StartTim" +
        "e\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"fa" +
        "lse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" " +
        "isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeri" +
        "alizationIgnore=\"false\" mappingName=\"StartTime\" mappingColumnType=\"System.String" +
        "\" sqlType=\"char(8)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"StopTime\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"StopTime\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"char(8)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"UseFlag\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" " +
        "isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"UseFlag" +
        "\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DayFlag\" type=\"System.Nullabl" +
        "e`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"DayFlag\" mappingColumnType=\"System.Nullable`1[Sy" +
        "stem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Proper" +
        "ties>\r\n</EntityConfiguration>")]
    public partial class PptSetTime : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptSetTimeEntityConfiguration;
        
        protected global::System.Int32? _ObjID;
        
        protected global::System.Int32? _ProcedureID;
        
        protected global::System.Int32? _ShiftID;
        
        protected string _StartTime;
        
        protected string _StopTime;
        
        protected global::System.Int32? _UseFlag;
        
        protected global::System.Int32? _DayFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptSetTime left, global::Mesnac.Entity.PptSetTime right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptSetTime left, global::Mesnac.Entity.PptSetTime right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.Int32? ProcedureID {
            get {
                return this._ProcedureID;
            }
            set {
                this.OnPropertyChanged("ProcedureID", this._ProcedureID, value);
                this._ProcedureID = value;
            }
        }
        
        public global::System.Int32? ShiftID {
            get {
                return this._ShiftID;
            }
            set {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }
        
        public string StartTime {
            get {
                return this._StartTime;
            }
            set {
                this.OnPropertyChanged("StartTime", this._StartTime, value);
                this._StartTime = value;
            }
        }
        
        public string StopTime {
            get {
                return this._StopTime;
            }
            set {
                this.OnPropertyChanged("StopTime", this._StopTime, value);
                this._StopTime = value;
            }
        }
        
        public global::System.Int32? UseFlag {
            get {
                return this._UseFlag;
            }
            set {
                this.OnPropertyChanged("UseFlag", this._UseFlag, value);
                this._UseFlag = value;
            }
        }
        
        public global::System.Int32? DayFlag {
            get {
                return this._DayFlag;
            }
            set {
                this.OnPropertyChanged("DayFlag", this._DayFlag, value);
                this._DayFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptSetTime._PptSetTimeEntityConfiguration == null)) {
                PptSetTime._PptSetTimeEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptSetTime");
            }
            return PptSetTime._PptSetTimeEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._ProcedureID,
                    this._ShiftID,
                    this._StartTime,
                    this._StopTime,
                    this._UseFlag,
                    this._DayFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._ProcedureID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._ShiftID = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._StartTime = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._StopTime = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._UseFlag = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._DayFlag = reader.GetInt32(6);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._ProcedureID = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._ShiftID = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._StartTime = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._StopTime = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._UseFlag = ((System.Nullable<int>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._DayFlag = ((System.Nullable<int>)(row[6]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptSetTime).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PptSetTime)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _ProcedureID = new NBear.Common.PropertyItem("ProcedureID", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _StartTime = new NBear.Common.PropertyItem("StartTime", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _StopTime = new NBear.Common.PropertyItem("StopTime", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _UseFlag = new NBear.Common.PropertyItem("UseFlag", "Mesnac.Entity.PptSetTime");
            
            protected NBear.Common.PropertyItem _DayFlag = new NBear.Common.PropertyItem("DayFlag", "Mesnac.Entity.PptSetTime");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ProcedureID {
                get {
                    if ((aliasName == null)) {
                        return _ProcedureID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ProcedureID", _ProcedureID.EntityConfiguration, _ProcedureID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftID {
                get {
                    if ((aliasName == null)) {
                        return _ShiftID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StartTime {
                get {
                    if ((aliasName == null)) {
                        return _StartTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StartTime", _StartTime.EntityConfiguration, _StartTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StopTime {
                get {
                    if ((aliasName == null)) {
                        return _StopTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StopTime", _StopTime.EntityConfiguration, _StopTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UseFlag {
                get {
                    if ((aliasName == null)) {
                        return _UseFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UseFlag", _UseFlag.EntityConfiguration, _UseFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DayFlag {
                get {
                    if ((aliasName == null)) {
                        return _DayFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DayFlag", _DayFlag.EntityConfiguration, _DayFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
