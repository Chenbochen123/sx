//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PmtRecipeMixingArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PmtRecipeMixing> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PmtRecipeMixing\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"PmtRecipeMixing\" batchSize=\"1" +
        "0\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=" +
        "\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fa" +
        "lse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPropert" +
        "y=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=" +
        "\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"RecipeObjID\" type=\"System.Nullable`1[Syste" +
        "m.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"RecipeObjID\" mappingColumnType=\"System.Nullable`1[System." +
        "Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"RecipeEquipCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecipeEquipCode\" mapping" +
        "ColumnType=\"System.String\" sqlType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"RecipeMaterialCode\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"RecipeMaterialCode\" mappingColumnType=\"System.String\" sqlType=\"char(13)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeVersionID\" type=" +
        "\"System.Int32\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"RecipeVersionID\" mappingColumnType=\"System.Int32\" sq" +
        "lType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mixin" +
        "gStep\" type=\"System.Int32\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"MixingStep\" mappingColumnType=\"System.In" +
        "t32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"MixingTime\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadO" +
        "nly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingTime\" ma" +
        "ppingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"MixingTemp\" type=\"System.Nullable" +
        "`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"MixingTemp\" mappingColumnType=\"System.Nullable`" +
        "1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n" +
        "    <Property name=\"MixingEnergy\" type=\"System.Nullable`1[System.Decimal]\" isInh" +
        "erited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQu" +
        "ery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndex" +
        "Property=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappi" +
        "ngName=\"MixingEnergy\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlT" +
        "ype=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mix" +
        "ingPower\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnl" +
        "y=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingPower\" map" +
        "pingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixingPress\" type=\"System.Nu" +
        "llable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"MixingPress\" mappingColumnType=\"System.Nu" +
        "llable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"fals" +
        "e\" />\r\n    <Property name=\"MixingSpeed\" type=\"System.Nullable`1[System.Int32]\" i" +
        "sInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"MixingSpeed\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sql" +
        "Type=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Action" +
        "Code\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=" +
        "\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fals" +
        "e\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isS" +
        "erializationIgnore=\"false\" mappingName=\"ActionCode\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"char(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property" +
        " name=\"B_Version\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"B_Version\" mappingColumnType" +
        "=\"System.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"R_Version\" type=\"System.String\" isInherited=\"false\" isReadOnl" +
        "y=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"R_Version\" mappi" +
        "ngColumnType=\"System.String\" sqlType=\"char(13)\" isPrimaryKey=\"false\" isNotNull=\"" +
        "false\" />\r\n    <Property name=\"S_Factory\" type=\"System.String\" isInherited=\"fals" +
        "e\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" " +
        "isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fa" +
        "lse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"S_Fa" +
        "ctory\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"Recipe_type\" type=\"System.Nullable`" +
        "1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"Recipe_type\" mappingColumnType=\"System.Nullable`1[" +
        "System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Pro" +
        "perty name=\"Time_diff\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false" +
        "\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Time_" +
        "diff\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Temp_diff\" type=\"System.N" +
        "ullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"Temp_diff\" mappingColumnType=\"System.Nulla" +
        "ble`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "  <Property name=\"Ener_diff\" type=\"System.Nullable`1[System.Decimal]\" isInherite" +
        "d=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"Ener_diff\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"dec" +
        "imal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"TermCode\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"TermCode\" mappingColumnType=\"System.String\" sql" +
        "Type=\"char(4)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Co" +
        "ndCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"CondCode\" mappingColumnType=\"System.St" +
        "ring\" sqlType=\"char(2)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Propertie" +
        "s>\r\n</EntityConfiguration>")]
    public partial class PmtRecipeMixing : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PmtRecipeMixingEntityConfiguration;
        
        protected int _ObjID;
        
        protected global::System.Int32? _RecipeObjID;
        
        protected string _RecipeEquipCode;
        
        protected string _RecipeMaterialCode;
        
        protected int _RecipeVersionID;
        
        protected int _MixingStep;
        
        protected global::System.Int32? _MixingTime;
        
        protected global::System.Decimal? _MixingTemp;
        
        protected global::System.Decimal? _MixingEnergy;
        
        protected global::System.Decimal? _MixingPower;
        
        protected global::System.Decimal? _MixingPress;
        
        protected global::System.Int32? _MixingSpeed;
        
        protected string _ActionCode;
        
        protected string _B_Version;
        
        protected string _R_Version;
        
        protected string _S_Factory;
        
        protected global::System.Int32? _Recipe_type;
        
        protected global::System.Int32? _Time_diff;
        
        protected global::System.Int32? _Temp_diff;
        
        protected global::System.Decimal? _Ener_diff;
        
        protected string _TermCode;
        
        protected string _CondCode;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PmtRecipeMixing left, global::Mesnac.Entity.PmtRecipeMixing right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PmtRecipeMixing left, global::Mesnac.Entity.PmtRecipeMixing right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public global::System.Int32? RecipeObjID {
            get {
                return this._RecipeObjID;
            }
            set {
                this.OnPropertyChanged("RecipeObjID", this._RecipeObjID, value);
                this._RecipeObjID = value;
            }
        }
        
        public string RecipeEquipCode {
            get {
                return this._RecipeEquipCode;
            }
            set {
                this.OnPropertyChanged("RecipeEquipCode", this._RecipeEquipCode, value);
                this._RecipeEquipCode = value;
            }
        }
        
        public string RecipeMaterialCode {
            get {
                return this._RecipeMaterialCode;
            }
            set {
                this.OnPropertyChanged("RecipeMaterialCode", this._RecipeMaterialCode, value);
                this._RecipeMaterialCode = value;
            }
        }
        
        public int RecipeVersionID {
            get {
                return this._RecipeVersionID;
            }
            set {
                this.OnPropertyChanged("RecipeVersionID", this._RecipeVersionID, value);
                this._RecipeVersionID = value;
            }
        }
        
        public int MixingStep {
            get {
                return this._MixingStep;
            }
            set {
                this.OnPropertyChanged("MixingStep", this._MixingStep, value);
                this._MixingStep = value;
            }
        }
        
        public global::System.Int32? MixingTime {
            get {
                return this._MixingTime;
            }
            set {
                this.OnPropertyChanged("MixingTime", this._MixingTime, value);
                this._MixingTime = value;
            }
        }
        
        public global::System.Decimal? MixingTemp {
            get {
                return this._MixingTemp;
            }
            set {
                this.OnPropertyChanged("MixingTemp", this._MixingTemp, value);
                this._MixingTemp = value;
            }
        }
        
        public global::System.Decimal? MixingEnergy {
            get {
                return this._MixingEnergy;
            }
            set {
                this.OnPropertyChanged("MixingEnergy", this._MixingEnergy, value);
                this._MixingEnergy = value;
            }
        }
        
        public global::System.Decimal? MixingPower {
            get {
                return this._MixingPower;
            }
            set {
                this.OnPropertyChanged("MixingPower", this._MixingPower, value);
                this._MixingPower = value;
            }
        }
        
        public global::System.Decimal? MixingPress {
            get {
                return this._MixingPress;
            }
            set {
                this.OnPropertyChanged("MixingPress", this._MixingPress, value);
                this._MixingPress = value;
            }
        }
        
        public global::System.Int32? MixingSpeed {
            get {
                return this._MixingSpeed;
            }
            set {
                this.OnPropertyChanged("MixingSpeed", this._MixingSpeed, value);
                this._MixingSpeed = value;
            }
        }
        
        public string ActionCode {
            get {
                return this._ActionCode;
            }
            set {
                this.OnPropertyChanged("ActionCode", this._ActionCode, value);
                this._ActionCode = value;
            }
        }
        
        public string B_Version {
            get {
                return this._B_Version;
            }
            set {
                this.OnPropertyChanged("B_Version", this._B_Version, value);
                this._B_Version = value;
            }
        }
        
        public string R_Version {
            get {
                return this._R_Version;
            }
            set {
                this.OnPropertyChanged("R_Version", this._R_Version, value);
                this._R_Version = value;
            }
        }
        
        public string S_Factory {
            get {
                return this._S_Factory;
            }
            set {
                this.OnPropertyChanged("S_Factory", this._S_Factory, value);
                this._S_Factory = value;
            }
        }
        
        public global::System.Int32? Recipe_type {
            get {
                return this._Recipe_type;
            }
            set {
                this.OnPropertyChanged("Recipe_type", this._Recipe_type, value);
                this._Recipe_type = value;
            }
        }
        
        public global::System.Int32? Time_diff {
            get {
                return this._Time_diff;
            }
            set {
                this.OnPropertyChanged("Time_diff", this._Time_diff, value);
                this._Time_diff = value;
            }
        }
        
        public global::System.Int32? Temp_diff {
            get {
                return this._Temp_diff;
            }
            set {
                this.OnPropertyChanged("Temp_diff", this._Temp_diff, value);
                this._Temp_diff = value;
            }
        }
        
        public global::System.Decimal? Ener_diff {
            get {
                return this._Ener_diff;
            }
            set {
                this.OnPropertyChanged("Ener_diff", this._Ener_diff, value);
                this._Ener_diff = value;
            }
        }
        
        public string TermCode {
            get {
                return this._TermCode;
            }
            set {
                this.OnPropertyChanged("TermCode", this._TermCode, value);
                this._TermCode = value;
            }
        }
        
        public string CondCode {
            get {
                return this._CondCode;
            }
            set {
                this.OnPropertyChanged("CondCode", this._CondCode, value);
                this._CondCode = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PmtRecipeMixing._PmtRecipeMixingEntityConfiguration == null)) {
                PmtRecipeMixing._PmtRecipeMixingEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PmtRecipeMixing");
            }
            return PmtRecipeMixing._PmtRecipeMixingEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._RecipeObjID,
                    this._RecipeEquipCode,
                    this._RecipeMaterialCode,
                    this._RecipeVersionID,
                    this._MixingStep,
                    this._MixingTime,
                    this._MixingTemp,
                    this._MixingEnergy,
                    this._MixingPower,
                    this._MixingPress,
                    this._MixingSpeed,
                    this._ActionCode,
                    this._B_Version,
                    this._R_Version,
                    this._S_Factory,
                    this._Recipe_type,
                    this._Time_diff,
                    this._Temp_diff,
                    this._Ener_diff,
                    this._TermCode,
                    this._CondCode};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._RecipeObjID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._RecipeEquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._RecipeMaterialCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._RecipeVersionID = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._MixingStep = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MixingTime = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._MixingTemp = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixingEnergy = reader.GetDecimal(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._MixingPower = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._MixingPress = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixingSpeed = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._ActionCode = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._B_Version = reader.GetString(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._R_Version = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._S_Factory = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._Recipe_type = reader.GetInt32(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._Time_diff = reader.GetInt32(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._Temp_diff = reader.GetInt32(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._Ener_diff = reader.GetDecimal(19);
            }
            if ((false == reader.IsDBNull(20))) {
                this._TermCode = reader.GetString(20);
            }
            if ((false == reader.IsDBNull(21))) {
                this._CondCode = reader.GetString(21);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._RecipeObjID = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._RecipeEquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._RecipeMaterialCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._RecipeVersionID = ((int)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._MixingStep = ((int)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MixingTime = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._MixingTemp = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixingEnergy = ((System.Nullable<decimal>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._MixingPower = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._MixingPress = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixingSpeed = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._ActionCode = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._B_Version = ((string)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._R_Version = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._S_Factory = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._Recipe_type = ((System.Nullable<int>)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._Time_diff = ((System.Nullable<int>)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._Temp_diff = ((System.Nullable<int>)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._Ener_diff = ((System.Nullable<decimal>)(row[19]));
            }
            if ((false == row.IsNull(20))) {
                this._TermCode = ((string)(row[20]));
            }
            if ((false == row.IsNull(21))) {
                this._CondCode = ((string)(row[21]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PmtRecipeMixing).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PmtRecipeMixing)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _RecipeObjID = new NBear.Common.PropertyItem("RecipeObjID", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _RecipeEquipCode = new NBear.Common.PropertyItem("RecipeEquipCode", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _RecipeMaterialCode = new NBear.Common.PropertyItem("RecipeMaterialCode", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _RecipeVersionID = new NBear.Common.PropertyItem("RecipeVersionID", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingStep = new NBear.Common.PropertyItem("MixingStep", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingTime = new NBear.Common.PropertyItem("MixingTime", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingTemp = new NBear.Common.PropertyItem("MixingTemp", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingEnergy = new NBear.Common.PropertyItem("MixingEnergy", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingPower = new NBear.Common.PropertyItem("MixingPower", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingPress = new NBear.Common.PropertyItem("MixingPress", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _MixingSpeed = new NBear.Common.PropertyItem("MixingSpeed", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _ActionCode = new NBear.Common.PropertyItem("ActionCode", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _B_Version = new NBear.Common.PropertyItem("B_Version", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _R_Version = new NBear.Common.PropertyItem("R_Version", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _S_Factory = new NBear.Common.PropertyItem("S_Factory", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _Recipe_type = new NBear.Common.PropertyItem("Recipe_type", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _Time_diff = new NBear.Common.PropertyItem("Time_diff", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _Temp_diff = new NBear.Common.PropertyItem("Temp_diff", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _Ener_diff = new NBear.Common.PropertyItem("Ener_diff", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _TermCode = new NBear.Common.PropertyItem("TermCode", "Mesnac.Entity.PmtRecipeMixing");
            
            protected NBear.Common.PropertyItem _CondCode = new NBear.Common.PropertyItem("CondCode", "Mesnac.Entity.PmtRecipeMixing");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeObjID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeObjID", _RecipeObjID.EntityConfiguration, _RecipeObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeEquipCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeEquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeEquipCode", _RecipeEquipCode.EntityConfiguration, _RecipeEquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeMaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeMaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeMaterialCode", _RecipeMaterialCode.EntityConfiguration, _RecipeMaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeVersionID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeVersionID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeVersionID", _RecipeVersionID.EntityConfiguration, _RecipeVersionID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingStep {
                get {
                    if ((aliasName == null)) {
                        return _MixingStep;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingStep", _MixingStep.EntityConfiguration, _MixingStep.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTime {
                get {
                    if ((aliasName == null)) {
                        return _MixingTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTime", _MixingTime.EntityConfiguration, _MixingTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingTemp {
                get {
                    if ((aliasName == null)) {
                        return _MixingTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingTemp", _MixingTemp.EntityConfiguration, _MixingTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingEnergy {
                get {
                    if ((aliasName == null)) {
                        return _MixingEnergy;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingEnergy", _MixingEnergy.EntityConfiguration, _MixingEnergy.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPower {
                get {
                    if ((aliasName == null)) {
                        return _MixingPower;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPower", _MixingPower.EntityConfiguration, _MixingPower.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingPress {
                get {
                    if ((aliasName == null)) {
                        return _MixingPress;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingPress", _MixingPress.EntityConfiguration, _MixingPress.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingSpeed {
                get {
                    if ((aliasName == null)) {
                        return _MixingSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingSpeed", _MixingSpeed.EntityConfiguration, _MixingSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ActionCode {
                get {
                    if ((aliasName == null)) {
                        return _ActionCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ActionCode", _ActionCode.EntityConfiguration, _ActionCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem B_Version {
                get {
                    if ((aliasName == null)) {
                        return _B_Version;
                    }
                    else {
                        return new NBear.Common.PropertyItem("B_Version", _B_Version.EntityConfiguration, _B_Version.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem R_Version {
                get {
                    if ((aliasName == null)) {
                        return _R_Version;
                    }
                    else {
                        return new NBear.Common.PropertyItem("R_Version", _R_Version.EntityConfiguration, _R_Version.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem S_Factory {
                get {
                    if ((aliasName == null)) {
                        return _S_Factory;
                    }
                    else {
                        return new NBear.Common.PropertyItem("S_Factory", _S_Factory.EntityConfiguration, _S_Factory.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Recipe_type {
                get {
                    if ((aliasName == null)) {
                        return _Recipe_type;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Recipe_type", _Recipe_type.EntityConfiguration, _Recipe_type.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Time_diff {
                get {
                    if ((aliasName == null)) {
                        return _Time_diff;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Time_diff", _Time_diff.EntityConfiguration, _Time_diff.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Temp_diff {
                get {
                    if ((aliasName == null)) {
                        return _Temp_diff;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Temp_diff", _Temp_diff.EntityConfiguration, _Temp_diff.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Ener_diff {
                get {
                    if ((aliasName == null)) {
                        return _Ener_diff;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Ener_diff", _Ener_diff.EntityConfiguration, _Ener_diff.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TermCode {
                get {
                    if ((aliasName == null)) {
                        return _TermCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TermCode", _TermCode.EntityConfiguration, _TermCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CondCode {
                get {
                    if ((aliasName == null)) {
                        return _CondCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CondCode", _CondCode.EntityConfiguration, _CondCode.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
