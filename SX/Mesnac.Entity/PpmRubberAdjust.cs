//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PpmRubberAdjustArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubberAdjust>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmRubberAdjust\" isReadOnly=\"false\" isAutoPreLoad=\"false\" is" +
        "BatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubberAdjust\" batchSize=\"" +
        "10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited" +
        "=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNo" +
        "tNull=\"true\" />\r\n    <Property name=\"StorageID\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"StorageID\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StoragePlaceID\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"StoragePlaceID\" mappingColumnType=\"System.String\" sqlTy" +
        "pe=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"Barcode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompound" +
        "Unit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=" +
        "\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false" +
        "\" isSerializationIgnore=\"false\" mappingName=\"Barcode\" mappingColumnType=\"System." +
        "String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"ShelfBarcode\" type=\"System.String\" isInherited=\"false\" isReadOnly=" +
        "\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"" +
        "false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexP" +
        "ropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShelfBarcode\" map" +
        "pingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNot" +
        "Null=\"false\" />\r\n    <Property name=\"PlanDate\" type=\"System.Nullable`1[System.Da" +
        "teTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"PlanDate\" mappingColumnType=\"System.Nullable`1[System.Dat" +
        "eTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"RecordDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Re" +
        "cordDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"dateti" +
        "me\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ToStorageID\" " +
        "type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"fals" +
        "e\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" is" +
        "RelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerial" +
        "izationIgnore=\"false\" mappingName=\"ToStorageID\" mappingColumnType=\"System.String" +
        "\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Propert" +
        "y name=\"ToStoragePlaceID\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ToStoragePlaceID\" m" +
        "appingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"AdjustWeight\" type=\"System.Nullable`1[Sys" +
        "tem.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"AdjustWeight\" mappingColumnType=\"System.Nullable`1[S" +
        "ystem.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"OperPerson\" type=\"System.String\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"OperPerson\" mapp" +
        "ingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isInherited" +
        "=\"false\" sqlDefaultValue=\"\'0\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"" +
        "char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityCon" +
        "figuration>")]
    public partial class PpmRubberAdjust : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PpmRubberAdjustEntityConfiguration;

        protected int _ObjID;

        protected string _StorageID;

        protected string _StoragePlaceID;

        protected string _Barcode;

        protected string _ShelfBarcode;

        protected global::System.DateTime? _PlanDate;

        protected global::System.DateTime? _RecordDate;

        protected string _ToStorageID;

        protected string _ToStoragePlaceID;

        protected global::System.Decimal? _AdjustWeight;

        protected string _OperPerson;

        protected string _DeleteFlag;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PpmRubberAdjust left, global::Mesnac.Entity.PpmRubberAdjust right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PpmRubberAdjust left, global::Mesnac.Entity.PpmRubberAdjust right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public int ObjID
        {
            get
            {
                return this._ObjID;
            }
            set
            {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }

        public string StorageID
        {
            get
            {
                return this._StorageID;
            }
            set
            {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }

        public string StoragePlaceID
        {
            get
            {
                return this._StoragePlaceID;
            }
            set
            {
                this.OnPropertyChanged("StoragePlaceID", this._StoragePlaceID, value);
                this._StoragePlaceID = value;
            }
        }

        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                this.OnPropertyChanged("Barcode", this._Barcode, value);
                this._Barcode = value;
            }
        }

        public string ShelfBarcode
        {
            get
            {
                return this._ShelfBarcode;
            }
            set
            {
                this.OnPropertyChanged("ShelfBarcode", this._ShelfBarcode, value);
                this._ShelfBarcode = value;
            }
        }

        public global::System.DateTime? PlanDate
        {
            get
            {
                return this._PlanDate;
            }
            set
            {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }

        public global::System.DateTime? RecordDate
        {
            get
            {
                return this._RecordDate;
            }
            set
            {
                this.OnPropertyChanged("RecordDate", this._RecordDate, value);
                this._RecordDate = value;
            }
        }

        public string ToStorageID
        {
            get
            {
                return this._ToStorageID;
            }
            set
            {
                this.OnPropertyChanged("ToStorageID", this._ToStorageID, value);
                this._ToStorageID = value;
            }
        }

        public string ToStoragePlaceID
        {
            get
            {
                return this._ToStoragePlaceID;
            }
            set
            {
                this.OnPropertyChanged("ToStoragePlaceID", this._ToStoragePlaceID, value);
                this._ToStoragePlaceID = value;
            }
        }

        public global::System.Decimal? AdjustWeight
        {
            get
            {
                return this._AdjustWeight;
            }
            set
            {
                this.OnPropertyChanged("AdjustWeight", this._AdjustWeight, value);
                this._AdjustWeight = value;
            }
        }

        public string OperPerson
        {
            get
            {
                return this._OperPerson;
            }
            set
            {
                this.OnPropertyChanged("OperPerson", this._OperPerson, value);
                this._OperPerson = value;
            }
        }

        public string DeleteFlag
        {
            get
            {
                return this._DeleteFlag;
            }
            set
            {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PpmRubberAdjust._PpmRubberAdjustEntityConfiguration == null))
            {
                PpmRubberAdjust._PpmRubberAdjustEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubberAdjust");
            }
            return PpmRubberAdjust._PpmRubberAdjustEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._ObjID,
                    this._StorageID,
                    this._StoragePlaceID,
                    this._Barcode,
                    this._ShelfBarcode,
                    this._PlanDate,
                    this._RecordDate,
                    this._ToStorageID,
                    this._ToStoragePlaceID,
                    this._AdjustWeight,
                    this._OperPerson,
                    this._DeleteFlag};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._StorageID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._StoragePlaceID = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._Barcode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._ShelfBarcode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._PlanDate = this.GetDateTime(reader, 5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._RecordDate = this.GetDateTime(reader, 6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._ToStorageID = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._ToStoragePlaceID = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._AdjustWeight = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._OperPerson = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._DeleteFlag = reader.GetString(11);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._StorageID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2)))
            {
                this._StoragePlaceID = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._Barcode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._ShelfBarcode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._PlanDate = this.GetDateTime(row, 5);
            }
            if ((false == row.IsNull(6)))
            {
                this._RecordDate = this.GetDateTime(row, 6);
            }
            if ((false == row.IsNull(7)))
            {
                this._ToStorageID = ((string)(row[7]));
            }
            if ((false == row.IsNull(8)))
            {
                this._ToStoragePlaceID = ((string)(row[8]));
            }
            if ((false == row.IsNull(9)))
            {
                this._AdjustWeight = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10)))
            {
                this._OperPerson = ((string)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._DeleteFlag = ((string)(row[11]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubberAdjust).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubberAdjust)(obj)).isAttached)
                        && (this.ObjID == ((global::Mesnac.Entity.PpmRubberAdjust)(obj)).ObjID));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _StoragePlaceID = new NBear.Common.PropertyItem("StoragePlaceID", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _Barcode = new NBear.Common.PropertyItem("Barcode", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _ShelfBarcode = new NBear.Common.PropertyItem("ShelfBarcode", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _RecordDate = new NBear.Common.PropertyItem("RecordDate", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _ToStorageID = new NBear.Common.PropertyItem("ToStorageID", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _ToStoragePlaceID = new NBear.Common.PropertyItem("ToStoragePlaceID", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _AdjustWeight = new NBear.Common.PropertyItem("AdjustWeight", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _OperPerson = new NBear.Common.PropertyItem("OperPerson", "Mesnac.Entity.PpmRubberAdjust");

            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PpmRubberAdjust");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem ObjID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ObjID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem StorageID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _StorageID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem StoragePlaceID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _StoragePlaceID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("StoragePlaceID", _StoragePlaceID.EntityConfiguration, _StoragePlaceID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Barcode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Barcode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Barcode", _Barcode.EntityConfiguration, _Barcode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ShelfBarcode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ShelfBarcode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ShelfBarcode", _ShelfBarcode.EntityConfiguration, _ShelfBarcode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem PlanDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _PlanDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem RecordDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _RecordDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("RecordDate", _RecordDate.EntityConfiguration, _RecordDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ToStorageID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ToStorageID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ToStorageID", _ToStorageID.EntityConfiguration, _ToStorageID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ToStoragePlaceID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ToStoragePlaceID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ToStoragePlaceID", _ToStoragePlaceID.EntityConfiguration, _ToStoragePlaceID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem AdjustWeight
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _AdjustWeight;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("AdjustWeight", _AdjustWeight.EntityConfiguration, _AdjustWeight.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem OperPerson
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _OperPerson;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("OperPerson", _OperPerson.EntityConfiguration, _OperPerson.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem DeleteFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _DeleteFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
