//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class QmtQrigImportLogMasterArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.QmtQrigImportLogMaster> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.QmtQrigImportLogMaster\" isReadOnly=\"false\" isAutoPreLoad=\"fa" +
        "lse\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"QmtQrigImportLogMaste" +
        "r\" batchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjId\" type=\"System.Int3" +
        "2\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"ObjId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryK" +
        "ey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"FileName\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"FileName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(20" +
        "0)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"SheetName\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"SheetName\" mappingColumnType=\"System.String\" sq" +
        "lType=\"nvarchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"FileContent\" type=\"System.Byte[]\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"FileContent\" mappingColumnT" +
        "ype=\"System.Byte[]\" sqlType=\"image\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"OperInfo\" type=\"System.String\" isInherited=\"false\" isReadOnly" +
        "=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=" +
        "\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndex" +
        "PropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"OperInfo\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"PlanDate\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P" +
        "lanDate\" mappingColumnType=\"System.String\" sqlType=\"char(10)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftClass\" type=\"System.Nullable`1" +
        "[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"ShiftClass\" mappingColumnType=\"System.Nullable`1[S" +
        "ystem.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prop" +
        "erty name=\"ClassName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ClassName\" mappingColum" +
        "nType=\"System.String\" sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"ShiftId\" type=\"System.Nullable`1[System.Int32]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ShiftId\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"" +
        "int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ShiftName\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"ShiftName\" mappingColumnType=\"System.String\" s" +
        "qlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"StandType\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"StandType\" " +
        "mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"" +
        "false\" isNotNull=\"false\" />\r\n    <Property name=\"TypeName\" type=\"System.String\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"TypeName\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(30)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"GUID\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"GUID\" mappingColumnType=\"System.String\" sqlType=\"nchar(" +
        "36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordTime\" " +
        "type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecordTime\" mappingColum" +
        "nType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"RecorderId\" type=\"System.String\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"RecorderId\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecorderName\" typ" +
        "e=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" " +
        "isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRel" +
        "ationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializa" +
        "tionIgnore=\"false\" mappingName=\"RecorderName\" mappingColumnType=\"System.String\" " +
        "sqlType=\"nvarchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"Flag\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"Flag\" mappingColumnType=\"System.S" +
        "tring\" sqlType=\"varchar(4)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Prope" +
        "rties>\r\n</EntityConfiguration>")]
    public partial class QmtQrigImportLogMaster : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _QmtQrigImportLogMasterEntityConfiguration;
        
        protected int _ObjId;
        
        protected string _FileName;
        
        protected string _SheetName;
        
        protected byte[] _FileContent;
        
        protected string _OperInfo;
        
        protected string _PlanDate;
        
        protected global::System.Int32? _ShiftClass;
        
        protected string _ClassName;
        
        protected global::System.Int32? _ShiftId;
        
        protected string _ShiftName;
        
        protected global::System.Int32? _StandType;
        
        protected string _TypeName;
        
        protected string _GUID;
        
        protected global::System.DateTime? _RecordTime;
        
        protected string _RecorderId;
        
        protected string _RecorderName;
        
        protected string _Flag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.QmtQrigImportLogMaster left, global::Mesnac.Entity.QmtQrigImportLogMaster right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.QmtQrigImportLogMaster left, global::Mesnac.Entity.QmtQrigImportLogMaster right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjId {
            get {
                return this._ObjId;
            }
            set {
                this.OnPropertyChanged("ObjId", this._ObjId, value);
                this._ObjId = value;
            }
        }
        
        public string FileName {
            get {
                return this._FileName;
            }
            set {
                this.OnPropertyChanged("FileName", this._FileName, value);
                this._FileName = value;
            }
        }
        
        public string SheetName {
            get {
                return this._SheetName;
            }
            set {
                this.OnPropertyChanged("SheetName", this._SheetName, value);
                this._SheetName = value;
            }
        }
        
        public byte[] FileContent {
            get {
                return this._FileContent;
            }
            set {
                this.OnPropertyChanged("FileContent", this._FileContent, value);
                this._FileContent = value;
            }
        }
        
        public string OperInfo {
            get {
                return this._OperInfo;
            }
            set {
                this.OnPropertyChanged("OperInfo", this._OperInfo, value);
                this._OperInfo = value;
            }
        }
        
        public string PlanDate {
            get {
                return this._PlanDate;
            }
            set {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }
        
        public global::System.Int32? ShiftClass {
            get {
                return this._ShiftClass;
            }
            set {
                this.OnPropertyChanged("ShiftClass", this._ShiftClass, value);
                this._ShiftClass = value;
            }
        }
        
        public string ClassName {
            get {
                return this._ClassName;
            }
            set {
                this.OnPropertyChanged("ClassName", this._ClassName, value);
                this._ClassName = value;
            }
        }
        
        public global::System.Int32? ShiftId {
            get {
                return this._ShiftId;
            }
            set {
                this.OnPropertyChanged("ShiftId", this._ShiftId, value);
                this._ShiftId = value;
            }
        }
        
        public string ShiftName {
            get {
                return this._ShiftName;
            }
            set {
                this.OnPropertyChanged("ShiftName", this._ShiftName, value);
                this._ShiftName = value;
            }
        }
        
        public global::System.Int32? StandType {
            get {
                return this._StandType;
            }
            set {
                this.OnPropertyChanged("StandType", this._StandType, value);
                this._StandType = value;
            }
        }
        
        public string TypeName {
            get {
                return this._TypeName;
            }
            set {
                this.OnPropertyChanged("TypeName", this._TypeName, value);
                this._TypeName = value;
            }
        }
        
        public string GUID {
            get {
                return this._GUID;
            }
            set {
                this.OnPropertyChanged("GUID", this._GUID, value);
                this._GUID = value;
            }
        }
        
        public global::System.DateTime? RecordTime {
            get {
                return this._RecordTime;
            }
            set {
                this.OnPropertyChanged("RecordTime", this._RecordTime, value);
                this._RecordTime = value;
            }
        }
        
        public string RecorderId {
            get {
                return this._RecorderId;
            }
            set {
                this.OnPropertyChanged("RecorderId", this._RecorderId, value);
                this._RecorderId = value;
            }
        }
        
        public string RecorderName {
            get {
                return this._RecorderName;
            }
            set {
                this.OnPropertyChanged("RecorderName", this._RecorderName, value);
                this._RecorderName = value;
            }
        }
        
        public string Flag {
            get {
                return this._Flag;
            }
            set {
                this.OnPropertyChanged("Flag", this._Flag, value);
                this._Flag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((QmtQrigImportLogMaster._QmtQrigImportLogMasterEntityConfiguration == null)) {
                QmtQrigImportLogMaster._QmtQrigImportLogMasterEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.QmtQrigImportLogMaster");
            }
            return QmtQrigImportLogMaster._QmtQrigImportLogMasterEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjId,
                    this._FileName,
                    this._SheetName,
                    this._FileContent,
                    this._OperInfo,
                    this._PlanDate,
                    this._ShiftClass,
                    this._ClassName,
                    this._ShiftId,
                    this._ShiftName,
                    this._StandType,
                    this._TypeName,
                    this._GUID,
                    this._RecordTime,
                    this._RecorderId,
                    this._RecorderName,
                    this._Flag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjId = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._FileName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._SheetName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._FileContent = ((byte[])(reader.GetValue(3)));
            }
            if ((false == reader.IsDBNull(4))) {
                this._OperInfo = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._PlanDate = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ShiftClass = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._ClassName = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._ShiftId = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._ShiftName = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._StandType = reader.GetInt32(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._TypeName = reader.GetString(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._GUID = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._RecordTime = this.GetDateTime(reader, 13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._RecorderId = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._RecorderName = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._Flag = reader.GetString(16);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjId = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._FileName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._SheetName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._FileContent = ((byte[])(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._OperInfo = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._PlanDate = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._ShiftClass = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._ClassName = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._ShiftId = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._ShiftName = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._StandType = ((System.Nullable<int>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._TypeName = ((string)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._GUID = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._RecordTime = this.GetDateTime(row, 13);
            }
            if ((false == row.IsNull(14))) {
                this._RecorderId = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._RecorderName = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._Flag = ((string)(row[16]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.QmtQrigImportLogMaster).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.QmtQrigImportLogMaster)(obj)).isAttached) 
                        && (this.ObjId == ((global::Mesnac.Entity.QmtQrigImportLogMaster)(obj)).ObjId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjId = new NBear.Common.PropertyItem("ObjId", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _FileName = new NBear.Common.PropertyItem("FileName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _SheetName = new NBear.Common.PropertyItem("SheetName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _FileContent = new NBear.Common.PropertyItem("FileContent", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _OperInfo = new NBear.Common.PropertyItem("OperInfo", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _ShiftClass = new NBear.Common.PropertyItem("ShiftClass", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _ClassName = new NBear.Common.PropertyItem("ClassName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _ShiftId = new NBear.Common.PropertyItem("ShiftId", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _ShiftName = new NBear.Common.PropertyItem("ShiftName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _StandType = new NBear.Common.PropertyItem("StandType", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _TypeName = new NBear.Common.PropertyItem("TypeName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _GUID = new NBear.Common.PropertyItem("GUID", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _RecordTime = new NBear.Common.PropertyItem("RecordTime", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _RecorderId = new NBear.Common.PropertyItem("RecorderId", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _RecorderName = new NBear.Common.PropertyItem("RecorderName", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            protected NBear.Common.PropertyItem _Flag = new NBear.Common.PropertyItem("Flag", "Mesnac.Entity.QmtQrigImportLogMaster");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjId {
                get {
                    if ((aliasName == null)) {
                        return _ObjId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjId", _ObjId.EntityConfiguration, _ObjId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FileName {
                get {
                    if ((aliasName == null)) {
                        return _FileName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FileName", _FileName.EntityConfiguration, _FileName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SheetName {
                get {
                    if ((aliasName == null)) {
                        return _SheetName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SheetName", _SheetName.EntityConfiguration, _SheetName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FileContent {
                get {
                    if ((aliasName == null)) {
                        return _FileContent;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FileContent", _FileContent.EntityConfiguration, _FileContent.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OperInfo {
                get {
                    if ((aliasName == null)) {
                        return _OperInfo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OperInfo", _OperInfo.EntityConfiguration, _OperInfo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftClass {
                get {
                    if ((aliasName == null)) {
                        return _ShiftClass;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftClass", _ShiftClass.EntityConfiguration, _ShiftClass.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ClassName {
                get {
                    if ((aliasName == null)) {
                        return _ClassName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ClassName", _ClassName.EntityConfiguration, _ClassName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftId {
                get {
                    if ((aliasName == null)) {
                        return _ShiftId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftId", _ShiftId.EntityConfiguration, _ShiftId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ShiftName {
                get {
                    if ((aliasName == null)) {
                        return _ShiftName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ShiftName", _ShiftName.EntityConfiguration, _ShiftName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StandType {
                get {
                    if ((aliasName == null)) {
                        return _StandType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StandType", _StandType.EntityConfiguration, _StandType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TypeName {
                get {
                    if ((aliasName == null)) {
                        return _TypeName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TypeName", _TypeName.EntityConfiguration, _TypeName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem GUID {
                get {
                    if ((aliasName == null)) {
                        return _GUID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("GUID", _GUID.EntityConfiguration, _GUID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordTime {
                get {
                    if ((aliasName == null)) {
                        return _RecordTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordTime", _RecordTime.EntityConfiguration, _RecordTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecorderId {
                get {
                    if ((aliasName == null)) {
                        return _RecorderId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecorderId", _RecorderId.EntityConfiguration, _RecorderId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecorderName {
                get {
                    if ((aliasName == null)) {
                        return _RecorderName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecorderName", _RecorderName.EntityConfiguration, _RecorderName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Flag {
                get {
                    if ((aliasName == null)) {
                        return _Flag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Flag", _Flag.EntityConfiguration, _Flag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
