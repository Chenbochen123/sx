//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PpmRubberJZByShiftArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubberJZByShift>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmRubberJZByShift\" isReadOnly=\"false\" isAutoPreLoad=\"false\"" +
        " isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubberJZByShift\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"FID\" type=\"System.Int64\" isInher" +
        "ited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuer" +
        "y=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPr" +
        "operty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapping" +
        "Name=\"FID\" mappingColumnType=\"System.Int64\" sqlType=\"bigint\" isPrimaryKey=\"true\"" +
        " isNotNull=\"true\" />\r\n    <Property name=\"PlanDate\" type=\"System.Nullable`1[Syst" +
        "em.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCo" +
        "ntained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelatio" +
        "nKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerialization" +
        "Ignore=\"false\" mappingName=\"PlanDate\" mappingColumnType=\"System.Nullable`1[Syste" +
        "m.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"ShiftID\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"fal" +
        "se\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fals" +
        "e\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPrope" +
        "rtyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ShiftID\" mappingColum" +
        "nType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"WorkShopCode\" type=\"System.Nullable`1[System.Int32]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"WorkShopCode\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlT" +
        "ype=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MaterCo" +
        "de\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"" +
        "false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false" +
        "\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSe" +
        "rializationIgnore=\"false\" mappingName=\"MaterCode\" mappingColumnType=\"System.Stri" +
        "ng\" sqlType=\"nvarchar(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"RubCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" i" +
        "sCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" is" +
        "LazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDe" +
        "sc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RubCode\" mappingColumnType" +
        "=\"System.String\" sqlType=\"nvarchar(10)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"MaterType\" type=\"System.String\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MaterType\" " +
        "mappingColumnType=\"System.String\" sqlType=\"nvarchar(10)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"LastJZ\" type=\"System.Nullable`1[System.D" +
        "ecimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"LastJZ\" mappingColumnType=\"System.Nullable`1[System.Decim" +
        "al]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"CurrentOut\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" i" +
        "sReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isF" +
        "riendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false" +
        "\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Current" +
        "Out\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CurrentIn\" type=\"Sys" +
        "tem.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"CurrentIn\" mappingColumnType=\"Syst" +
        "em.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"CurrentFP\" type=\"System.Nullable`1[System.Decima" +
        "l]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"CurrentFP\" mappingColumnType=\"System.Nullable`1[System.Decimal" +
        "]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"CurrentCL\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isRe" +
        "adOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrie" +
        "ndKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" i" +
        "sIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CurrentCL\"" +
        " mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CurrentXH\" type=\"System." +
        "Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"CurrentXH\" mappingColumnType=\"System.N" +
        "ullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"CurrentTZ\" type=\"System.Nullable`1[System.Decimal]\" " +
        "isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"CurrentTZ\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" s" +
        "qlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "CurrentJZ\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CurrentJZ\" map" +
        "pingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PpmRubberJZByShift : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PpmRubberJZByShiftEntityConfiguration;

        protected long _FID;

        protected global::System.DateTime? _PlanDate;

        protected string _ShiftID;

        protected global::System.Int32? _WorkShopCode;

        protected string _MaterCode;

        protected string _RubCode;

        protected string _MaterType;

        protected global::System.Decimal? _LastJZ;

        protected global::System.Decimal? _CurrentOut;

        protected global::System.Decimal? _CurrentIn;

        protected global::System.Decimal? _CurrentFP;

        protected global::System.Decimal? _CurrentCL;

        protected global::System.Decimal? _CurrentXH;

        protected global::System.Decimal? _CurrentTZ;

        protected global::System.Decimal? _CurrentJZ;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PpmRubberJZByShift left, global::Mesnac.Entity.PpmRubberJZByShift right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PpmRubberJZByShift left, global::Mesnac.Entity.PpmRubberJZByShift right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public long FID
        {
            get
            {
                return this._FID;
            }
            set
            {
                this.OnPropertyChanged("FID", this._FID, value);
                this._FID = value;
            }
        }

        public global::System.DateTime? PlanDate
        {
            get
            {
                return this._PlanDate;
            }
            set
            {
                this.OnPropertyChanged("PlanDate", this._PlanDate, value);
                this._PlanDate = value;
            }
        }

        public string ShiftID
        {
            get
            {
                return this._ShiftID;
            }
            set
            {
                this.OnPropertyChanged("ShiftID", this._ShiftID, value);
                this._ShiftID = value;
            }
        }

        public global::System.Int32? WorkShopCode
        {
            get
            {
                return this._WorkShopCode;
            }
            set
            {
                this.OnPropertyChanged("WorkShopCode", this._WorkShopCode, value);
                this._WorkShopCode = value;
            }
        }

        public string MaterCode
        {
            get
            {
                return this._MaterCode;
            }
            set
            {
                this.OnPropertyChanged("MaterCode", this._MaterCode, value);
                this._MaterCode = value;
            }
        }

        public string RubCode
        {
            get
            {
                return this._RubCode;
            }
            set
            {
                this.OnPropertyChanged("RubCode", this._RubCode, value);
                this._RubCode = value;
            }
        }

        public string MaterType
        {
            get
            {
                return this._MaterType;
            }
            set
            {
                this.OnPropertyChanged("MaterType", this._MaterType, value);
                this._MaterType = value;
            }
        }

        public global::System.Decimal? LastJZ
        {
            get
            {
                return this._LastJZ;
            }
            set
            {
                this.OnPropertyChanged("LastJZ", this._LastJZ, value);
                this._LastJZ = value;
            }
        }

        public global::System.Decimal? CurrentOut
        {
            get
            {
                return this._CurrentOut;
            }
            set
            {
                this.OnPropertyChanged("CurrentOut", this._CurrentOut, value);
                this._CurrentOut = value;
            }
        }

        public global::System.Decimal? CurrentIn
        {
            get
            {
                return this._CurrentIn;
            }
            set
            {
                this.OnPropertyChanged("CurrentIn", this._CurrentIn, value);
                this._CurrentIn = value;
            }
        }

        public global::System.Decimal? CurrentFP
        {
            get
            {
                return this._CurrentFP;
            }
            set
            {
                this.OnPropertyChanged("CurrentFP", this._CurrentFP, value);
                this._CurrentFP = value;
            }
        }

        public global::System.Decimal? CurrentCL
        {
            get
            {
                return this._CurrentCL;
            }
            set
            {
                this.OnPropertyChanged("CurrentCL", this._CurrentCL, value);
                this._CurrentCL = value;
            }
        }

        public global::System.Decimal? CurrentXH
        {
            get
            {
                return this._CurrentXH;
            }
            set
            {
                this.OnPropertyChanged("CurrentXH", this._CurrentXH, value);
                this._CurrentXH = value;
            }
        }

        public global::System.Decimal? CurrentTZ
        {
            get
            {
                return this._CurrentTZ;
            }
            set
            {
                this.OnPropertyChanged("CurrentTZ", this._CurrentTZ, value);
                this._CurrentTZ = value;
            }
        }

        public global::System.Decimal? CurrentJZ
        {
            get
            {
                return this._CurrentJZ;
            }
            set
            {
                this.OnPropertyChanged("CurrentJZ", this._CurrentJZ, value);
                this._CurrentJZ = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PpmRubberJZByShift._PpmRubberJZByShiftEntityConfiguration == null))
            {
                PpmRubberJZByShift._PpmRubberJZByShiftEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubberJZByShift");
            }
            return PpmRubberJZByShift._PpmRubberJZByShiftEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._FID,
                    this._PlanDate,
                    this._ShiftID,
                    this._WorkShopCode,
                    this._MaterCode,
                    this._RubCode,
                    this._MaterType,
                    this._LastJZ,
                    this._CurrentOut,
                    this._CurrentIn,
                    this._CurrentFP,
                    this._CurrentCL,
                    this._CurrentXH,
                    this._CurrentTZ,
                    this._CurrentJZ};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._FID = reader.GetInt64(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._PlanDate = this.GetDateTime(reader, 1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._ShiftID = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._WorkShopCode = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._MaterCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._RubCode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._MaterType = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._LastJZ = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._CurrentOut = reader.GetDecimal(8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._CurrentIn = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._CurrentFP = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._CurrentCL = reader.GetDecimal(11);
            }
            if ((false == reader.IsDBNull(12)))
            {
                this._CurrentXH = reader.GetDecimal(12);
            }
            if ((false == reader.IsDBNull(13)))
            {
                this._CurrentTZ = reader.GetDecimal(13);
            }
            if ((false == reader.IsDBNull(14)))
            {
                this._CurrentJZ = reader.GetDecimal(14);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._FID = ((long)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._PlanDate = this.GetDateTime(row, 1);
            }
            if ((false == row.IsNull(2)))
            {
                this._ShiftID = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._WorkShopCode = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4)))
            {
                this._MaterCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._RubCode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6)))
            {
                this._MaterType = ((string)(row[6]));
            }
            if ((false == row.IsNull(7)))
            {
                this._LastJZ = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8)))
            {
                this._CurrentOut = ((System.Nullable<decimal>)(row[8]));
            }
            if ((false == row.IsNull(9)))
            {
                this._CurrentIn = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10)))
            {
                this._CurrentFP = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._CurrentCL = ((System.Nullable<decimal>)(row[11]));
            }
            if ((false == row.IsNull(12)))
            {
                this._CurrentXH = ((System.Nullable<decimal>)(row[12]));
            }
            if ((false == row.IsNull(13)))
            {
                this._CurrentTZ = ((System.Nullable<decimal>)(row[13]));
            }
            if ((false == row.IsNull(14)))
            {
                this._CurrentJZ = ((System.Nullable<decimal>)(row[14]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubberJZByShift).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubberJZByShift)(obj)).isAttached)
                        && (this.FID == ((global::Mesnac.Entity.PpmRubberJZByShift)(obj)).FID));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _FID = new NBear.Common.PropertyItem("FID", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _PlanDate = new NBear.Common.PropertyItem("PlanDate", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _ShiftID = new NBear.Common.PropertyItem("ShiftID", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _WorkShopCode = new NBear.Common.PropertyItem("WorkShopCode", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _MaterCode = new NBear.Common.PropertyItem("MaterCode", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _RubCode = new NBear.Common.PropertyItem("RubCode", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _MaterType = new NBear.Common.PropertyItem("MaterType", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _LastJZ = new NBear.Common.PropertyItem("LastJZ", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentOut = new NBear.Common.PropertyItem("CurrentOut", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentIn = new NBear.Common.PropertyItem("CurrentIn", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentFP = new NBear.Common.PropertyItem("CurrentFP", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentCL = new NBear.Common.PropertyItem("CurrentCL", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentXH = new NBear.Common.PropertyItem("CurrentXH", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentTZ = new NBear.Common.PropertyItem("CurrentTZ", "Mesnac.Entity.PpmRubberJZByShift");

            protected NBear.Common.PropertyItem _CurrentJZ = new NBear.Common.PropertyItem("CurrentJZ", "Mesnac.Entity.PpmRubberJZByShift");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem FID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _FID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("FID", _FID.EntityConfiguration, _FID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem PlanDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _PlanDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("PlanDate", _PlanDate.EntityConfiguration, _PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ShiftID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ShiftID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ShiftID", _ShiftID.EntityConfiguration, _ShiftID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem WorkShopCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _WorkShopCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("WorkShopCode", _WorkShopCode.EntityConfiguration, _WorkShopCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem MaterCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _MaterCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("MaterCode", _MaterCode.EntityConfiguration, _MaterCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem RubCode
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _RubCode;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("RubCode", _RubCode.EntityConfiguration, _RubCode.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem MaterType
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _MaterType;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("MaterType", _MaterType.EntityConfiguration, _MaterType.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem LastJZ
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _LastJZ;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("LastJZ", _LastJZ.EntityConfiguration, _LastJZ.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentOut
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentOut;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentOut", _CurrentOut.EntityConfiguration, _CurrentOut.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentIn
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentIn;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentIn", _CurrentIn.EntityConfiguration, _CurrentIn.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentFP
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentFP;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentFP", _CurrentFP.EntityConfiguration, _CurrentFP.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentCL
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentCL;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentCL", _CurrentCL.EntityConfiguration, _CurrentCL.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentXH
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentXH;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentXH", _CurrentXH.EntityConfiguration, _CurrentXH.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentTZ
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentTZ;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentTZ", _CurrentTZ.EntityConfiguration, _CurrentTZ.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem CurrentJZ
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _CurrentJZ;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("CurrentJZ", _CurrentJZ.EntityConfiguration, _CurrentJZ.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
