//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PpmRubberInventoryArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PpmRubberInventory> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PpmRubberInventory\" isReadOnly=\"false\" isAutoPreLoad=\"false\"" +
        " isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PpmRubberInventory\" batch" +
        "Size=\"10\">\r\n  <Properties>\r\n    <Property name=\"BillNo\" type=\"System.String\" isI" +
        "nherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" i" +
        "sQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIn" +
        "dexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" ma" +
        "ppingName=\"BillNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPr" +
        "imaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"StorageID\" type=\"System" +
        ".String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"StorageID\" mappingColumnType=\"System.String\" sqlType=\"nva" +
        "rchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Invent" +
        "oryType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"InventoryType\" mappingColumnType=\"Sy" +
        "stem.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"InventoryDate\" type=\"System.Nullable`1[System.DateTime]\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"InventoryDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlTy" +
        "pe=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Ina" +
        "ccountDuration\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"InaccountDuration\" mappingCol" +
        "umnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"f" +
        "alse\" />\r\n    <Property name=\"MakerPerson\" type=\"System.String\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Ma" +
        "kerPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey" +
        "=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkPerson\" type=\"System.Strin" +
        "g\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fa" +
        "lse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false" +
        "\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fal" +
        "se\" mappingName=\"ChkPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(" +
        "36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkDate\" typ" +
        "e=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" is" +
        "CompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isL" +
        "azyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDes" +
        "c=\"false\" isSerializationIgnore=\"false\" mappingName=\"ChkDate\" mappingColumnType=" +
        "\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isN" +
        "otNull=\"false\" />\r\n    <Property name=\"ChkResultFlag\" type=\"System.String\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"ChkResultFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPr" +
        "imaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordDate\" type=\"Sys" +
        "tem.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"RecordDate\" mappingColumnType=\"Sy" +
        "stem.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"R" +
        "emark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class PpmRubberInventory : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PpmRubberInventoryEntityConfiguration;
        
        protected string _BillNo;
        
        protected string _StorageID;
        
        protected string _InventoryType;
        
        protected global::System.DateTime? _InventoryDate;
        
        protected string _InaccountDuration;
        
        protected string _MakerPerson;
        
        protected string _ChkPerson;
        
        protected global::System.DateTime? _ChkDate;
        
        protected string _ChkResultFlag;
        
        protected global::System.DateTime? _RecordDate;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PpmRubberInventory left, global::Mesnac.Entity.PpmRubberInventory right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PpmRubberInventory left, global::Mesnac.Entity.PpmRubberInventory right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string BillNo {
            get {
                return this._BillNo;
            }
            set {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }
        
        public string StorageID {
            get {
                return this._StorageID;
            }
            set {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }
        
        public string InventoryType {
            get {
                return this._InventoryType;
            }
            set {
                this.OnPropertyChanged("InventoryType", this._InventoryType, value);
                this._InventoryType = value;
            }
        }
        
        public global::System.DateTime? InventoryDate {
            get {
                return this._InventoryDate;
            }
            set {
                this.OnPropertyChanged("InventoryDate", this._InventoryDate, value);
                this._InventoryDate = value;
            }
        }
        
        public string InaccountDuration {
            get {
                return this._InaccountDuration;
            }
            set {
                this.OnPropertyChanged("InaccountDuration", this._InaccountDuration, value);
                this._InaccountDuration = value;
            }
        }
        
        public string MakerPerson {
            get {
                return this._MakerPerson;
            }
            set {
                this.OnPropertyChanged("MakerPerson", this._MakerPerson, value);
                this._MakerPerson = value;
            }
        }
        
        public string ChkPerson {
            get {
                return this._ChkPerson;
            }
            set {
                this.OnPropertyChanged("ChkPerson", this._ChkPerson, value);
                this._ChkPerson = value;
            }
        }
        
        public global::System.DateTime? ChkDate {
            get {
                return this._ChkDate;
            }
            set {
                this.OnPropertyChanged("ChkDate", this._ChkDate, value);
                this._ChkDate = value;
            }
        }
        
        public string ChkResultFlag {
            get {
                return this._ChkResultFlag;
            }
            set {
                this.OnPropertyChanged("ChkResultFlag", this._ChkResultFlag, value);
                this._ChkResultFlag = value;
            }
        }
        
        public global::System.DateTime? RecordDate {
            get {
                return this._RecordDate;
            }
            set {
                this.OnPropertyChanged("RecordDate", this._RecordDate, value);
                this._RecordDate = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PpmRubberInventory._PpmRubberInventoryEntityConfiguration == null)) {
                PpmRubberInventory._PpmRubberInventoryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PpmRubberInventory");
            }
            return PpmRubberInventory._PpmRubberInventoryEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._BillNo,
                    this._StorageID,
                    this._InventoryType,
                    this._InventoryDate,
                    this._InaccountDuration,
                    this._MakerPerson,
                    this._ChkPerson,
                    this._ChkDate,
                    this._ChkResultFlag,
                    this._RecordDate,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._BillNo = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._StorageID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._InventoryType = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._InventoryDate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._InaccountDuration = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._MakerPerson = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._ChkPerson = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._ChkDate = this.GetDateTime(reader, 7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._ChkResultFlag = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._RecordDate = this.GetDateTime(reader, 9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._Remark = reader.GetString(10);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._BillNo = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._StorageID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._InventoryType = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._InventoryDate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4))) {
                this._InaccountDuration = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._MakerPerson = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._ChkPerson = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._ChkDate = this.GetDateTime(row, 7);
            }
            if ((false == row.IsNull(8))) {
                this._ChkResultFlag = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._RecordDate = this.GetDateTime(row, 9);
            }
            if ((false == row.IsNull(10))) {
                this._Remark = ((string)(row[10]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PpmRubberInventory).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PpmRubberInventory)(obj)).isAttached) 
                        && (this.BillNo == ((global::Mesnac.Entity.PpmRubberInventory)(obj)).BillNo));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _InventoryType = new NBear.Common.PropertyItem("InventoryType", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _InventoryDate = new NBear.Common.PropertyItem("InventoryDate", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _InaccountDuration = new NBear.Common.PropertyItem("InaccountDuration", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _MakerPerson = new NBear.Common.PropertyItem("MakerPerson", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _ChkPerson = new NBear.Common.PropertyItem("ChkPerson", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _ChkDate = new NBear.Common.PropertyItem("ChkDate", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _ChkResultFlag = new NBear.Common.PropertyItem("ChkResultFlag", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _RecordDate = new NBear.Common.PropertyItem("RecordDate", "Mesnac.Entity.PpmRubberInventory");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PpmRubberInventory");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem BillNo {
                get {
                    if ((aliasName == null)) {
                        return _BillNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StorageID {
                get {
                    if ((aliasName == null)) {
                        return _StorageID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InventoryType {
                get {
                    if ((aliasName == null)) {
                        return _InventoryType;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InventoryType", _InventoryType.EntityConfiguration, _InventoryType.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InventoryDate {
                get {
                    if ((aliasName == null)) {
                        return _InventoryDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InventoryDate", _InventoryDate.EntityConfiguration, _InventoryDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem InaccountDuration {
                get {
                    if ((aliasName == null)) {
                        return _InaccountDuration;
                    }
                    else {
                        return new NBear.Common.PropertyItem("InaccountDuration", _InaccountDuration.EntityConfiguration, _InaccountDuration.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MakerPerson {
                get {
                    if ((aliasName == null)) {
                        return _MakerPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MakerPerson", _MakerPerson.EntityConfiguration, _MakerPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkPerson {
                get {
                    if ((aliasName == null)) {
                        return _ChkPerson;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkPerson", _ChkPerson.EntityConfiguration, _ChkPerson.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkDate {
                get {
                    if ((aliasName == null)) {
                        return _ChkDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkDate", _ChkDate.EntityConfiguration, _ChkDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ChkResultFlag {
                get {
                    if ((aliasName == null)) {
                        return _ChkResultFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ChkResultFlag", _ChkResultFlag.EntityConfiguration, _ChkResultFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecordDate {
                get {
                    if ((aliasName == null)) {
                        return _RecordDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecordDate", _RecordDate.EntityConfiguration, _RecordDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
