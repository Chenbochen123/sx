//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_lvdaiPlanArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_lvdaiPlan> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_lvdaiPlan\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBa" +
        "tchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_lvdaiPlan\" batchSize=\"10\">" +
        "\r\n  <Properties>\r\n    <Property name=\"Planid\" type=\"System.Int32\" isInherited=\"f" +
        "alse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"fals" +
        "e\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=" +
        "\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P" +
        "lanid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotN" +
        "ull=\"true\" />\r\n    <Property name=\"INo\" type=\"System.Nullable`1[System.Int32]\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"INo\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"i" +
        "nt\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"EquipName\" ty" +
        "pe=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\"" +
        " isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRe" +
        "lationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializ" +
        "ationIgnore=\"false\" mappingName=\"EquipName\" mappingColumnType=\"System.String\" sq" +
        "lType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property nam" +
        "e=\"Plandate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Plandate\" m" +
        "appingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrima" +
        "ryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Realdate\" type=\"System.N" +
        "ullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUni" +
        "t=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"fa" +
        "lse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" i" +
        "sSerializationIgnore=\"false\" mappingName=\"Realdate\" mappingColumnType=\"System.Nu" +
        "llable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"UserName\" type=\"System.String\" isInherited=\"false\" " +
        "sqlDefaultValue=\"\'\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"UserName\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\"" +
        " isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Plan_state\" type" +
        "=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"Plan_state\" mappingColumnType=\"" +
        "System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"f" +
        "alse\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" s" +
        "qlDefaultValue=\"\'\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false" +
        "\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" i" +
        "sIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\"" +
        " mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"varchar(50)\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>" +
        "")]
    public partial class Eqm_lvdaiPlan : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_lvdaiPlanEntityConfiguration;
        
        protected int _Planid;
        
        protected global::System.Int32? _INo;
        
        protected string _EquipName;
        
        protected global::System.DateTime? _Plandate;
        
        protected global::System.DateTime? _Realdate;
        
        protected string _UserName;
        
        protected global::System.Int32? _Plan_state;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_lvdaiPlan left, global::Mesnac.Entity.Eqm_lvdaiPlan right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_lvdaiPlan left, global::Mesnac.Entity.Eqm_lvdaiPlan right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Planid {
            get {
                return this._Planid;
            }
            set {
                this.OnPropertyChanged("Planid", this._Planid, value);
                this._Planid = value;
            }
        }
        
        public global::System.Int32? INo {
            get {
                return this._INo;
            }
            set {
                this.OnPropertyChanged("INo", this._INo, value);
                this._INo = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public global::System.DateTime? Plandate {
            get {
                return this._Plandate;
            }
            set {
                this.OnPropertyChanged("Plandate", this._Plandate, value);
                this._Plandate = value;
            }
        }
        
        public global::System.DateTime? Realdate {
            get {
                return this._Realdate;
            }
            set {
                this.OnPropertyChanged("Realdate", this._Realdate, value);
                this._Realdate = value;
            }
        }
        
        public string UserName {
            get {
                return this._UserName;
            }
            set {
                this.OnPropertyChanged("UserName", this._UserName, value);
                this._UserName = value;
            }
        }
        
        public global::System.Int32? Plan_state {
            get {
                return this._Plan_state;
            }
            set {
                this.OnPropertyChanged("Plan_state", this._Plan_state, value);
                this._Plan_state = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_lvdaiPlan._Eqm_lvdaiPlanEntityConfiguration == null)) {
                Eqm_lvdaiPlan._Eqm_lvdaiPlanEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_lvdaiPlan");
            }
            return Eqm_lvdaiPlan._Eqm_lvdaiPlanEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Planid,
                    this._INo,
                    this._EquipName,
                    this._Plandate,
                    this._Realdate,
                    this._UserName,
                    this._Plan_state,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Planid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._INo = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._EquipName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Plandate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._Realdate = this.GetDateTime(reader, 4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._UserName = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Plan_state = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Remark = reader.GetString(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Planid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._INo = ((System.Nullable<int>)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._EquipName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Plandate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4))) {
                this._Realdate = this.GetDateTime(row, 4);
            }
            if ((false == row.IsNull(5))) {
                this._UserName = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Plan_state = ((System.Nullable<int>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Remark = ((string)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_lvdaiPlan).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_lvdaiPlan)(obj)).isAttached) 
                        && (this.Planid == ((global::Mesnac.Entity.Eqm_lvdaiPlan)(obj)).Planid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Planid = new NBear.Common.PropertyItem("Planid", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _INo = new NBear.Common.PropertyItem("INo", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _Plandate = new NBear.Common.PropertyItem("Plandate", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _Realdate = new NBear.Common.PropertyItem("Realdate", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _UserName = new NBear.Common.PropertyItem("UserName", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _Plan_state = new NBear.Common.PropertyItem("Plan_state", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.Eqm_lvdaiPlan");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Planid {
                get {
                    if ((aliasName == null)) {
                        return _Planid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Planid", _Planid.EntityConfiguration, _Planid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem INo {
                get {
                    if ((aliasName == null)) {
                        return _INo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("INo", _INo.EntityConfiguration, _INo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Plandate {
                get {
                    if ((aliasName == null)) {
                        return _Plandate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plandate", _Plandate.EntityConfiguration, _Plandate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Realdate {
                get {
                    if ((aliasName == null)) {
                        return _Realdate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Realdate", _Realdate.EntityConfiguration, _Realdate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem UserName {
                get {
                    if ((aliasName == null)) {
                        return _UserName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("UserName", _UserName.EntityConfiguration, _UserName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Plan_state {
                get {
                    if ((aliasName == null)) {
                        return _Plan_state;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plan_state", _Plan_state.EntityConfiguration, _Plan_state.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
