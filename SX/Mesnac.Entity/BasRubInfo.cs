//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasRubInfoArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasRubInfo> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasRubInfo\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatchU" +
        "pdate=\"false\" isRelation=\"false\" mappingName=\"BasRubInfo\" batchSize=\"10\">\r\n  <Pr" +
        "operties>\r\n    <Property name=\"ObjID\" type=\"System.Nullable`1[System.Int32]\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"in" +
        "t\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RubCode\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isC" +
        "ontained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelati" +
        "onKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializatio" +
        "nIgnore=\"false\" mappingName=\"RubCode\" mappingColumnType=\"System.String\" sqlType=" +
        "\"char(3)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RubName" +
        "\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"fal" +
        "se\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" i" +
        "sRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeria" +
        "lizationIgnore=\"false\" mappingName=\"RubName\" mappingColumnType=\"System.String\" s" +
        "qlType=\"varchar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property na" +
        "me=\"RubOtherName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"RubOtherName\" mappingColumnT" +
        "ype=\"System.String\" sqlType=\"varchar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"RubTypeCode\" type=\"System.String\" isInherited=\"false\" i" +
        "sReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFr" +
        "iendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\"" +
        " isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RubTypeC" +
        "ode\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"TyrePartID\" type=\"System.Nullable`1[Syst" +
        "em.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"TyrePartID\" mappingColumnType=\"System.Nullable`1[System." +
        "Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"RubPurpose\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"RubPurpose\" mappingColumnType" +
        "=\"System.String\" sqlType=\"varchar(30)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"RubRate\" type=\"System.Nullable`1[System.Int32]\" isInherite" +
        "d=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"RubRate\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" is" +
        "PrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"FactoryID\" type=\"Sy" +
        "stem.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundU" +
        "nit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"" +
        "false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\"" +
        " isSerializationIgnore=\"false\" mappingName=\"FactoryID\" mappingColumnType=\"System" +
        ".Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" " +
        "/>\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited=\"false\" isReadO" +
        "nly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Remark\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"De" +
        "leteFlag\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasRubInfo : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasRubInfoEntityConfiguration;
        
        protected global::System.Int32? _ObjID;
        
        protected string _RubCode;
        
        protected string _RubName;
        
        protected string _RubOtherName;
        
        protected string _RubTypeCode;
        
        protected global::System.Int32? _TyrePartID;
        
        protected string _RubPurpose;
        
        protected global::System.Int32? _RubRate;
        
        protected global::System.Int32? _FactoryID;
        
        protected string _Remark;
        
        protected string _DeleteFlag;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasRubInfo left, global::Mesnac.Entity.BasRubInfo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasRubInfo left, global::Mesnac.Entity.BasRubInfo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string RubCode {
            get {
                return this._RubCode;
            }
            set {
                this.OnPropertyChanged("RubCode", this._RubCode, value);
                this._RubCode = value;
            }
        }
        
        public string RubName {
            get {
                return this._RubName;
            }
            set {
                this.OnPropertyChanged("RubName", this._RubName, value);
                this._RubName = value;
            }
        }
        
        public string RubOtherName {
            get {
                return this._RubOtherName;
            }
            set {
                this.OnPropertyChanged("RubOtherName", this._RubOtherName, value);
                this._RubOtherName = value;
            }
        }
        
        public string RubTypeCode {
            get {
                return this._RubTypeCode;
            }
            set {
                this.OnPropertyChanged("RubTypeCode", this._RubTypeCode, value);
                this._RubTypeCode = value;
            }
        }
        
        public global::System.Int32? TyrePartID {
            get {
                return this._TyrePartID;
            }
            set {
                this.OnPropertyChanged("TyrePartID", this._TyrePartID, value);
                this._TyrePartID = value;
            }
        }
        
        public string RubPurpose {
            get {
                return this._RubPurpose;
            }
            set {
                this.OnPropertyChanged("RubPurpose", this._RubPurpose, value);
                this._RubPurpose = value;
            }
        }
        
        public global::System.Int32? RubRate {
            get {
                return this._RubRate;
            }
            set {
                this.OnPropertyChanged("RubRate", this._RubRate, value);
                this._RubRate = value;
            }
        }
        
        public global::System.Int32? FactoryID {
            get {
                return this._FactoryID;
            }
            set {
                this.OnPropertyChanged("FactoryID", this._FactoryID, value);
                this._FactoryID = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasRubInfo._BasRubInfoEntityConfiguration == null)) {
                BasRubInfo._BasRubInfoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasRubInfo");
            }
            return BasRubInfo._BasRubInfoEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._RubCode,
                    this._RubName,
                    this._RubOtherName,
                    this._RubTypeCode,
                    this._TyrePartID,
                    this._RubPurpose,
                    this._RubRate,
                    this._FactoryID,
                    this._Remark,
                    this._DeleteFlag};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._RubCode = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._RubName = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._RubOtherName = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._RubTypeCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._TyrePartID = reader.GetInt32(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._RubPurpose = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._RubRate = reader.GetInt32(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._FactoryID = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._Remark = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._DeleteFlag = reader.GetString(10);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._RubCode = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._RubName = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._RubOtherName = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._RubTypeCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._TyrePartID = ((System.Nullable<int>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._RubPurpose = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._RubRate = ((System.Nullable<int>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._FactoryID = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._Remark = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._DeleteFlag = ((string)(row[10]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasRubInfo).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasRubInfo)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubCode = new NBear.Common.PropertyItem("RubCode", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubName = new NBear.Common.PropertyItem("RubName", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubOtherName = new NBear.Common.PropertyItem("RubOtherName", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubTypeCode = new NBear.Common.PropertyItem("RubTypeCode", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _TyrePartID = new NBear.Common.PropertyItem("TyrePartID", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubPurpose = new NBear.Common.PropertyItem("RubPurpose", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _RubRate = new NBear.Common.PropertyItem("RubRate", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _FactoryID = new NBear.Common.PropertyItem("FactoryID", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasRubInfo");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasRubInfo");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubCode {
                get {
                    if ((aliasName == null)) {
                        return _RubCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubCode", _RubCode.EntityConfiguration, _RubCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubName {
                get {
                    if ((aliasName == null)) {
                        return _RubName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubName", _RubName.EntityConfiguration, _RubName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubOtherName {
                get {
                    if ((aliasName == null)) {
                        return _RubOtherName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubOtherName", _RubOtherName.EntityConfiguration, _RubOtherName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubTypeCode {
                get {
                    if ((aliasName == null)) {
                        return _RubTypeCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubTypeCode", _RubTypeCode.EntityConfiguration, _RubTypeCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem TyrePartID {
                get {
                    if ((aliasName == null)) {
                        return _TyrePartID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("TyrePartID", _TyrePartID.EntityConfiguration, _TyrePartID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubPurpose {
                get {
                    if ((aliasName == null)) {
                        return _RubPurpose;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubPurpose", _RubPurpose.EntityConfiguration, _RubPurpose.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubRate {
                get {
                    if ((aliasName == null)) {
                        return _RubRate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubRate", _RubRate.EntityConfiguration, _RubRate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem FactoryID {
                get {
                    if ((aliasName == null)) {
                        return _FactoryID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("FactoryID", _FactoryID.EntityConfiguration, _FactoryID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
