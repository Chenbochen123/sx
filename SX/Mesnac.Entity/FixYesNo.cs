//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class FixYesNoArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.FixYesNo> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.FixYesNo\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBatchUp" +
        "date=\"false\" isRelation=\"false\" mappingName=\"FixYesNo\" batchSize=\"10\">\r\n  <Prope" +
        "rties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isInherited=\"false\" isRea" +
        "dOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ObjID\" mappi" +
        "ngColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"true\" isNotNull=\"true\" /" +
        ">\r\n    <Property name=\"MarkName\" type=\"System.String\" isInherited=\"false\" isRead" +
        "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MarkName\" ma" +
        "ppingColumnType=\"System.String\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNo" +
        "tNull=\"false\" />\r\n    <Property name=\"MarkCode\" type=\"System.Nullable`1[System.I" +
        "nt32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"MarkCode\" mappingColumnType=\"System.Nullable`1[System.Int32" +
        "]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"" +
        "Remark\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"Remark\" mappingColumnType=\"System.Str" +
        "ing\" sqlType=\"varchar(100)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Prope" +
        "rties>\r\n</EntityConfiguration>")]
    public partial class FixYesNo : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _FixYesNoEntityConfiguration;
        
        protected int _ObjID;
        
        protected string _MarkName;
        
        protected global::System.Int32? _MarkCode;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.FixYesNo left, global::Mesnac.Entity.FixYesNo right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.FixYesNo left, global::Mesnac.Entity.FixYesNo right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string MarkName {
            get {
                return this._MarkName;
            }
            set {
                this.OnPropertyChanged("MarkName", this._MarkName, value);
                this._MarkName = value;
            }
        }
        
        public global::System.Int32? MarkCode {
            get {
                return this._MarkCode;
            }
            set {
                this.OnPropertyChanged("MarkCode", this._MarkCode, value);
                this._MarkCode = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((FixYesNo._FixYesNoEntityConfiguration == null)) {
                FixYesNo._FixYesNoEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.FixYesNo");
            }
            return FixYesNo._FixYesNoEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._MarkName,
                    this._MarkCode,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._MarkName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._MarkCode = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Remark = reader.GetString(3);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._MarkName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._MarkCode = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Remark = ((string)(row[3]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.FixYesNo).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.FixYesNo)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.FixYesNo)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.FixYesNo");
            
            protected NBear.Common.PropertyItem _MarkName = new NBear.Common.PropertyItem("MarkName", "Mesnac.Entity.FixYesNo");
            
            protected NBear.Common.PropertyItem _MarkCode = new NBear.Common.PropertyItem("MarkCode", "Mesnac.Entity.FixYesNo");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.FixYesNo");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MarkName {
                get {
                    if ((aliasName == null)) {
                        return _MarkName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MarkName", _MarkName.EntityConfiguration, _MarkName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MarkCode {
                get {
                    if ((aliasName == null)) {
                        return _MarkCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MarkCode", _MarkCode.EntityConfiguration, _MarkCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
