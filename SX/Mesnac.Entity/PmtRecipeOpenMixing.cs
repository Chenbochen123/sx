//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PmtRecipeOpenMixingArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PmtRecipeOpenMixing> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PmtRecipeOpenMixing\" isReadOnly=\"false\" isAutoPreLoad=\"false" +
        "\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PmtRecipeOpenMixing\" bat" +
        "chSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"ObjID\" type=\"System.Int32\" isI" +
        "nherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"ObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"tr" +
        "ue\" isNotNull=\"true\" />\r\n    <Property name=\"RecipeObjID\" type=\"System.Int32\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"RecipeObjID\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeEquipCode\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" sqlDefaultValue=\"\'\'\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"RecipeEquipCode\" mappingColumnTy" +
        "pe=\"System.String\" sqlType=\"char(5)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n" +
        "    <Property name=\"RecipeMaterialCode\" type=\"System.String\" isInherited=\"false\"" +
        " sqlDefaultValue=\"\'\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"RecipeMaterialCode\" mappingColumnType=\"System.String\" sqlType=\"c" +
        "har(13)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecipeVe" +
        "rsionID\" type=\"System.Int32\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnl" +
        "y=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey" +
        "=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInde" +
        "xPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RecipeVersionID" +
        "\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"OpenMixingNo\" type=\"System.String\" isInherited=\"" +
        "false\" sqlDefaultValue=\"\'0\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContain" +
        "ed=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=" +
        "\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnor" +
        "e=\"false\" mappingName=\"OpenMixingNo\" mappingColumnType=\"System.String\" sqlType=\"" +
        "nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mi" +
        "xingStep\" type=\"System.Int32\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOn" +
        "ly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKe" +
        "y=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInd" +
        "exPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixingStep\" ma" +
        "ppingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"fal" +
        "se\" />\r\n    <Property name=\"OpenActionCode\" type=\"System.String\" isInherited=\"fa" +
        "lse\" sqlDefaultValue=\"\'0\'\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"OpenActionCode\" mappingColumnType=\"System.String\" sqlType=\"" +
        "nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Mi" +
        "xTime\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" sqlDefaultValu" +
        "e=\"(0)\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"MixTime\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CoolMixSpeed\" type=\"" +
        "System.Nullable`1[System.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isR" +
        "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFri" +
        "endKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" " +
        "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"CoolMixSp" +
        "eed\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"OpenMixSpeed\" type=\"" +
        "System.Nullable`1[System.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isR" +
        "eadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFri" +
        "endKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" " +
        "isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"OpenMixSp" +
        "eed\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"MixRollor\" type=\"Sys" +
        "tem.Nullable`1[System.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isRead" +
        "Only=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriend" +
        "Key=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isI" +
        "ndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"MixRollor\" m" +
        "appingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimary" +
        "Key=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"WaterTemp\" type=\"System.Nu" +
        "llable`1[System.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"WaterTemp\" mapping" +
        "ColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"f" +
        "alse\" isNotNull=\"false\" />\r\n    <Property name=\"RubberTemp\" type=\"System.Nullabl" +
        "e`1[System.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"RubberTemp\" mappingColu" +
        "mnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false" +
        "\" isNotNull=\"false\" />\r\n    <Property name=\"CarSpeed\" type=\"System.Nullable`1[Sy" +
        "stem.Decimal]\" isInherited=\"false\" sqlDefaultValue=\"(0)\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"CarSpeed\" mappingColumnType=\"" +
        "System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotN" +
        "ull=\"false\" />\r\n    <Property name=\"SpeedDiff\" type=\"System.Nullable`1[System.De" +
        "cimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContaine" +
        "d=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"" +
        "false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore" +
        "=\"false\" mappingName=\"SpeedDiff\" mappingColumnType=\"System.Nullable`1[System.Dec" +
        "imal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properti" +
        "es>\r\n</EntityConfiguration>")]
    public partial class PmtRecipeOpenMixing : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PmtRecipeOpenMixingEntityConfiguration;
        
        protected int _ObjID;
        
        protected int _RecipeObjID;
        
        protected string _RecipeEquipCode;
        
        protected string _RecipeMaterialCode;
        
        protected int _RecipeVersionID;
        
        protected string _OpenMixingNo;
        
        protected int _MixingStep;
        
        protected string _OpenActionCode;
        
        protected global::System.Int32? _MixTime;
        
        protected global::System.Decimal? _CoolMixSpeed;
        
        protected global::System.Decimal? _OpenMixSpeed;
        
        protected global::System.Decimal? _MixRollor;
        
        protected global::System.Decimal? _WaterTemp;
        
        protected global::System.Decimal? _RubberTemp;
        
        protected global::System.Decimal? _CarSpeed;
        
        protected global::System.Decimal? _SpeedDiff;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PmtRecipeOpenMixing left, global::Mesnac.Entity.PmtRecipeOpenMixing right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PmtRecipeOpenMixing left, global::Mesnac.Entity.PmtRecipeOpenMixing right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public int RecipeObjID {
            get {
                return this._RecipeObjID;
            }
            set {
                this.OnPropertyChanged("RecipeObjID", this._RecipeObjID, value);
                this._RecipeObjID = value;
            }
        }
        
        public string RecipeEquipCode {
            get {
                return this._RecipeEquipCode;
            }
            set {
                this.OnPropertyChanged("RecipeEquipCode", this._RecipeEquipCode, value);
                this._RecipeEquipCode = value;
            }
        }
        
        public string RecipeMaterialCode {
            get {
                return this._RecipeMaterialCode;
            }
            set {
                this.OnPropertyChanged("RecipeMaterialCode", this._RecipeMaterialCode, value);
                this._RecipeMaterialCode = value;
            }
        }
        
        public int RecipeVersionID {
            get {
                return this._RecipeVersionID;
            }
            set {
                this.OnPropertyChanged("RecipeVersionID", this._RecipeVersionID, value);
                this._RecipeVersionID = value;
            }
        }
        
        public string OpenMixingNo {
            get {
                return this._OpenMixingNo;
            }
            set {
                this.OnPropertyChanged("OpenMixingNo", this._OpenMixingNo, value);
                this._OpenMixingNo = value;
            }
        }
        
        public int MixingStep {
            get {
                return this._MixingStep;
            }
            set {
                this.OnPropertyChanged("MixingStep", this._MixingStep, value);
                this._MixingStep = value;
            }
        }
        
        public string OpenActionCode {
            get {
                return this._OpenActionCode;
            }
            set {
                this.OnPropertyChanged("OpenActionCode", this._OpenActionCode, value);
                this._OpenActionCode = value;
            }
        }
        
        public global::System.Int32? MixTime {
            get {
                return this._MixTime;
            }
            set {
                this.OnPropertyChanged("MixTime", this._MixTime, value);
                this._MixTime = value;
            }
        }
        
        public global::System.Decimal? CoolMixSpeed {
            get {
                return this._CoolMixSpeed;
            }
            set {
                this.OnPropertyChanged("CoolMixSpeed", this._CoolMixSpeed, value);
                this._CoolMixSpeed = value;
            }
        }
        
        public global::System.Decimal? OpenMixSpeed {
            get {
                return this._OpenMixSpeed;
            }
            set {
                this.OnPropertyChanged("OpenMixSpeed", this._OpenMixSpeed, value);
                this._OpenMixSpeed = value;
            }
        }
        
        public global::System.Decimal? MixRollor {
            get {
                return this._MixRollor;
            }
            set {
                this.OnPropertyChanged("MixRollor", this._MixRollor, value);
                this._MixRollor = value;
            }
        }
        
        public global::System.Decimal? WaterTemp {
            get {
                return this._WaterTemp;
            }
            set {
                this.OnPropertyChanged("WaterTemp", this._WaterTemp, value);
                this._WaterTemp = value;
            }
        }
        
        public global::System.Decimal? RubberTemp {
            get {
                return this._RubberTemp;
            }
            set {
                this.OnPropertyChanged("RubberTemp", this._RubberTemp, value);
                this._RubberTemp = value;
            }
        }
        
        public global::System.Decimal? CarSpeed {
            get {
                return this._CarSpeed;
            }
            set {
                this.OnPropertyChanged("CarSpeed", this._CarSpeed, value);
                this._CarSpeed = value;
            }
        }
        
        public global::System.Decimal? SpeedDiff {
            get {
                return this._SpeedDiff;
            }
            set {
                this.OnPropertyChanged("SpeedDiff", this._SpeedDiff, value);
                this._SpeedDiff = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PmtRecipeOpenMixing._PmtRecipeOpenMixingEntityConfiguration == null)) {
                PmtRecipeOpenMixing._PmtRecipeOpenMixingEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PmtRecipeOpenMixing");
            }
            return PmtRecipeOpenMixing._PmtRecipeOpenMixingEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._RecipeObjID,
                    this._RecipeEquipCode,
                    this._RecipeMaterialCode,
                    this._RecipeVersionID,
                    this._OpenMixingNo,
                    this._MixingStep,
                    this._OpenActionCode,
                    this._MixTime,
                    this._CoolMixSpeed,
                    this._OpenMixSpeed,
                    this._MixRollor,
                    this._WaterTemp,
                    this._RubberTemp,
                    this._CarSpeed,
                    this._SpeedDiff};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._RecipeObjID = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._RecipeEquipCode = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._RecipeMaterialCode = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._RecipeVersionID = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._OpenMixingNo = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._MixingStep = reader.GetInt32(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._OpenActionCode = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._MixTime = reader.GetInt32(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._CoolMixSpeed = reader.GetDecimal(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._OpenMixSpeed = reader.GetDecimal(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixRollor = reader.GetDecimal(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._WaterTemp = reader.GetDecimal(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._RubberTemp = reader.GetDecimal(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._CarSpeed = reader.GetDecimal(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._SpeedDiff = reader.GetDecimal(15);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._RecipeObjID = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._RecipeEquipCode = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._RecipeMaterialCode = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._RecipeVersionID = ((int)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._OpenMixingNo = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._MixingStep = ((int)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._OpenActionCode = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._MixTime = ((System.Nullable<int>)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._CoolMixSpeed = ((System.Nullable<decimal>)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._OpenMixSpeed = ((System.Nullable<decimal>)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixRollor = ((System.Nullable<decimal>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._WaterTemp = ((System.Nullable<decimal>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._RubberTemp = ((System.Nullable<decimal>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._CarSpeed = ((System.Nullable<decimal>)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._SpeedDiff = ((System.Nullable<decimal>)(row[15]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PmtRecipeOpenMixing).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PmtRecipeOpenMixing)(obj)).isAttached) 
                        && (this.ObjID == ((global::Mesnac.Entity.PmtRecipeOpenMixing)(obj)).ObjID));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _RecipeObjID = new NBear.Common.PropertyItem("RecipeObjID", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _RecipeEquipCode = new NBear.Common.PropertyItem("RecipeEquipCode", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _RecipeMaterialCode = new NBear.Common.PropertyItem("RecipeMaterialCode", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _RecipeVersionID = new NBear.Common.PropertyItem("RecipeVersionID", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _OpenMixingNo = new NBear.Common.PropertyItem("OpenMixingNo", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _MixingStep = new NBear.Common.PropertyItem("MixingStep", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _OpenActionCode = new NBear.Common.PropertyItem("OpenActionCode", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _MixTime = new NBear.Common.PropertyItem("MixTime", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _CoolMixSpeed = new NBear.Common.PropertyItem("CoolMixSpeed", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _OpenMixSpeed = new NBear.Common.PropertyItem("OpenMixSpeed", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _MixRollor = new NBear.Common.PropertyItem("MixRollor", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _WaterTemp = new NBear.Common.PropertyItem("WaterTemp", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _RubberTemp = new NBear.Common.PropertyItem("RubberTemp", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _CarSpeed = new NBear.Common.PropertyItem("CarSpeed", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            protected NBear.Common.PropertyItem _SpeedDiff = new NBear.Common.PropertyItem("SpeedDiff", "Mesnac.Entity.PmtRecipeOpenMixing");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeObjID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeObjID", _RecipeObjID.EntityConfiguration, _RecipeObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeEquipCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeEquipCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeEquipCode", _RecipeEquipCode.EntityConfiguration, _RecipeEquipCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeMaterialCode {
                get {
                    if ((aliasName == null)) {
                        return _RecipeMaterialCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeMaterialCode", _RecipeMaterialCode.EntityConfiguration, _RecipeMaterialCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RecipeVersionID {
                get {
                    if ((aliasName == null)) {
                        return _RecipeVersionID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RecipeVersionID", _RecipeVersionID.EntityConfiguration, _RecipeVersionID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenMixingNo {
                get {
                    if ((aliasName == null)) {
                        return _OpenMixingNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenMixingNo", _OpenMixingNo.EntityConfiguration, _OpenMixingNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixingStep {
                get {
                    if ((aliasName == null)) {
                        return _MixingStep;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixingStep", _MixingStep.EntityConfiguration, _MixingStep.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenActionCode {
                get {
                    if ((aliasName == null)) {
                        return _OpenActionCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenActionCode", _OpenActionCode.EntityConfiguration, _OpenActionCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixTime {
                get {
                    if ((aliasName == null)) {
                        return _MixTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixTime", _MixTime.EntityConfiguration, _MixTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CoolMixSpeed {
                get {
                    if ((aliasName == null)) {
                        return _CoolMixSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CoolMixSpeed", _CoolMixSpeed.EntityConfiguration, _CoolMixSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenMixSpeed {
                get {
                    if ((aliasName == null)) {
                        return _OpenMixSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenMixSpeed", _OpenMixSpeed.EntityConfiguration, _OpenMixSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixRollor {
                get {
                    if ((aliasName == null)) {
                        return _MixRollor;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixRollor", _MixRollor.EntityConfiguration, _MixRollor.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WaterTemp {
                get {
                    if ((aliasName == null)) {
                        return _WaterTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WaterTemp", _WaterTemp.EntityConfiguration, _WaterTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubberTemp {
                get {
                    if ((aliasName == null)) {
                        return _RubberTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubberTemp", _RubberTemp.EntityConfiguration, _RubberTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CarSpeed {
                get {
                    if ((aliasName == null)) {
                        return _CarSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CarSpeed", _CarSpeed.EntityConfiguration, _CarSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SpeedDiff {
                get {
                    if ((aliasName == null)) {
                        return _SpeedDiff;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SpeedDiff", _SpeedDiff.EntityConfiguration, _SpeedDiff.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
