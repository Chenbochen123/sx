//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class PptOpenMixDataArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PptOpenMixData> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.PptOpenMixData\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isB" +
        "atchUpdate=\"false\" isRelation=\"false\" mappingName=\"PptOpenMixData\" batchSize=\"10" +
        "\">\r\n  <Properties>\r\n    <Property name=\"Barcode\" type=\"System.String\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"Barcode\" mappingColumnType=\"System.String\" sqlType=\"char(18)\" isPrimaryKey=\"" +
        "true\" isNotNull=\"true\" />\r\n    <Property name=\"OpenMixId\" type=\"System.Int32\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"OpenMixId\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryK" +
        "ey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"OpenMixingNo\" type=\"System.Nu" +
        "llable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"f" +
        "alse\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\"" +
        " isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSer" +
        "ializationIgnore=\"false\" mappingName=\"OpenMixingNo\" mappingColumnType=\"System.Nu" +
        "llable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r" +
        "\n    <Property name=\"SerialNo\" type=\"System.Nullable`1[System.Int32]\" isInherite" +
        "d=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"SerialNo\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"StepTime\" type=\"S" +
        "ystem.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"StepTime\" mappingColumnType=\"Syste" +
        "m.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"RollorSpace\" type=\"System.Nullable`1[System.Decimal]\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"RollorSpace\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" " +
        "sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"Temperature\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isRea" +
        "dOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFrien" +
        "dKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" is" +
        "IndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"Temperature" +
        "\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrim" +
        "aryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"LineSpeed\" type=\"System" +
        ".Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"LineSpeed\" mappingColumnType=\"System." +
        "Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n    <Property name=\"AutoOrMan\" type=\"System.String\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"AutoO" +
        "rMan\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"fa" +
        "lse\" isNotNull=\"false\" />\r\n    <Property name=\"OpenActionName\" type=\"System.Stri" +
        "ng\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"f" +
        "alse\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fals" +
        "e\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fa" +
        "lse\" mappingName=\"OpenActionName\" mappingColumnType=\"System.String\" sqlType=\"nva" +
        "rchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"OpenA" +
        "ctionCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoun" +
        "dUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad" +
        "=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fals" +
        "e\" isSerializationIgnore=\"false\" mappingName=\"OpenActionCode\" mappingColumnType=" +
        "\"System.String\" sqlType=\"nvarchar(200)\" isPrimaryKey=\"false\" isNotNull=\"false\" /" +
        ">\r\n    <Property name=\"MixTime\" type=\"System.Nullable`1[System.Int32]\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"MixTime\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"CoolMixSpeed\" typ" +
        "e=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isC" +
        "ompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLa" +
        "zyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc" +
        "=\"false\" isSerializationIgnore=\"false\" mappingName=\"CoolMixSpeed\" mappingColumnT" +
        "ype=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" i" +
        "sNotNull=\"false\" />\r\n    <Property name=\"OpenMixSpeed\" type=\"System.Nullable`1[S" +
        "ystem.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"OpenMixSpeed\" mappingColumnType=\"System.Nullable`1" +
        "[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n " +
        "   <Property name=\"MixRollor\" type=\"System.Nullable`1[System.Decimal]\" isInherit" +
        "ed=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery" +
        "=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPro" +
        "perty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingN" +
        "ame=\"MixRollor\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"d" +
        "ecimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"WaterTemp" +
        "\" type=\"System.Nullable`1[System.Decimal]\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"WaterTemp\" mappingColum" +
        "nType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"RubberTemp\" type=\"System.Nullable`1[S" +
        "ystem.Decimal]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"RubberTemp\" mappingColumnType=\"System.Nullable`1[S" +
        "ystem.Decimal]\" sqlType=\"decimal\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"CarSpeed\" type=\"System.Nullable`1[System.Decimal]\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"CarSpeed\" mappingColumnType=\"System.Nullable`1[System.Decimal]\" sqlType=\"decim" +
        "al\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"Status\" type=" +
        "\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"Status\" mappingColumnType=\"Syste" +
        "m.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\"" +
        " />\r\n    <Property name=\"SetMixTime\" type=\"System.Nullable`1[System.Int32]\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"SetMixTime\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlTyp" +
        "e=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConf" +
        "iguration>")]
    public partial class PptOpenMixData : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _PptOpenMixDataEntityConfiguration;
        
        protected string _Barcode;
        
        protected int _OpenMixId;
        
        protected global::System.Int32? _OpenMixingNo;
        
        protected global::System.Int32? _SerialNo;
        
        protected global::System.Int32? _StepTime;
        
        protected global::System.Decimal? _RollorSpace;
        
        protected global::System.Decimal? _Temperature;
        
        protected global::System.Decimal? _LineSpeed;
        
        protected string _AutoOrMan;
        
        protected string _OpenActionName;
        
        protected string _OpenActionCode;
        
        protected global::System.Int32? _MixTime;
        
        protected global::System.Decimal? _CoolMixSpeed;
        
        protected global::System.Decimal? _OpenMixSpeed;
        
        protected global::System.Decimal? _MixRollor;
        
        protected global::System.Decimal? _WaterTemp;
        
        protected global::System.Decimal? _RubberTemp;
        
        protected global::System.Decimal? _CarSpeed;
        
        protected global::System.Int32? _Status;
        
        protected global::System.Int32? _SetMixTime;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.PptOpenMixData left, global::Mesnac.Entity.PptOpenMixData right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.PptOpenMixData left, global::Mesnac.Entity.PptOpenMixData right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Barcode {
            get {
                return this._Barcode;
            }
            set {
                this.OnPropertyChanged("Barcode", this._Barcode, value);
                this._Barcode = value;
            }
        }
        
        public int OpenMixId {
            get {
                return this._OpenMixId;
            }
            set {
                this.OnPropertyChanged("OpenMixId", this._OpenMixId, value);
                this._OpenMixId = value;
            }
        }
        
        public global::System.Int32? OpenMixingNo {
            get {
                return this._OpenMixingNo;
            }
            set {
                this.OnPropertyChanged("OpenMixingNo", this._OpenMixingNo, value);
                this._OpenMixingNo = value;
            }
        }
        
        public global::System.Int32? SerialNo {
            get {
                return this._SerialNo;
            }
            set {
                this.OnPropertyChanged("SerialNo", this._SerialNo, value);
                this._SerialNo = value;
            }
        }
        
        public global::System.Int32? StepTime {
            get {
                return this._StepTime;
            }
            set {
                this.OnPropertyChanged("StepTime", this._StepTime, value);
                this._StepTime = value;
            }
        }
        
        public global::System.Decimal? RollorSpace {
            get {
                return this._RollorSpace;
            }
            set {
                this.OnPropertyChanged("RollorSpace", this._RollorSpace, value);
                this._RollorSpace = value;
            }
        }
        
        public global::System.Decimal? Temperature {
            get {
                return this._Temperature;
            }
            set {
                this.OnPropertyChanged("Temperature", this._Temperature, value);
                this._Temperature = value;
            }
        }
        
        public global::System.Decimal? LineSpeed {
            get {
                return this._LineSpeed;
            }
            set {
                this.OnPropertyChanged("LineSpeed", this._LineSpeed, value);
                this._LineSpeed = value;
            }
        }
        
        public string AutoOrMan {
            get {
                return this._AutoOrMan;
            }
            set {
                this.OnPropertyChanged("AutoOrMan", this._AutoOrMan, value);
                this._AutoOrMan = value;
            }
        }
        
        public string OpenActionName {
            get {
                return this._OpenActionName;
            }
            set {
                this.OnPropertyChanged("OpenActionName", this._OpenActionName, value);
                this._OpenActionName = value;
            }
        }
        
        public string OpenActionCode {
            get {
                return this._OpenActionCode;
            }
            set {
                this.OnPropertyChanged("OpenActionCode", this._OpenActionCode, value);
                this._OpenActionCode = value;
            }
        }
        
        public global::System.Int32? MixTime {
            get {
                return this._MixTime;
            }
            set {
                this.OnPropertyChanged("MixTime", this._MixTime, value);
                this._MixTime = value;
            }
        }
        
        public global::System.Decimal? CoolMixSpeed {
            get {
                return this._CoolMixSpeed;
            }
            set {
                this.OnPropertyChanged("CoolMixSpeed", this._CoolMixSpeed, value);
                this._CoolMixSpeed = value;
            }
        }
        
        public global::System.Decimal? OpenMixSpeed {
            get {
                return this._OpenMixSpeed;
            }
            set {
                this.OnPropertyChanged("OpenMixSpeed", this._OpenMixSpeed, value);
                this._OpenMixSpeed = value;
            }
        }
        
        public global::System.Decimal? MixRollor {
            get {
                return this._MixRollor;
            }
            set {
                this.OnPropertyChanged("MixRollor", this._MixRollor, value);
                this._MixRollor = value;
            }
        }
        
        public global::System.Decimal? WaterTemp {
            get {
                return this._WaterTemp;
            }
            set {
                this.OnPropertyChanged("WaterTemp", this._WaterTemp, value);
                this._WaterTemp = value;
            }
        }
        
        public global::System.Decimal? RubberTemp {
            get {
                return this._RubberTemp;
            }
            set {
                this.OnPropertyChanged("RubberTemp", this._RubberTemp, value);
                this._RubberTemp = value;
            }
        }
        
        public global::System.Decimal? CarSpeed {
            get {
                return this._CarSpeed;
            }
            set {
                this.OnPropertyChanged("CarSpeed", this._CarSpeed, value);
                this._CarSpeed = value;
            }
        }
        
        public global::System.Int32? Status {
            get {
                return this._Status;
            }
            set {
                this.OnPropertyChanged("Status", this._Status, value);
                this._Status = value;
            }
        }
        
        public global::System.Int32? SetMixTime {
            get {
                return this._SetMixTime;
            }
            set {
                this.OnPropertyChanged("SetMixTime", this._SetMixTime, value);
                this._SetMixTime = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((PptOpenMixData._PptOpenMixDataEntityConfiguration == null)) {
                PptOpenMixData._PptOpenMixDataEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PptOpenMixData");
            }
            return PptOpenMixData._PptOpenMixDataEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Barcode,
                    this._OpenMixId,
                    this._OpenMixingNo,
                    this._SerialNo,
                    this._StepTime,
                    this._RollorSpace,
                    this._Temperature,
                    this._LineSpeed,
                    this._AutoOrMan,
                    this._OpenActionName,
                    this._OpenActionCode,
                    this._MixTime,
                    this._CoolMixSpeed,
                    this._OpenMixSpeed,
                    this._MixRollor,
                    this._WaterTemp,
                    this._RubberTemp,
                    this._CarSpeed,
                    this._Status,
                    this._SetMixTime};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Barcode = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._OpenMixId = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._OpenMixingNo = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._SerialNo = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._StepTime = reader.GetInt32(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._RollorSpace = reader.GetDecimal(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._Temperature = reader.GetDecimal(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._LineSpeed = reader.GetDecimal(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._AutoOrMan = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._OpenActionName = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._OpenActionCode = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._MixTime = reader.GetInt32(11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._CoolMixSpeed = reader.GetDecimal(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._OpenMixSpeed = reader.GetDecimal(13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._MixRollor = reader.GetDecimal(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._WaterTemp = reader.GetDecimal(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._RubberTemp = reader.GetDecimal(16);
            }
            if ((false == reader.IsDBNull(17))) {
                this._CarSpeed = reader.GetDecimal(17);
            }
            if ((false == reader.IsDBNull(18))) {
                this._Status = reader.GetInt32(18);
            }
            if ((false == reader.IsDBNull(19))) {
                this._SetMixTime = reader.GetInt32(19);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Barcode = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._OpenMixId = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._OpenMixingNo = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._SerialNo = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._StepTime = ((System.Nullable<int>)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._RollorSpace = ((System.Nullable<decimal>)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._Temperature = ((System.Nullable<decimal>)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._LineSpeed = ((System.Nullable<decimal>)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._AutoOrMan = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._OpenActionName = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._OpenActionCode = ((string)(row[10]));
            }
            if ((false == row.IsNull(11))) {
                this._MixTime = ((System.Nullable<int>)(row[11]));
            }
            if ((false == row.IsNull(12))) {
                this._CoolMixSpeed = ((System.Nullable<decimal>)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._OpenMixSpeed = ((System.Nullable<decimal>)(row[13]));
            }
            if ((false == row.IsNull(14))) {
                this._MixRollor = ((System.Nullable<decimal>)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._WaterTemp = ((System.Nullable<decimal>)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._RubberTemp = ((System.Nullable<decimal>)(row[16]));
            }
            if ((false == row.IsNull(17))) {
                this._CarSpeed = ((System.Nullable<decimal>)(row[17]));
            }
            if ((false == row.IsNull(18))) {
                this._Status = ((System.Nullable<int>)(row[18]));
            }
            if ((false == row.IsNull(19))) {
                this._SetMixTime = ((System.Nullable<int>)(row[19]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PptOpenMixData).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return (((this.isAttached && ((global::Mesnac.Entity.PptOpenMixData)(obj)).isAttached) 
                        && (this.Barcode == ((global::Mesnac.Entity.PptOpenMixData)(obj)).Barcode)) 
                        && (this.OpenMixId == ((global::Mesnac.Entity.PptOpenMixData)(obj)).OpenMixId));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Barcode = new NBear.Common.PropertyItem("Barcode", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _OpenMixId = new NBear.Common.PropertyItem("OpenMixId", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _OpenMixingNo = new NBear.Common.PropertyItem("OpenMixingNo", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _SerialNo = new NBear.Common.PropertyItem("SerialNo", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _StepTime = new NBear.Common.PropertyItem("StepTime", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _RollorSpace = new NBear.Common.PropertyItem("RollorSpace", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _Temperature = new NBear.Common.PropertyItem("Temperature", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _LineSpeed = new NBear.Common.PropertyItem("LineSpeed", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _AutoOrMan = new NBear.Common.PropertyItem("AutoOrMan", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _OpenActionName = new NBear.Common.PropertyItem("OpenActionName", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _OpenActionCode = new NBear.Common.PropertyItem("OpenActionCode", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _MixTime = new NBear.Common.PropertyItem("MixTime", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _CoolMixSpeed = new NBear.Common.PropertyItem("CoolMixSpeed", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _OpenMixSpeed = new NBear.Common.PropertyItem("OpenMixSpeed", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _MixRollor = new NBear.Common.PropertyItem("MixRollor", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _WaterTemp = new NBear.Common.PropertyItem("WaterTemp", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _RubberTemp = new NBear.Common.PropertyItem("RubberTemp", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _CarSpeed = new NBear.Common.PropertyItem("CarSpeed", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _Status = new NBear.Common.PropertyItem("Status", "Mesnac.Entity.PptOpenMixData");
            
            protected NBear.Common.PropertyItem _SetMixTime = new NBear.Common.PropertyItem("SetMixTime", "Mesnac.Entity.PptOpenMixData");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Barcode {
                get {
                    if ((aliasName == null)) {
                        return _Barcode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Barcode", _Barcode.EntityConfiguration, _Barcode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenMixId {
                get {
                    if ((aliasName == null)) {
                        return _OpenMixId;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenMixId", _OpenMixId.EntityConfiguration, _OpenMixId.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenMixingNo {
                get {
                    if ((aliasName == null)) {
                        return _OpenMixingNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenMixingNo", _OpenMixingNo.EntityConfiguration, _OpenMixingNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SerialNo {
                get {
                    if ((aliasName == null)) {
                        return _SerialNo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SerialNo", _SerialNo.EntityConfiguration, _SerialNo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem StepTime {
                get {
                    if ((aliasName == null)) {
                        return _StepTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("StepTime", _StepTime.EntityConfiguration, _StepTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RollorSpace {
                get {
                    if ((aliasName == null)) {
                        return _RollorSpace;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RollorSpace", _RollorSpace.EntityConfiguration, _RollorSpace.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Temperature {
                get {
                    if ((aliasName == null)) {
                        return _Temperature;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Temperature", _Temperature.EntityConfiguration, _Temperature.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem LineSpeed {
                get {
                    if ((aliasName == null)) {
                        return _LineSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("LineSpeed", _LineSpeed.EntityConfiguration, _LineSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem AutoOrMan {
                get {
                    if ((aliasName == null)) {
                        return _AutoOrMan;
                    }
                    else {
                        return new NBear.Common.PropertyItem("AutoOrMan", _AutoOrMan.EntityConfiguration, _AutoOrMan.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenActionName {
                get {
                    if ((aliasName == null)) {
                        return _OpenActionName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenActionName", _OpenActionName.EntityConfiguration, _OpenActionName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenActionCode {
                get {
                    if ((aliasName == null)) {
                        return _OpenActionCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenActionCode", _OpenActionCode.EntityConfiguration, _OpenActionCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixTime {
                get {
                    if ((aliasName == null)) {
                        return _MixTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixTime", _MixTime.EntityConfiguration, _MixTime.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CoolMixSpeed {
                get {
                    if ((aliasName == null)) {
                        return _CoolMixSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CoolMixSpeed", _CoolMixSpeed.EntityConfiguration, _CoolMixSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem OpenMixSpeed {
                get {
                    if ((aliasName == null)) {
                        return _OpenMixSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("OpenMixSpeed", _OpenMixSpeed.EntityConfiguration, _OpenMixSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem MixRollor {
                get {
                    if ((aliasName == null)) {
                        return _MixRollor;
                    }
                    else {
                        return new NBear.Common.PropertyItem("MixRollor", _MixRollor.EntityConfiguration, _MixRollor.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WaterTemp {
                get {
                    if ((aliasName == null)) {
                        return _WaterTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WaterTemp", _WaterTemp.EntityConfiguration, _WaterTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem RubberTemp {
                get {
                    if ((aliasName == null)) {
                        return _RubberTemp;
                    }
                    else {
                        return new NBear.Common.PropertyItem("RubberTemp", _RubberTemp.EntityConfiguration, _RubberTemp.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem CarSpeed {
                get {
                    if ((aliasName == null)) {
                        return _CarSpeed;
                    }
                    else {
                        return new NBear.Common.PropertyItem("CarSpeed", _CarSpeed.EntityConfiguration, _CarSpeed.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Status {
                get {
                    if ((aliasName == null)) {
                        return _Status;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Status", _Status.EntityConfiguration, _Status.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem SetMixTime {
                get {
                    if ((aliasName == null)) {
                        return _SetMixTime;
                    }
                    else {
                        return new NBear.Common.PropertyItem("SetMixTime", _SetMixTime.EntityConfiguration, _SetMixTime.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
