//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class BasWorkArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.BasWork> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.BasWork\" isReadOnly=\"true\" isAutoPreLoad=\"false\" isBatchUpda" +
        "te=\"false\" isRelation=\"false\" mappingName=\"BasWork\" batchSize=\"10\">\r\n  <Properti" +
        "es>\r\n    <Property name=\"ObjID\" type=\"System.Nullable`1[System.Int32]\" isInherit" +
        "ed=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=" +
        "\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProp" +
        "erty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNa" +
        "me=\"ObjID\" mappingColumnType=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isP" +
        "rimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"WorkName\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContai" +
        "ned=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey" +
        "=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgno" +
        "re=\"false\" mappingName=\"WorkName\" mappingColumnType=\"System.String\" sqlType=\"nva" +
        "rchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeptCo" +
        "de\" type=\"System.Nullable`1[System.Int32]\" isInherited=\"false\" isReadOnly=\"true\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"DeptCode\" mappingColumnT" +
        "ype=\"System.Nullable`1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNu" +
        "ll=\"false\" />\r\n    <Property name=\"WorkProcedureCode\" type=\"System.Nullable`1[Sy" +
        "stem.Int32]\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isCont" +
        "ained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationK" +
        "ey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIg" +
        "nore=\"false\" mappingName=\"WorkProcedureCode\" mappingColumnType=\"System.Nullable`" +
        "1[System.Int32]\" sqlType=\"int\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <P" +
        "roperty name=\"HRCode\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"true\"" +
        " isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" " +
        "isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexProperty" +
        "Desc=\"false\" isSerializationIgnore=\"false\" mappingName=\"HRCode\" mappingColumnTyp" +
        "e=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />" +
        "\r\n    <Property name=\"ERPCode\" type=\"System.String\" isInherited=\"false\" isReadOn" +
        "ly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey" +
        "=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isInde" +
        "xPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ERPCode\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.String\" isInherited=\"fa" +
        "lse\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"De" +
        "leteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"fals" +
        "e\" isNotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInhe" +
        "rited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"false\" isQue" +
        "ry=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexP" +
        "roperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappin" +
        "gName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"varchar(1)\" isPrimaryK" +
        "ey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class BasWork : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _BasWorkEntityConfiguration;
        
        protected global::System.Int32? _ObjID;
        
        protected string _WorkName;
        
        protected global::System.Int32? _DeptCode;
        
        protected global::System.Int32? _WorkProcedureCode;
        
        protected string _HRCode;
        
        protected string _ERPCode;
        
        protected string _DeleteFlag;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.BasWork left, global::Mesnac.Entity.BasWork right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.BasWork left, global::Mesnac.Entity.BasWork right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public global::System.Int32? ObjID {
            get {
                return this._ObjID;
            }
            set {
                this.OnPropertyChanged("ObjID", this._ObjID, value);
                this._ObjID = value;
            }
        }
        
        public string WorkName {
            get {
                return this._WorkName;
            }
            set {
                this.OnPropertyChanged("WorkName", this._WorkName, value);
                this._WorkName = value;
            }
        }
        
        public global::System.Int32? DeptCode {
            get {
                return this._DeptCode;
            }
            set {
                this.OnPropertyChanged("DeptCode", this._DeptCode, value);
                this._DeptCode = value;
            }
        }
        
        public global::System.Int32? WorkProcedureCode {
            get {
                return this._WorkProcedureCode;
            }
            set {
                this.OnPropertyChanged("WorkProcedureCode", this._WorkProcedureCode, value);
                this._WorkProcedureCode = value;
            }
        }
        
        public string HRCode {
            get {
                return this._HRCode;
            }
            set {
                this.OnPropertyChanged("HRCode", this._HRCode, value);
                this._HRCode = value;
            }
        }
        
        public string ERPCode {
            get {
                return this._ERPCode;
            }
            set {
                this.OnPropertyChanged("ERPCode", this._ERPCode, value);
                this._ERPCode = value;
            }
        }
        
        public string DeleteFlag {
            get {
                return this._DeleteFlag;
            }
            set {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((BasWork._BasWorkEntityConfiguration == null)) {
                BasWork._BasWorkEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.BasWork");
            }
            return BasWork._BasWorkEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._ObjID,
                    this._WorkName,
                    this._DeptCode,
                    this._WorkProcedureCode,
                    this._HRCode,
                    this._ERPCode,
                    this._DeleteFlag,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._ObjID = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._WorkName = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._DeptCode = reader.GetInt32(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._WorkProcedureCode = reader.GetInt32(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._HRCode = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._ERPCode = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._DeleteFlag = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._Remark = reader.GetString(7);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._ObjID = ((System.Nullable<int>)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._WorkName = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._DeptCode = ((System.Nullable<int>)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._WorkProcedureCode = ((System.Nullable<int>)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._HRCode = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._ERPCode = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._DeleteFlag = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._Remark = ((string)(row[7]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.BasWork).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.BasWork)(obj)).isAttached) 
                        && base.Equals(obj));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _ObjID = new NBear.Common.PropertyItem("ObjID", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _WorkName = new NBear.Common.PropertyItem("WorkName", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _DeptCode = new NBear.Common.PropertyItem("DeptCode", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _WorkProcedureCode = new NBear.Common.PropertyItem("WorkProcedureCode", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _HRCode = new NBear.Common.PropertyItem("HRCode", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _ERPCode = new NBear.Common.PropertyItem("ERPCode", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.BasWork");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.BasWork");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem ObjID {
                get {
                    if ((aliasName == null)) {
                        return _ObjID;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ObjID", _ObjID.EntityConfiguration, _ObjID.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkName {
                get {
                    if ((aliasName == null)) {
                        return _WorkName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkName", _WorkName.EntityConfiguration, _WorkName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeptCode {
                get {
                    if ((aliasName == null)) {
                        return _DeptCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeptCode", _DeptCode.EntityConfiguration, _DeptCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem WorkProcedureCode {
                get {
                    if ((aliasName == null)) {
                        return _WorkProcedureCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("WorkProcedureCode", _WorkProcedureCode.EntityConfiguration, _WorkProcedureCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem HRCode {
                get {
                    if ((aliasName == null)) {
                        return _HRCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("HRCode", _HRCode.EntityConfiguration, _HRCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem ERPCode {
                get {
                    if ((aliasName == null)) {
                        return _ERPCode;
                    }
                    else {
                        return new NBear.Common.PropertyItem("ERPCode", _ERPCode.EntityConfiguration, _ERPCode.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem DeleteFlag {
                get {
                    if ((aliasName == null)) {
                        return _DeleteFlag;
                    }
                    else {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
