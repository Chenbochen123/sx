//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class DZKB_YiChangArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.DZKB_YiChang> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.DZKB_YiChang\" isReadOnly=\"false\" isAutoPreLoad=\"false\" isBat" +
        "chUpdate=\"false\" isRelation=\"false\" mappingName=\"DZKB_YiChang\" batchSize=\"10\">\r\n" +
        "  <Properties>\r\n    <Property name=\"Plan_date\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"Plan_date\" mappingColumnType=\"System.String\" sqlType=\"nchar(10)\" isPrimaryKey=" +
        "\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Shift_id\" type=\"System.Int32\" is" +
        "Inherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" " +
        "isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isI" +
        "ndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" m" +
        "appingName=\"Shift_id\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimaryKe" +
        "y=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"Remark\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(200)\" i" +
        "sPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfiguration" +
        ">")]
    public partial class DZKB_YiChang : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _DZKB_YiChangEntityConfiguration;
        
        protected string _Plan_date;
        
        protected int _Shift_id;
        
        protected string _Remark;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.DZKB_YiChang left, global::Mesnac.Entity.DZKB_YiChang right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.DZKB_YiChang left, global::Mesnac.Entity.DZKB_YiChang right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public string Plan_date {
            get {
                return this._Plan_date;
            }
            set {
                this.OnPropertyChanged("Plan_date", this._Plan_date, value);
                this._Plan_date = value;
            }
        }
        
        public int Shift_id {
            get {
                return this._Shift_id;
            }
            set {
                this.OnPropertyChanged("Shift_id", this._Shift_id, value);
                this._Shift_id = value;
            }
        }
        
        public string Remark {
            get {
                return this._Remark;
            }
            set {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((DZKB_YiChang._DZKB_YiChangEntityConfiguration == null)) {
                DZKB_YiChang._DZKB_YiChangEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.DZKB_YiChang");
            }
            return DZKB_YiChang._DZKB_YiChangEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Plan_date,
                    this._Shift_id,
                    this._Remark};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Plan_date = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._Shift_id = reader.GetInt32(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._Remark = reader.GetString(2);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Plan_date = ((string)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._Shift_id = ((int)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._Remark = ((string)(row[2]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.DZKB_YiChang).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return (((this.isAttached && ((global::Mesnac.Entity.DZKB_YiChang)(obj)).isAttached) 
                        && (this.Plan_date == ((global::Mesnac.Entity.DZKB_YiChang)(obj)).Plan_date)) 
                        && (this.Shift_id == ((global::Mesnac.Entity.DZKB_YiChang)(obj)).Shift_id));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Plan_date = new NBear.Common.PropertyItem("Plan_date", "Mesnac.Entity.DZKB_YiChang");
            
            protected NBear.Common.PropertyItem _Shift_id = new NBear.Common.PropertyItem("Shift_id", "Mesnac.Entity.DZKB_YiChang");
            
            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.DZKB_YiChang");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Plan_date {
                get {
                    if ((aliasName == null)) {
                        return _Plan_date;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Plan_date", _Plan_date.EntityConfiguration, _Plan_date.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Shift_id {
                get {
                    if ((aliasName == null)) {
                        return _Shift_id;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Shift_id", _Shift_id.EntityConfiguration, _Shift_id.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Remark {
                get {
                    if ((aliasName == null)) {
                        return _Remark;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
