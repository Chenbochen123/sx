//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity
{
    using System;
    using System.Xml.Serialization;
    using NBear.Common;


    [System.SerializableAttribute()]
    public partial class PstMaterialInventoryArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.PstMaterialInventory>
    {
    }

    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsi=\"http://w" +
        "ww.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" " +
        "name=\"Mesnac.Entity.PstMaterialInventory\" isReadOnly=\"false\" isAutoPreLoad=\"fals" +
        "e\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"PstMaterialInventory\" b" +
        "atchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"BillNo\" type=\"System.String\"" +
        " isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"BillNo\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" " +
        "isPrimaryKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"StorageID\" type=\"Sy" +
        "stem.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isCon" +
        "tained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelation" +
        "Key=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationI" +
        "gnore=\"false\" mappingName=\"StorageID\" mappingColumnType=\"System.String\" sqlType=" +
        "\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"In" +
        "ventoryType\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompo" +
        "undUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLo" +
        "ad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fa" +
        "lse\" isSerializationIgnore=\"false\" mappingName=\"InventoryType\" mappingColumnType" +
        "=\"System.String\" sqlType=\"char(1)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  " +
        "  <Property name=\"InventoryDate\" type=\"System.Nullable`1[System.DateTime]\" isInh" +
        "erited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQ" +
        "uery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInde" +
        "xProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mapp" +
        "ingName=\"InventoryDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" s" +
        "qlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=" +
        "\"InaccountDuration\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" " +
        "isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" i" +
        "sLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyD" +
        "esc=\"false\" isSerializationIgnore=\"false\" mappingName=\"InaccountDuration\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimaryKey=\"false\" isNotNul" +
        "l=\"false\" />\r\n    <Property name=\"MakerPerson\" type=\"System.String\" isInherited=" +
        "\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"f" +
        "alse\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProper" +
        "ty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName" +
        "=\"MakerPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(36)\" isPrimar" +
        "yKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkPerson\" type=\"System.S" +
        "tring\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"ChkPerson\" mappingColumnType=\"System.String\" sqlType=\"nvarc" +
        "har(36)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"ChkDate\"" +
        " type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false" +
        "\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\"" +
        " isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropert" +
        "yDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"ChkDate\" mappingColumnT" +
        "ype=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\"" +
        " isNotNull=\"false\" />\r\n    <Property name=\"ChkResultFlag\" type=\"System.String\" i" +
        "sInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\"" +
        " isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" is" +
        "IndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" " +
        "mappingName=\"ChkResultFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"RecordDate\" type=" +
        "\"System.Nullable`1[System.DateTime]\" isInherited=\"false\" isReadOnly=\"false\" isCo" +
        "mpoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLaz" +
        "yLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=" +
        "\"false\" isSerializationIgnore=\"false\" mappingName=\"RecordDate\" mappingColumnType" +
        "=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" is" +
        "NotNull=\"false\" />\r\n    <Property name=\"Remark\" type=\"System.String\" isInherited" +
        "=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"" +
        "false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexPrope" +
        "rty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingNam" +
        "e=\"Remark\" mappingColumnType=\"System.String\" sqlType=\"nvarchar(100)\" isPrimaryKe" +
        "y=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"DeleteFlag\" type=\"System.Str" +
        "ing\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"" +
        "false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"fal" +
        "se\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"f" +
        "alse\" mappingName=\"DeleteFlag\" mappingColumnType=\"System.String\" sqlType=\"char(1" +
        ")\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n  </Properties>\r\n</EntityConfigura" +
        "tion>")]
    public partial class PstMaterialInventory : NBear.Common.Entity
    {

        protected static NBear.Common.EntityConfiguration _PstMaterialInventoryEntityConfiguration;

        protected string _BillNo;

        protected string _StorageID;

        protected string _InventoryType;

        protected global::System.DateTime? _InventoryDate;

        protected string _InaccountDuration;

        protected string _MakerPerson;

        protected string _ChkPerson;

        protected global::System.DateTime? _ChkDate;

        protected string _ChkResultFlag;

        protected global::System.DateTime? _RecordDate;

        protected string _Remark;

        protected string _DeleteFlag;

        public static @__Columns _ = new @__Columns();

        public static bool operator ==(global::Mesnac.Entity.PstMaterialInventory left, global::Mesnac.Entity.PstMaterialInventory right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


        public static bool operator !=(global::Mesnac.Entity.PstMaterialInventory left, global::Mesnac.Entity.PstMaterialInventory right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }



        public string BillNo
        {
            get
            {
                return this._BillNo;
            }
            set
            {
                this.OnPropertyChanged("BillNo", this._BillNo, value);
                this._BillNo = value;
            }
        }

        public string StorageID
        {
            get
            {
                return this._StorageID;
            }
            set
            {
                this.OnPropertyChanged("StorageID", this._StorageID, value);
                this._StorageID = value;
            }
        }

        public string InventoryType
        {
            get
            {
                return this._InventoryType;
            }
            set
            {
                this.OnPropertyChanged("InventoryType", this._InventoryType, value);
                this._InventoryType = value;
            }
        }

        public global::System.DateTime? InventoryDate
        {
            get
            {
                return this._InventoryDate;
            }
            set
            {
                this.OnPropertyChanged("InventoryDate", this._InventoryDate, value);
                this._InventoryDate = value;
            }
        }

        public string InaccountDuration
        {
            get
            {
                return this._InaccountDuration;
            }
            set
            {
                this.OnPropertyChanged("InaccountDuration", this._InaccountDuration, value);
                this._InaccountDuration = value;
            }
        }

        public string MakerPerson
        {
            get
            {
                return this._MakerPerson;
            }
            set
            {
                this.OnPropertyChanged("MakerPerson", this._MakerPerson, value);
                this._MakerPerson = value;
            }
        }

        public string ChkPerson
        {
            get
            {
                return this._ChkPerson;
            }
            set
            {
                this.OnPropertyChanged("ChkPerson", this._ChkPerson, value);
                this._ChkPerson = value;
            }
        }

        public global::System.DateTime? ChkDate
        {
            get
            {
                return this._ChkDate;
            }
            set
            {
                this.OnPropertyChanged("ChkDate", this._ChkDate, value);
                this._ChkDate = value;
            }
        }

        public string ChkResultFlag
        {
            get
            {
                return this._ChkResultFlag;
            }
            set
            {
                this.OnPropertyChanged("ChkResultFlag", this._ChkResultFlag, value);
                this._ChkResultFlag = value;
            }
        }

        public global::System.DateTime? RecordDate
        {
            get
            {
                return this._RecordDate;
            }
            set
            {
                this.OnPropertyChanged("RecordDate", this._RecordDate, value);
                this._RecordDate = value;
            }
        }

        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                this.OnPropertyChanged("Remark", this._Remark, value);
                this._Remark = value;
            }
        }

        public string DeleteFlag
        {
            get
            {
                return this._DeleteFlag;
            }
            set
            {
                this.OnPropertyChanged("DeleteFlag", this._DeleteFlag, value);
                this._DeleteFlag = value;
            }
        }

        public override NBear.Common.EntityConfiguration GetEntityConfiguration()
        {
            if ((PstMaterialInventory._PstMaterialInventoryEntityConfiguration == null))
            {
                PstMaterialInventory._PstMaterialInventoryEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.PstMaterialInventory");
            }
            return PstMaterialInventory._PstMaterialInventoryEntityConfiguration;
        }

        public override void ReloadQueries(bool includeLazyLoadQueries)
        {
        }

        public override object[] GetPropertyValues()
        {
            return new object[] {
                    this._BillNo,
                    this._StorageID,
                    this._InventoryType,
                    this._InventoryDate,
                    this._InaccountDuration,
                    this._MakerPerson,
                    this._ChkPerson,
                    this._ChkDate,
                    this._ChkResultFlag,
                    this._RecordDate,
                    this._Remark,
                    this._DeleteFlag};
        }

        public override void SetPropertyValues(System.Data.IDataReader reader)
        {
            if ((false == reader.IsDBNull(0)))
            {
                this._BillNo = reader.GetString(0);
            }
            if ((false == reader.IsDBNull(1)))
            {
                this._StorageID = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2)))
            {
                this._InventoryType = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3)))
            {
                this._InventoryDate = this.GetDateTime(reader, 3);
            }
            if ((false == reader.IsDBNull(4)))
            {
                this._InaccountDuration = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5)))
            {
                this._MakerPerson = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6)))
            {
                this._ChkPerson = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7)))
            {
                this._ChkDate = this.GetDateTime(reader, 7);
            }
            if ((false == reader.IsDBNull(8)))
            {
                this._ChkResultFlag = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9)))
            {
                this._RecordDate = this.GetDateTime(reader, 9);
            }
            if ((false == reader.IsDBNull(10)))
            {
                this._Remark = reader.GetString(10);
            }
            if ((false == reader.IsDBNull(11)))
            {
                this._DeleteFlag = reader.GetString(11);
            }
            this.ReloadQueries(false);
        }

        public override void SetPropertyValues(System.Data.DataRow row)
        {
            if ((false == row.IsNull(0)))
            {
                this._BillNo = ((string)(row[0]));
            }
            if ((false == row.IsNull(1)))
            {
                this._StorageID = ((string)(row[1]));
            }
            if ((false == row.IsNull(2)))
            {
                this._InventoryType = ((string)(row[2]));
            }
            if ((false == row.IsNull(3)))
            {
                this._InventoryDate = this.GetDateTime(row, 3);
            }
            if ((false == row.IsNull(4)))
            {
                this._InaccountDuration = ((string)(row[4]));
            }
            if ((false == row.IsNull(5)))
            {
                this._MakerPerson = ((string)(row[5]));
            }
            if ((false == row.IsNull(6)))
            {
                this._ChkPerson = ((string)(row[6]));
            }
            if ((false == row.IsNull(7)))
            {
                this._ChkDate = this.GetDateTime(row, 7);
            }
            if ((false == row.IsNull(8)))
            {
                this._ChkResultFlag = ((string)(row[8]));
            }
            if ((false == row.IsNull(9)))
            {
                this._RecordDate = this.GetDateTime(row, 9);
            }
            if ((false == row.IsNull(10)))
            {
                this._Remark = ((string)(row[10]));
            }
            if ((false == row.IsNull(11)))
            {
                this._DeleteFlag = ((string)(row[11]));
            }
            this.ReloadQueries(false);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.PstMaterialInventory).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.PstMaterialInventory)(obj)).isAttached)
                        && (this.BillNo == ((global::Mesnac.Entity.PstMaterialInventory)(obj)).BillNo));
        }

        public static @__Columns @__Alias(string aliasName)
        {
            return new @__Columns(aliasName);
        }

        public class @__Columns
        {

            protected string aliasName;

            protected NBear.Common.PropertyItem _BillNo = new NBear.Common.PropertyItem("BillNo", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _StorageID = new NBear.Common.PropertyItem("StorageID", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _InventoryType = new NBear.Common.PropertyItem("InventoryType", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _InventoryDate = new NBear.Common.PropertyItem("InventoryDate", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _InaccountDuration = new NBear.Common.PropertyItem("InaccountDuration", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _MakerPerson = new NBear.Common.PropertyItem("MakerPerson", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _ChkPerson = new NBear.Common.PropertyItem("ChkPerson", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _ChkDate = new NBear.Common.PropertyItem("ChkDate", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _ChkResultFlag = new NBear.Common.PropertyItem("ChkResultFlag", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _RecordDate = new NBear.Common.PropertyItem("RecordDate", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _Remark = new NBear.Common.PropertyItem("Remark", "Mesnac.Entity.PstMaterialInventory");

            protected NBear.Common.PropertyItem _DeleteFlag = new NBear.Common.PropertyItem("DeleteFlag", "Mesnac.Entity.PstMaterialInventory");

            public @__Columns()
            {
            }

            public @__Columns(string aliasName)
            {
                this.aliasName = aliasName;
            }

            public NBear.Common.PropertyItem BillNo
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _BillNo;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("BillNo", _BillNo.EntityConfiguration, _BillNo.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem StorageID
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _StorageID;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("StorageID", _StorageID.EntityConfiguration, _StorageID.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InventoryType
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InventoryType;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InventoryType", _InventoryType.EntityConfiguration, _InventoryType.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InventoryDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InventoryDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InventoryDate", _InventoryDate.EntityConfiguration, _InventoryDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem InaccountDuration
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _InaccountDuration;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("InaccountDuration", _InaccountDuration.EntityConfiguration, _InaccountDuration.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem MakerPerson
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _MakerPerson;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("MakerPerson", _MakerPerson.EntityConfiguration, _MakerPerson.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkPerson
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkPerson;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkPerson", _ChkPerson.EntityConfiguration, _ChkPerson.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkDate", _ChkDate.EntityConfiguration, _ChkDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem ChkResultFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _ChkResultFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("ChkResultFlag", _ChkResultFlag.EntityConfiguration, _ChkResultFlag.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem RecordDate
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _RecordDate;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("RecordDate", _RecordDate.EntityConfiguration, _RecordDate.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem Remark
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _Remark;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("Remark", _Remark.EntityConfiguration, _Remark.PropertyConfiguration, aliasName);
                    }
                }
            }

            public NBear.Common.PropertyItem DeleteFlag
            {
                get
                {
                    if ((aliasName == null))
                    {
                        return _DeleteFlag;
                    }
                    else
                    {
                        return new NBear.Common.PropertyItem("DeleteFlag", _DeleteFlag.EntityConfiguration, _DeleteFlag.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
