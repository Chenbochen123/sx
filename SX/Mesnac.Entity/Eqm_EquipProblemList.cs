//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mesnac.Entity {
    using System;
    using System.Xml.Serialization;
    using NBear.Common;
    
    
    [System.SerializableAttribute()]
    public partial class Eqm_EquipProblemListArrayList : NBear.Common.EntityArrayList<Mesnac.Entity.Eqm_EquipProblemList> {
    }
    
    [System.SerializableAttribute()]
    [NBear.Common.EmbeddedEntityConfigurationAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<EntityConfiguration xmlns:xsd=\"http://w" +
        "ww.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
        "name=\"Mesnac.Entity.Eqm_EquipProblemList\" isReadOnly=\"false\" isAutoPreLoad=\"fals" +
        "e\" isBatchUpdate=\"false\" isRelation=\"false\" mappingName=\"Eqm_EquipProblemList\" b" +
        "atchSize=\"10\">\r\n  <Properties>\r\n    <Property name=\"Serialid\" type=\"System.Int32" +
        "\" isInherited=\"false\" isReadOnly=\"true\" isCompoundUnit=\"false\" isContained=\"fals" +
        "e\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" " +
        "isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false" +
        "\" mappingName=\"Serialid\" mappingColumnType=\"System.Int32\" sqlType=\"int\" isPrimar" +
        "yKey=\"true\" isNotNull=\"true\" />\r\n    <Property name=\"P_kind\" type=\"System.String" +
        "\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"fal" +
        "se\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\"" +
        " isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"fals" +
        "e\" mappingName=\"P_kind\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" " +
        "isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P_describe\" type=" +
        "\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" is" +
        "Contained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelat" +
        "ionKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializati" +
        "onIgnore=\"false\" mappingName=\"P_describe\" mappingColumnType=\"System.String\" sqlT" +
        "ype=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name" +
        "=\"Workshop\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompou" +
        "ndUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoa" +
        "d=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"fal" +
        "se\" isSerializationIgnore=\"false\" mappingName=\"Workshop\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    " +
        "<Property name=\"EquipName\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"EquipName\" mapping" +
        "ColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=" +
        "\"false\" />\r\n    <Property name=\"P_source\" type=\"System.String\" isInherited=\"fals" +
        "e\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\"" +
        " isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"f" +
        "alse\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P_s" +
        "ource\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"fal" +
        "se\" isNotNull=\"false\" />\r\n    <Property name=\"P_level\" type=\"System.String\" isIn" +
        "herited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" is" +
        "Query=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isInd" +
        "exProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" map" +
        "pingName=\"P_level\" mappingColumnType=\"System.String\" sqlType=\"varchar(20)\" isPri" +
        "maryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P_classify\" type=\"Syst" +
        "em.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isConta" +
        "ined=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKe" +
        "y=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgn" +
        "ore=\"false\" mappingName=\"P_classify\" mappingColumnType=\"System.String\" sqlType=\"" +
        "varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P_me" +
        "asures\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUn" +
        "it=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"f" +
        "alse\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" " +
        "isSerializationIgnore=\"false\" mappingName=\"P_measures\" mappingColumnType=\"System" +
        ".String\" sqlType=\"nvarchar(40)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <" +
        "Property name=\"P_FindUser\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"" +
        "false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"f" +
        "alse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPr" +
        "opertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P_FindUser\" mappin" +
        "gColumnType=\"System.String\" sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull" +
        "=\"false\" />\r\n    <Property name=\"P_FindDate\" type=\"System.Nullable`1[System.Date" +
        "Time]\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained" +
        "=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"f" +
        "alse\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=" +
        "\"false\" mappingName=\"P_FindDate\" mappingColumnType=\"System.Nullable`1[System.Dat" +
        "eTime]\" sqlType=\"datetime\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Prope" +
        "rty name=\"P_PlanDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"fal" +
        "se\" isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false" +
        "\" isFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"" +
        "false\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P_" +
        "PlanDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"dateti" +
        "me\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P_HandUser\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"P_HandUser\" mappingColumnType=\"System.String\" " +
        "sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property n" +
        "ame=\"P_FinishDate\" type=\"System.Nullable`1[System.DateTime]\" isInherited=\"false\"" +
        " isReadOnly=\"false\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" i" +
        "sFriendKey=\"false\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"fal" +
        "se\" isIndexPropertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P_Fin" +
        "ishDate\" mappingColumnType=\"System.Nullable`1[System.DateTime]\" sqlType=\"datetim" +
        "e\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property name=\"P_CheckUser\" t" +
        "ype=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isCompoundUnit=\"false" +
        "\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyLoad=\"false\" isR" +
        "elationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"false\" isSeriali" +
        "zationIgnore=\"false\" mappingName=\"P_CheckUser\" mappingColumnType=\"System.String\"" +
        " sqlType=\"varchar(20)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n    <Property " +
        "name=\"P_memo\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"false\" isComp" +
        "oundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"false\" isLazyL" +
        "oad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPropertyDesc=\"f" +
        "alse\" isSerializationIgnore=\"false\" mappingName=\"P_memo\" mappingColumnType=\"Syst" +
        "em.String\" sqlType=\"nvarchar(50)\" isPrimaryKey=\"false\" isNotNull=\"false\" />\r\n   " +
        " <Property name=\"P_State\" type=\"System.String\" isInherited=\"false\" isReadOnly=\"f" +
        "alse\" isCompoundUnit=\"false\" isContained=\"false\" isQuery=\"false\" isFriendKey=\"fa" +
        "lse\" isLazyLoad=\"false\" isRelationKey=\"false\" isIndexProperty=\"false\" isIndexPro" +
        "pertyDesc=\"false\" isSerializationIgnore=\"false\" mappingName=\"P_State\" mappingCol" +
        "umnType=\"System.String\" sqlType=\"varchar(10)\" isPrimaryKey=\"false\" isNotNull=\"fa" +
        "lse\" />\r\n  </Properties>\r\n</EntityConfiguration>")]
    public partial class Eqm_EquipProblemList : NBear.Common.Entity {
        
        protected static NBear.Common.EntityConfiguration _Eqm_EquipProblemListEntityConfiguration;
        
        protected int _Serialid;
        
        protected string _P_kind;
        
        protected string _P_describe;
        
        protected string _Workshop;
        
        protected string _EquipName;
        
        protected string _P_source;
        
        protected string _P_level;
        
        protected string _P_classify;
        
        protected string _P_measures;
        
        protected string _P_FindUser;
        
        protected global::System.DateTime? _P_FindDate;
        
        protected global::System.DateTime? _P_PlanDate;
        
        protected string _P_HandUser;
        
        protected global::System.DateTime? _P_FinishDate;
        
        protected string _P_CheckUser;
        
        protected string _P_memo;
        
        protected string _P_State;
        
        public static @__Columns _ = new @__Columns();
        
		public static bool operator ==(global::Mesnac.Entity.Eqm_EquipProblemList left, global::Mesnac.Entity.Eqm_EquipProblemList right) { return ((object)left) != null ? left.Equals(right) : ((object)right) == null ? true : false; }


		public static bool operator !=(global::Mesnac.Entity.Eqm_EquipProblemList left, global::Mesnac.Entity.Eqm_EquipProblemList right) { return ((object)left) != null ? !left.Equals(right) : ((object)right) == null ? false : true; }


        
        public int Serialid {
            get {
                return this._Serialid;
            }
            set {
                this.OnPropertyChanged("Serialid", this._Serialid, value);
                this._Serialid = value;
            }
        }
        
        public string P_kind {
            get {
                return this._P_kind;
            }
            set {
                this.OnPropertyChanged("P_kind", this._P_kind, value);
                this._P_kind = value;
            }
        }
        
        public string P_describe {
            get {
                return this._P_describe;
            }
            set {
                this.OnPropertyChanged("P_describe", this._P_describe, value);
                this._P_describe = value;
            }
        }
        
        public string Workshop {
            get {
                return this._Workshop;
            }
            set {
                this.OnPropertyChanged("Workshop", this._Workshop, value);
                this._Workshop = value;
            }
        }
        
        public string EquipName {
            get {
                return this._EquipName;
            }
            set {
                this.OnPropertyChanged("EquipName", this._EquipName, value);
                this._EquipName = value;
            }
        }
        
        public string P_source {
            get {
                return this._P_source;
            }
            set {
                this.OnPropertyChanged("P_source", this._P_source, value);
                this._P_source = value;
            }
        }
        
        public string P_level {
            get {
                return this._P_level;
            }
            set {
                this.OnPropertyChanged("P_level", this._P_level, value);
                this._P_level = value;
            }
        }
        
        public string P_classify {
            get {
                return this._P_classify;
            }
            set {
                this.OnPropertyChanged("P_classify", this._P_classify, value);
                this._P_classify = value;
            }
        }
        
        public string P_measures {
            get {
                return this._P_measures;
            }
            set {
                this.OnPropertyChanged("P_measures", this._P_measures, value);
                this._P_measures = value;
            }
        }
        
        public string P_FindUser {
            get {
                return this._P_FindUser;
            }
            set {
                this.OnPropertyChanged("P_FindUser", this._P_FindUser, value);
                this._P_FindUser = value;
            }
        }
        
        public global::System.DateTime? P_FindDate {
            get {
                return this._P_FindDate;
            }
            set {
                this.OnPropertyChanged("P_FindDate", this._P_FindDate, value);
                this._P_FindDate = value;
            }
        }
        
        public global::System.DateTime? P_PlanDate {
            get {
                return this._P_PlanDate;
            }
            set {
                this.OnPropertyChanged("P_PlanDate", this._P_PlanDate, value);
                this._P_PlanDate = value;
            }
        }
        
        public string P_HandUser {
            get {
                return this._P_HandUser;
            }
            set {
                this.OnPropertyChanged("P_HandUser", this._P_HandUser, value);
                this._P_HandUser = value;
            }
        }
        
        public global::System.DateTime? P_FinishDate {
            get {
                return this._P_FinishDate;
            }
            set {
                this.OnPropertyChanged("P_FinishDate", this._P_FinishDate, value);
                this._P_FinishDate = value;
            }
        }
        
        public string P_CheckUser {
            get {
                return this._P_CheckUser;
            }
            set {
                this.OnPropertyChanged("P_CheckUser", this._P_CheckUser, value);
                this._P_CheckUser = value;
            }
        }
        
        public string P_memo {
            get {
                return this._P_memo;
            }
            set {
                this.OnPropertyChanged("P_memo", this._P_memo, value);
                this._P_memo = value;
            }
        }
        
        public string P_State {
            get {
                return this._P_State;
            }
            set {
                this.OnPropertyChanged("P_State", this._P_State, value);
                this._P_State = value;
            }
        }
        
        public override NBear.Common.EntityConfiguration GetEntityConfiguration() {
            if ((Eqm_EquipProblemList._Eqm_EquipProblemListEntityConfiguration == null)) {
                Eqm_EquipProblemList._Eqm_EquipProblemListEntityConfiguration = NBear.Common.MetaDataManager.GetEntityConfiguration("Mesnac.Entity.Eqm_EquipProblemList");
            }
            return Eqm_EquipProblemList._Eqm_EquipProblemListEntityConfiguration;
        }
        
        public override void ReloadQueries(bool includeLazyLoadQueries) {
        }
        
        public override object[] GetPropertyValues() {
            return new object[] {
                    this._Serialid,
                    this._P_kind,
                    this._P_describe,
                    this._Workshop,
                    this._EquipName,
                    this._P_source,
                    this._P_level,
                    this._P_classify,
                    this._P_measures,
                    this._P_FindUser,
                    this._P_FindDate,
                    this._P_PlanDate,
                    this._P_HandUser,
                    this._P_FinishDate,
                    this._P_CheckUser,
                    this._P_memo,
                    this._P_State};
        }
        
        public override void SetPropertyValues(System.Data.IDataReader reader) {
            if ((false == reader.IsDBNull(0))) {
                this._Serialid = reader.GetInt32(0);
            }
            if ((false == reader.IsDBNull(1))) {
                this._P_kind = reader.GetString(1);
            }
            if ((false == reader.IsDBNull(2))) {
                this._P_describe = reader.GetString(2);
            }
            if ((false == reader.IsDBNull(3))) {
                this._Workshop = reader.GetString(3);
            }
            if ((false == reader.IsDBNull(4))) {
                this._EquipName = reader.GetString(4);
            }
            if ((false == reader.IsDBNull(5))) {
                this._P_source = reader.GetString(5);
            }
            if ((false == reader.IsDBNull(6))) {
                this._P_level = reader.GetString(6);
            }
            if ((false == reader.IsDBNull(7))) {
                this._P_classify = reader.GetString(7);
            }
            if ((false == reader.IsDBNull(8))) {
                this._P_measures = reader.GetString(8);
            }
            if ((false == reader.IsDBNull(9))) {
                this._P_FindUser = reader.GetString(9);
            }
            if ((false == reader.IsDBNull(10))) {
                this._P_FindDate = this.GetDateTime(reader, 10);
            }
            if ((false == reader.IsDBNull(11))) {
                this._P_PlanDate = this.GetDateTime(reader, 11);
            }
            if ((false == reader.IsDBNull(12))) {
                this._P_HandUser = reader.GetString(12);
            }
            if ((false == reader.IsDBNull(13))) {
                this._P_FinishDate = this.GetDateTime(reader, 13);
            }
            if ((false == reader.IsDBNull(14))) {
                this._P_CheckUser = reader.GetString(14);
            }
            if ((false == reader.IsDBNull(15))) {
                this._P_memo = reader.GetString(15);
            }
            if ((false == reader.IsDBNull(16))) {
                this._P_State = reader.GetString(16);
            }
            this.ReloadQueries(false);
        }
        
        public override void SetPropertyValues(System.Data.DataRow row) {
            if ((false == row.IsNull(0))) {
                this._Serialid = ((int)(row[0]));
            }
            if ((false == row.IsNull(1))) {
                this._P_kind = ((string)(row[1]));
            }
            if ((false == row.IsNull(2))) {
                this._P_describe = ((string)(row[2]));
            }
            if ((false == row.IsNull(3))) {
                this._Workshop = ((string)(row[3]));
            }
            if ((false == row.IsNull(4))) {
                this._EquipName = ((string)(row[4]));
            }
            if ((false == row.IsNull(5))) {
                this._P_source = ((string)(row[5]));
            }
            if ((false == row.IsNull(6))) {
                this._P_level = ((string)(row[6]));
            }
            if ((false == row.IsNull(7))) {
                this._P_classify = ((string)(row[7]));
            }
            if ((false == row.IsNull(8))) {
                this._P_measures = ((string)(row[8]));
            }
            if ((false == row.IsNull(9))) {
                this._P_FindUser = ((string)(row[9]));
            }
            if ((false == row.IsNull(10))) {
                this._P_FindDate = this.GetDateTime(row, 10);
            }
            if ((false == row.IsNull(11))) {
                this._P_PlanDate = this.GetDateTime(row, 11);
            }
            if ((false == row.IsNull(12))) {
                this._P_HandUser = ((string)(row[12]));
            }
            if ((false == row.IsNull(13))) {
                this._P_FinishDate = this.GetDateTime(row, 13);
            }
            if ((false == row.IsNull(14))) {
                this._P_CheckUser = ((string)(row[14]));
            }
            if ((false == row.IsNull(15))) {
                this._P_memo = ((string)(row[15]));
            }
            if ((false == row.IsNull(16))) {
                this._P_State = ((string)(row[16]));
            }
            this.ReloadQueries(false);
        }
        
        public override int GetHashCode() {
            return base.GetHashCode();
        }
        
        public override bool Equals(object obj) {
            if ((obj == null)) {
                return false;
            }
            if ((false == typeof(global::Mesnac.Entity.Eqm_EquipProblemList).IsAssignableFrom(obj.GetType()))) {
                return false;
            }
            if ((((object)(this)) == ((object)(obj)))) {
                return true;
            }
            return ((this.isAttached && ((global::Mesnac.Entity.Eqm_EquipProblemList)(obj)).isAttached) 
                        && (this.Serialid == ((global::Mesnac.Entity.Eqm_EquipProblemList)(obj)).Serialid));
        }
        
        public static @__Columns @__Alias(string aliasName) {
            return new @__Columns(aliasName);
        }
        
        public class @__Columns {
            
            protected string aliasName;
            
            protected NBear.Common.PropertyItem _Serialid = new NBear.Common.PropertyItem("Serialid", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_kind = new NBear.Common.PropertyItem("P_kind", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_describe = new NBear.Common.PropertyItem("P_describe", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _Workshop = new NBear.Common.PropertyItem("Workshop", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _EquipName = new NBear.Common.PropertyItem("EquipName", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_source = new NBear.Common.PropertyItem("P_source", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_level = new NBear.Common.PropertyItem("P_level", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_classify = new NBear.Common.PropertyItem("P_classify", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_measures = new NBear.Common.PropertyItem("P_measures", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_FindUser = new NBear.Common.PropertyItem("P_FindUser", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_FindDate = new NBear.Common.PropertyItem("P_FindDate", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_PlanDate = new NBear.Common.PropertyItem("P_PlanDate", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_HandUser = new NBear.Common.PropertyItem("P_HandUser", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_FinishDate = new NBear.Common.PropertyItem("P_FinishDate", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_CheckUser = new NBear.Common.PropertyItem("P_CheckUser", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_memo = new NBear.Common.PropertyItem("P_memo", "Mesnac.Entity.Eqm_EquipProblemList");
            
            protected NBear.Common.PropertyItem _P_State = new NBear.Common.PropertyItem("P_State", "Mesnac.Entity.Eqm_EquipProblemList");
            
            public @__Columns() {
            }
            
            public @__Columns(string aliasName) {
                this.aliasName = aliasName;
            }
            
            public NBear.Common.PropertyItem Serialid {
                get {
                    if ((aliasName == null)) {
                        return _Serialid;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Serialid", _Serialid.EntityConfiguration, _Serialid.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_kind {
                get {
                    if ((aliasName == null)) {
                        return _P_kind;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_kind", _P_kind.EntityConfiguration, _P_kind.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_describe {
                get {
                    if ((aliasName == null)) {
                        return _P_describe;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_describe", _P_describe.EntityConfiguration, _P_describe.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem Workshop {
                get {
                    if ((aliasName == null)) {
                        return _Workshop;
                    }
                    else {
                        return new NBear.Common.PropertyItem("Workshop", _Workshop.EntityConfiguration, _Workshop.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem EquipName {
                get {
                    if ((aliasName == null)) {
                        return _EquipName;
                    }
                    else {
                        return new NBear.Common.PropertyItem("EquipName", _EquipName.EntityConfiguration, _EquipName.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_source {
                get {
                    if ((aliasName == null)) {
                        return _P_source;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_source", _P_source.EntityConfiguration, _P_source.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_level {
                get {
                    if ((aliasName == null)) {
                        return _P_level;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_level", _P_level.EntityConfiguration, _P_level.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_classify {
                get {
                    if ((aliasName == null)) {
                        return _P_classify;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_classify", _P_classify.EntityConfiguration, _P_classify.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_measures {
                get {
                    if ((aliasName == null)) {
                        return _P_measures;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_measures", _P_measures.EntityConfiguration, _P_measures.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_FindUser {
                get {
                    if ((aliasName == null)) {
                        return _P_FindUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_FindUser", _P_FindUser.EntityConfiguration, _P_FindUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_FindDate {
                get {
                    if ((aliasName == null)) {
                        return _P_FindDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_FindDate", _P_FindDate.EntityConfiguration, _P_FindDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_PlanDate {
                get {
                    if ((aliasName == null)) {
                        return _P_PlanDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_PlanDate", _P_PlanDate.EntityConfiguration, _P_PlanDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_HandUser {
                get {
                    if ((aliasName == null)) {
                        return _P_HandUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_HandUser", _P_HandUser.EntityConfiguration, _P_HandUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_FinishDate {
                get {
                    if ((aliasName == null)) {
                        return _P_FinishDate;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_FinishDate", _P_FinishDate.EntityConfiguration, _P_FinishDate.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_CheckUser {
                get {
                    if ((aliasName == null)) {
                        return _P_CheckUser;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_CheckUser", _P_CheckUser.EntityConfiguration, _P_CheckUser.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_memo {
                get {
                    if ((aliasName == null)) {
                        return _P_memo;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_memo", _P_memo.EntityConfiguration, _P_memo.PropertyConfiguration, aliasName);
                    }
                }
            }
            
            public NBear.Common.PropertyItem P_State {
                get {
                    if ((aliasName == null)) {
                        return _P_State;
                    }
                    else {
                        return new NBear.Common.PropertyItem("P_State", _P_State.EntityConfiguration, _P_State.PropertyConfiguration, aliasName);
                    }
                }
            }
        }
    }
}
